
STM32F103_Peripheral_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b4  08004130  08004130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080098e8  080098e8  000068e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c98  08009c98  0000728c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c98  08009c98  00006c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ca0  08009ca0  0000728c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ca0  08009ca0  00006ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ca4  08009ca4  00006ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  08009ca8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  2000028c  08009f34  0000728c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08009f34  000076ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000728c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043fe  00000000  00000000  000072b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001319  00000000  00000000  0000b6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000460  00000000  00000000  0000c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000320  00000000  00000000  0000ce30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003da8  00000000  00000000  0000d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004acc  00000000  00000000  00010ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ccc6  00000000  00000000  000159c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0002268a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002360  00000000  00000000  000226d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00024a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004130 <__do_global_dtors_aux>:
 8004130:	b510      	push	{r4, lr}
 8004132:	4c05      	ldr	r4, [pc, #20]	@ (8004148 <__do_global_dtors_aux+0x18>)
 8004134:	7823      	ldrb	r3, [r4, #0]
 8004136:	b933      	cbnz	r3, 8004146 <__do_global_dtors_aux+0x16>
 8004138:	4b04      	ldr	r3, [pc, #16]	@ (800414c <__do_global_dtors_aux+0x1c>)
 800413a:	b113      	cbz	r3, 8004142 <__do_global_dtors_aux+0x12>
 800413c:	4804      	ldr	r0, [pc, #16]	@ (8004150 <__do_global_dtors_aux+0x20>)
 800413e:	f3af 8000 	nop.w
 8004142:	2301      	movs	r3, #1
 8004144:	7023      	strb	r3, [r4, #0]
 8004146:	bd10      	pop	{r4, pc}
 8004148:	2000028c 	.word	0x2000028c
 800414c:	00000000 	.word	0x00000000
 8004150:	080098cc 	.word	0x080098cc

08004154 <frame_dummy>:
 8004154:	b508      	push	{r3, lr}
 8004156:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <frame_dummy+0x10>)
 8004158:	b11b      	cbz	r3, 8004162 <frame_dummy+0xe>
 800415a:	4903      	ldr	r1, [pc, #12]	@ (8004168 <frame_dummy+0x14>)
 800415c:	4803      	ldr	r0, [pc, #12]	@ (800416c <frame_dummy+0x18>)
 800415e:	f3af 8000 	nop.w
 8004162:	bd08      	pop	{r3, pc}
 8004164:	00000000 	.word	0x00000000
 8004168:	20000290 	.word	0x20000290
 800416c:	080098cc 	.word	0x080098cc

08004170 <strlen>:
 8004170:	4603      	mov	r3, r0
 8004172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004176:	2a00      	cmp	r2, #0
 8004178:	d1fb      	bne.n	8004172 <strlen+0x2>
 800417a:	1a18      	subs	r0, r3, r0
 800417c:	3801      	subs	r0, #1
 800417e:	4770      	bx	lr

08004180 <__aeabi_fmul>:
 8004180:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004184:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8004188:	bf1e      	ittt	ne
 800418a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800418e:	ea92 0f0c 	teqne	r2, ip
 8004192:	ea93 0f0c 	teqne	r3, ip
 8004196:	d06f      	beq.n	8004278 <__aeabi_fmul+0xf8>
 8004198:	441a      	add	r2, r3
 800419a:	ea80 0c01 	eor.w	ip, r0, r1
 800419e:	0240      	lsls	r0, r0, #9
 80041a0:	bf18      	it	ne
 80041a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80041a6:	d01e      	beq.n	80041e6 <__aeabi_fmul+0x66>
 80041a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80041ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80041b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80041b4:	fba0 3101 	umull	r3, r1, r0, r1
 80041b8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80041bc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80041c0:	bf3e      	ittt	cc
 80041c2:	0049      	lslcc	r1, r1, #1
 80041c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80041c8:	005b      	lslcc	r3, r3, #1
 80041ca:	ea40 0001 	orr.w	r0, r0, r1
 80041ce:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80041d2:	2afd      	cmp	r2, #253	@ 0xfd
 80041d4:	d81d      	bhi.n	8004212 <__aeabi_fmul+0x92>
 80041d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80041de:	bf08      	it	eq
 80041e0:	f020 0001 	biceq.w	r0, r0, #1
 80041e4:	4770      	bx	lr
 80041e6:	f090 0f00 	teq	r0, #0
 80041ea:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80041ee:	bf08      	it	eq
 80041f0:	0249      	lsleq	r1, r1, #9
 80041f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80041f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80041fa:	3a7f      	subs	r2, #127	@ 0x7f
 80041fc:	bfc2      	ittt	gt
 80041fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8004202:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8004206:	4770      	bxgt	lr
 8004208:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	3a01      	subs	r2, #1
 8004212:	dc5d      	bgt.n	80042d0 <__aeabi_fmul+0x150>
 8004214:	f112 0f19 	cmn.w	r2, #25
 8004218:	bfdc      	itt	le
 800421a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800421e:	4770      	bxle	lr
 8004220:	f1c2 0200 	rsb	r2, r2, #0
 8004224:	0041      	lsls	r1, r0, #1
 8004226:	fa21 f102 	lsr.w	r1, r1, r2
 800422a:	f1c2 0220 	rsb	r2, r2, #32
 800422e:	fa00 fc02 	lsl.w	ip, r0, r2
 8004232:	ea5f 0031 	movs.w	r0, r1, rrx
 8004236:	f140 0000 	adc.w	r0, r0, #0
 800423a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800423e:	bf08      	it	eq
 8004240:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8004244:	4770      	bx	lr
 8004246:	f092 0f00 	teq	r2, #0
 800424a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800424e:	bf02      	ittt	eq
 8004250:	0040      	lsleq	r0, r0, #1
 8004252:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8004256:	3a01      	subeq	r2, #1
 8004258:	d0f9      	beq.n	800424e <__aeabi_fmul+0xce>
 800425a:	ea40 000c 	orr.w	r0, r0, ip
 800425e:	f093 0f00 	teq	r3, #0
 8004262:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8004266:	bf02      	ittt	eq
 8004268:	0049      	lsleq	r1, r1, #1
 800426a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800426e:	3b01      	subeq	r3, #1
 8004270:	d0f9      	beq.n	8004266 <__aeabi_fmul+0xe6>
 8004272:	ea41 010c 	orr.w	r1, r1, ip
 8004276:	e78f      	b.n	8004198 <__aeabi_fmul+0x18>
 8004278:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800427c:	ea92 0f0c 	teq	r2, ip
 8004280:	bf18      	it	ne
 8004282:	ea93 0f0c 	teqne	r3, ip
 8004286:	d00a      	beq.n	800429e <__aeabi_fmul+0x11e>
 8004288:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800428c:	bf18      	it	ne
 800428e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8004292:	d1d8      	bne.n	8004246 <__aeabi_fmul+0xc6>
 8004294:	ea80 0001 	eor.w	r0, r0, r1
 8004298:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800429c:	4770      	bx	lr
 800429e:	f090 0f00 	teq	r0, #0
 80042a2:	bf17      	itett	ne
 80042a4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80042a8:	4608      	moveq	r0, r1
 80042aa:	f091 0f00 	teqne	r1, #0
 80042ae:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80042b2:	d014      	beq.n	80042de <__aeabi_fmul+0x15e>
 80042b4:	ea92 0f0c 	teq	r2, ip
 80042b8:	d101      	bne.n	80042be <__aeabi_fmul+0x13e>
 80042ba:	0242      	lsls	r2, r0, #9
 80042bc:	d10f      	bne.n	80042de <__aeabi_fmul+0x15e>
 80042be:	ea93 0f0c 	teq	r3, ip
 80042c2:	d103      	bne.n	80042cc <__aeabi_fmul+0x14c>
 80042c4:	024b      	lsls	r3, r1, #9
 80042c6:	bf18      	it	ne
 80042c8:	4608      	movne	r0, r1
 80042ca:	d108      	bne.n	80042de <__aeabi_fmul+0x15e>
 80042cc:	ea80 0001 	eor.w	r0, r0, r1
 80042d0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80042d4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80042d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80042dc:	4770      	bx	lr
 80042de:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80042e2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80042e6:	4770      	bx	lr

080042e8 <__aeabi_drsub>:
 80042e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80042ec:	e002      	b.n	80042f4 <__adddf3>
 80042ee:	bf00      	nop

080042f0 <__aeabi_dsub>:
 80042f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080042f4 <__adddf3>:
 80042f4:	b530      	push	{r4, r5, lr}
 80042f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80042fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80042fe:	ea94 0f05 	teq	r4, r5
 8004302:	bf08      	it	eq
 8004304:	ea90 0f02 	teqeq	r0, r2
 8004308:	bf1f      	itttt	ne
 800430a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800430e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800431a:	f000 80e2 	beq.w	80044e2 <__adddf3+0x1ee>
 800431e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004326:	bfb8      	it	lt
 8004328:	426d      	neglt	r5, r5
 800432a:	dd0c      	ble.n	8004346 <__adddf3+0x52>
 800432c:	442c      	add	r4, r5
 800432e:	ea80 0202 	eor.w	r2, r0, r2
 8004332:	ea81 0303 	eor.w	r3, r1, r3
 8004336:	ea82 0000 	eor.w	r0, r2, r0
 800433a:	ea83 0101 	eor.w	r1, r3, r1
 800433e:	ea80 0202 	eor.w	r2, r0, r2
 8004342:	ea81 0303 	eor.w	r3, r1, r3
 8004346:	2d36      	cmp	r5, #54	@ 0x36
 8004348:	bf88      	it	hi
 800434a:	bd30      	pophi	{r4, r5, pc}
 800434c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004354:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8004358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800435c:	d002      	beq.n	8004364 <__adddf3+0x70>
 800435e:	4240      	negs	r0, r0
 8004360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004364:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8004368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800436c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004370:	d002      	beq.n	8004378 <__adddf3+0x84>
 8004372:	4252      	negs	r2, r2
 8004374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004378:	ea94 0f05 	teq	r4, r5
 800437c:	f000 80a7 	beq.w	80044ce <__adddf3+0x1da>
 8004380:	f1a4 0401 	sub.w	r4, r4, #1
 8004384:	f1d5 0e20 	rsbs	lr, r5, #32
 8004388:	db0d      	blt.n	80043a6 <__adddf3+0xb2>
 800438a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800438e:	fa22 f205 	lsr.w	r2, r2, r5
 8004392:	1880      	adds	r0, r0, r2
 8004394:	f141 0100 	adc.w	r1, r1, #0
 8004398:	fa03 f20e 	lsl.w	r2, r3, lr
 800439c:	1880      	adds	r0, r0, r2
 800439e:	fa43 f305 	asr.w	r3, r3, r5
 80043a2:	4159      	adcs	r1, r3
 80043a4:	e00e      	b.n	80043c4 <__adddf3+0xd0>
 80043a6:	f1a5 0520 	sub.w	r5, r5, #32
 80043aa:	f10e 0e20 	add.w	lr, lr, #32
 80043ae:	2a01      	cmp	r2, #1
 80043b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80043b4:	bf28      	it	cs
 80043b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80043ba:	fa43 f305 	asr.w	r3, r3, r5
 80043be:	18c0      	adds	r0, r0, r3
 80043c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80043c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80043c8:	d507      	bpl.n	80043da <__adddf3+0xe6>
 80043ca:	f04f 0e00 	mov.w	lr, #0
 80043ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80043d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80043d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80043da:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80043de:	d31b      	bcc.n	8004418 <__adddf3+0x124>
 80043e0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80043e4:	d30c      	bcc.n	8004400 <__adddf3+0x10c>
 80043e6:	0849      	lsrs	r1, r1, #1
 80043e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80043ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80043f0:	f104 0401 	add.w	r4, r4, #1
 80043f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80043f8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80043fc:	f080 809a 	bcs.w	8004534 <__adddf3+0x240>
 8004400:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8004404:	bf08      	it	eq
 8004406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800440a:	f150 0000 	adcs.w	r0, r0, #0
 800440e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004412:	ea41 0105 	orr.w	r1, r1, r5
 8004416:	bd30      	pop	{r4, r5, pc}
 8004418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800441c:	4140      	adcs	r0, r0
 800441e:	eb41 0101 	adc.w	r1, r1, r1
 8004422:	3c01      	subs	r4, #1
 8004424:	bf28      	it	cs
 8004426:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800442a:	d2e9      	bcs.n	8004400 <__adddf3+0x10c>
 800442c:	f091 0f00 	teq	r1, #0
 8004430:	bf04      	itt	eq
 8004432:	4601      	moveq	r1, r0
 8004434:	2000      	moveq	r0, #0
 8004436:	fab1 f381 	clz	r3, r1
 800443a:	bf08      	it	eq
 800443c:	3320      	addeq	r3, #32
 800443e:	f1a3 030b 	sub.w	r3, r3, #11
 8004442:	f1b3 0220 	subs.w	r2, r3, #32
 8004446:	da0c      	bge.n	8004462 <__adddf3+0x16e>
 8004448:	320c      	adds	r2, #12
 800444a:	dd08      	ble.n	800445e <__adddf3+0x16a>
 800444c:	f102 0c14 	add.w	ip, r2, #20
 8004450:	f1c2 020c 	rsb	r2, r2, #12
 8004454:	fa01 f00c 	lsl.w	r0, r1, ip
 8004458:	fa21 f102 	lsr.w	r1, r1, r2
 800445c:	e00c      	b.n	8004478 <__adddf3+0x184>
 800445e:	f102 0214 	add.w	r2, r2, #20
 8004462:	bfd8      	it	le
 8004464:	f1c2 0c20 	rsble	ip, r2, #32
 8004468:	fa01 f102 	lsl.w	r1, r1, r2
 800446c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004470:	bfdc      	itt	le
 8004472:	ea41 010c 	orrle.w	r1, r1, ip
 8004476:	4090      	lslle	r0, r2
 8004478:	1ae4      	subs	r4, r4, r3
 800447a:	bfa2      	ittt	ge
 800447c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004480:	4329      	orrge	r1, r5
 8004482:	bd30      	popge	{r4, r5, pc}
 8004484:	ea6f 0404 	mvn.w	r4, r4
 8004488:	3c1f      	subs	r4, #31
 800448a:	da1c      	bge.n	80044c6 <__adddf3+0x1d2>
 800448c:	340c      	adds	r4, #12
 800448e:	dc0e      	bgt.n	80044ae <__adddf3+0x1ba>
 8004490:	f104 0414 	add.w	r4, r4, #20
 8004494:	f1c4 0220 	rsb	r2, r4, #32
 8004498:	fa20 f004 	lsr.w	r0, r0, r4
 800449c:	fa01 f302 	lsl.w	r3, r1, r2
 80044a0:	ea40 0003 	orr.w	r0, r0, r3
 80044a4:	fa21 f304 	lsr.w	r3, r1, r4
 80044a8:	ea45 0103 	orr.w	r1, r5, r3
 80044ac:	bd30      	pop	{r4, r5, pc}
 80044ae:	f1c4 040c 	rsb	r4, r4, #12
 80044b2:	f1c4 0220 	rsb	r2, r4, #32
 80044b6:	fa20 f002 	lsr.w	r0, r0, r2
 80044ba:	fa01 f304 	lsl.w	r3, r1, r4
 80044be:	ea40 0003 	orr.w	r0, r0, r3
 80044c2:	4629      	mov	r1, r5
 80044c4:	bd30      	pop	{r4, r5, pc}
 80044c6:	fa21 f004 	lsr.w	r0, r1, r4
 80044ca:	4629      	mov	r1, r5
 80044cc:	bd30      	pop	{r4, r5, pc}
 80044ce:	f094 0f00 	teq	r4, #0
 80044d2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80044d6:	bf06      	itte	eq
 80044d8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80044dc:	3401      	addeq	r4, #1
 80044de:	3d01      	subne	r5, #1
 80044e0:	e74e      	b.n	8004380 <__adddf3+0x8c>
 80044e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044e6:	bf18      	it	ne
 80044e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80044ec:	d029      	beq.n	8004542 <__adddf3+0x24e>
 80044ee:	ea94 0f05 	teq	r4, r5
 80044f2:	bf08      	it	eq
 80044f4:	ea90 0f02 	teqeq	r0, r2
 80044f8:	d005      	beq.n	8004506 <__adddf3+0x212>
 80044fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80044fe:	bf04      	itt	eq
 8004500:	4619      	moveq	r1, r3
 8004502:	4610      	moveq	r0, r2
 8004504:	bd30      	pop	{r4, r5, pc}
 8004506:	ea91 0f03 	teq	r1, r3
 800450a:	bf1e      	ittt	ne
 800450c:	2100      	movne	r1, #0
 800450e:	2000      	movne	r0, #0
 8004510:	bd30      	popne	{r4, r5, pc}
 8004512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004516:	d105      	bne.n	8004524 <__adddf3+0x230>
 8004518:	0040      	lsls	r0, r0, #1
 800451a:	4149      	adcs	r1, r1
 800451c:	bf28      	it	cs
 800451e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8004522:	bd30      	pop	{r4, r5, pc}
 8004524:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8004528:	bf3c      	itt	cc
 800452a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800452e:	bd30      	popcc	{r4, r5, pc}
 8004530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004534:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8004538:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800453c:	f04f 0000 	mov.w	r0, #0
 8004540:	bd30      	pop	{r4, r5, pc}
 8004542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004546:	bf1a      	itte	ne
 8004548:	4619      	movne	r1, r3
 800454a:	4610      	movne	r0, r2
 800454c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004550:	bf1c      	itt	ne
 8004552:	460b      	movne	r3, r1
 8004554:	4602      	movne	r2, r0
 8004556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800455a:	bf06      	itte	eq
 800455c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004560:	ea91 0f03 	teqeq	r1, r3
 8004564:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8004568:	bd30      	pop	{r4, r5, pc}
 800456a:	bf00      	nop

0800456c <__aeabi_ui2d>:
 800456c:	f090 0f00 	teq	r0, #0
 8004570:	bf04      	itt	eq
 8004572:	2100      	moveq	r1, #0
 8004574:	4770      	bxeq	lr
 8004576:	b530      	push	{r4, r5, lr}
 8004578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800457c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004580:	f04f 0500 	mov.w	r5, #0
 8004584:	f04f 0100 	mov.w	r1, #0
 8004588:	e750      	b.n	800442c <__adddf3+0x138>
 800458a:	bf00      	nop

0800458c <__aeabi_i2d>:
 800458c:	f090 0f00 	teq	r0, #0
 8004590:	bf04      	itt	eq
 8004592:	2100      	moveq	r1, #0
 8004594:	4770      	bxeq	lr
 8004596:	b530      	push	{r4, r5, lr}
 8004598:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800459c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80045a0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80045a4:	bf48      	it	mi
 80045a6:	4240      	negmi	r0, r0
 80045a8:	f04f 0100 	mov.w	r1, #0
 80045ac:	e73e      	b.n	800442c <__adddf3+0x138>
 80045ae:	bf00      	nop

080045b0 <__aeabi_f2d>:
 80045b0:	0042      	lsls	r2, r0, #1
 80045b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80045b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80045ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80045be:	bf1f      	itttt	ne
 80045c0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80045c4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80045c8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80045cc:	4770      	bxne	lr
 80045ce:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80045d2:	bf08      	it	eq
 80045d4:	4770      	bxeq	lr
 80045d6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80045da:	bf04      	itt	eq
 80045dc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80045e0:	4770      	bxeq	lr
 80045e2:	b530      	push	{r4, r5, lr}
 80045e4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80045e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80045ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80045f0:	e71c      	b.n	800442c <__adddf3+0x138>
 80045f2:	bf00      	nop

080045f4 <__aeabi_ul2d>:
 80045f4:	ea50 0201 	orrs.w	r2, r0, r1
 80045f8:	bf08      	it	eq
 80045fa:	4770      	bxeq	lr
 80045fc:	b530      	push	{r4, r5, lr}
 80045fe:	f04f 0500 	mov.w	r5, #0
 8004602:	e00a      	b.n	800461a <__aeabi_l2d+0x16>

08004604 <__aeabi_l2d>:
 8004604:	ea50 0201 	orrs.w	r2, r0, r1
 8004608:	bf08      	it	eq
 800460a:	4770      	bxeq	lr
 800460c:	b530      	push	{r4, r5, lr}
 800460e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8004612:	d502      	bpl.n	800461a <__aeabi_l2d+0x16>
 8004614:	4240      	negs	r0, r0
 8004616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800461a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800461e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004626:	f43f aed8 	beq.w	80043da <__adddf3+0xe6>
 800462a:	f04f 0203 	mov.w	r2, #3
 800462e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004632:	bf18      	it	ne
 8004634:	3203      	addne	r2, #3
 8004636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800463a:	bf18      	it	ne
 800463c:	3203      	addne	r2, #3
 800463e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004642:	f1c2 0320 	rsb	r3, r2, #32
 8004646:	fa00 fc03 	lsl.w	ip, r0, r3
 800464a:	fa20 f002 	lsr.w	r0, r0, r2
 800464e:	fa01 fe03 	lsl.w	lr, r1, r3
 8004652:	ea40 000e 	orr.w	r0, r0, lr
 8004656:	fa21 f102 	lsr.w	r1, r1, r2
 800465a:	4414      	add	r4, r2
 800465c:	e6bd      	b.n	80043da <__adddf3+0xe6>
 800465e:	bf00      	nop

08004660 <__aeabi_dmul>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004666:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800466a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800466e:	bf1d      	ittte	ne
 8004670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004674:	ea94 0f0c 	teqne	r4, ip
 8004678:	ea95 0f0c 	teqne	r5, ip
 800467c:	f000 f8de 	bleq	800483c <__aeabi_dmul+0x1dc>
 8004680:	442c      	add	r4, r5
 8004682:	ea81 0603 	eor.w	r6, r1, r3
 8004686:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800468a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800468e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004692:	bf18      	it	ne
 8004694:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004698:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800469c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046a0:	d038      	beq.n	8004714 <__aeabi_dmul+0xb4>
 80046a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80046a6:	f04f 0500 	mov.w	r5, #0
 80046aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80046ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80046b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80046b6:	f04f 0600 	mov.w	r6, #0
 80046ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80046be:	f09c 0f00 	teq	ip, #0
 80046c2:	bf18      	it	ne
 80046c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80046c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80046cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80046d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80046d4:	d204      	bcs.n	80046e0 <__aeabi_dmul+0x80>
 80046d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80046da:	416d      	adcs	r5, r5
 80046dc:	eb46 0606 	adc.w	r6, r6, r6
 80046e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80046e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80046e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80046ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80046f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80046f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80046f8:	bf88      	it	hi
 80046fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80046fe:	d81e      	bhi.n	800473e <__aeabi_dmul+0xde>
 8004700:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8004704:	bf08      	it	eq
 8004706:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800470a:	f150 0000 	adcs.w	r0, r0, #0
 800470e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8004718:	ea46 0101 	orr.w	r1, r6, r1
 800471c:	ea40 0002 	orr.w	r0, r0, r2
 8004720:	ea81 0103 	eor.w	r1, r1, r3
 8004724:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004728:	bfc2      	ittt	gt
 800472a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800472e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004732:	bd70      	popgt	{r4, r5, r6, pc}
 8004734:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004738:	f04f 0e00 	mov.w	lr, #0
 800473c:	3c01      	subs	r4, #1
 800473e:	f300 80ab 	bgt.w	8004898 <__aeabi_dmul+0x238>
 8004742:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8004746:	bfde      	ittt	le
 8004748:	2000      	movle	r0, #0
 800474a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800474e:	bd70      	pople	{r4, r5, r6, pc}
 8004750:	f1c4 0400 	rsb	r4, r4, #0
 8004754:	3c20      	subs	r4, #32
 8004756:	da35      	bge.n	80047c4 <__aeabi_dmul+0x164>
 8004758:	340c      	adds	r4, #12
 800475a:	dc1b      	bgt.n	8004794 <__aeabi_dmul+0x134>
 800475c:	f104 0414 	add.w	r4, r4, #20
 8004760:	f1c4 0520 	rsb	r5, r4, #32
 8004764:	fa00 f305 	lsl.w	r3, r0, r5
 8004768:	fa20 f004 	lsr.w	r0, r0, r4
 800476c:	fa01 f205 	lsl.w	r2, r1, r5
 8004770:	ea40 0002 	orr.w	r0, r0, r2
 8004774:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8004778:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800477c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004780:	fa21 f604 	lsr.w	r6, r1, r4
 8004784:	eb42 0106 	adc.w	r1, r2, r6
 8004788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800478c:	bf08      	it	eq
 800478e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	f1c4 040c 	rsb	r4, r4, #12
 8004798:	f1c4 0520 	rsb	r5, r4, #32
 800479c:	fa00 f304 	lsl.w	r3, r0, r4
 80047a0:	fa20 f005 	lsr.w	r0, r0, r5
 80047a4:	fa01 f204 	lsl.w	r2, r1, r4
 80047a8:	ea40 0002 	orr.w	r0, r0, r2
 80047ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80047b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80047b4:	f141 0100 	adc.w	r1, r1, #0
 80047b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80047bc:	bf08      	it	eq
 80047be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80047c2:	bd70      	pop	{r4, r5, r6, pc}
 80047c4:	f1c4 0520 	rsb	r5, r4, #32
 80047c8:	fa00 f205 	lsl.w	r2, r0, r5
 80047cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80047d0:	fa20 f304 	lsr.w	r3, r0, r4
 80047d4:	fa01 f205 	lsl.w	r2, r1, r5
 80047d8:	ea43 0302 	orr.w	r3, r3, r2
 80047dc:	fa21 f004 	lsr.w	r0, r1, r4
 80047e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80047e4:	fa21 f204 	lsr.w	r2, r1, r4
 80047e8:	ea20 0002 	bic.w	r0, r0, r2
 80047ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80047f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80047f4:	bf08      	it	eq
 80047f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	f094 0f00 	teq	r4, #0
 8004800:	d10f      	bne.n	8004822 <__aeabi_dmul+0x1c2>
 8004802:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8004806:	0040      	lsls	r0, r0, #1
 8004808:	eb41 0101 	adc.w	r1, r1, r1
 800480c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004810:	bf08      	it	eq
 8004812:	3c01      	subeq	r4, #1
 8004814:	d0f7      	beq.n	8004806 <__aeabi_dmul+0x1a6>
 8004816:	ea41 0106 	orr.w	r1, r1, r6
 800481a:	f095 0f00 	teq	r5, #0
 800481e:	bf18      	it	ne
 8004820:	4770      	bxne	lr
 8004822:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8004826:	0052      	lsls	r2, r2, #1
 8004828:	eb43 0303 	adc.w	r3, r3, r3
 800482c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8004830:	bf08      	it	eq
 8004832:	3d01      	subeq	r5, #1
 8004834:	d0f7      	beq.n	8004826 <__aeabi_dmul+0x1c6>
 8004836:	ea43 0306 	orr.w	r3, r3, r6
 800483a:	4770      	bx	lr
 800483c:	ea94 0f0c 	teq	r4, ip
 8004840:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004844:	bf18      	it	ne
 8004846:	ea95 0f0c 	teqne	r5, ip
 800484a:	d00c      	beq.n	8004866 <__aeabi_dmul+0x206>
 800484c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004850:	bf18      	it	ne
 8004852:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004856:	d1d1      	bne.n	80047fc <__aeabi_dmul+0x19c>
 8004858:	ea81 0103 	eor.w	r1, r1, r3
 800485c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004860:	f04f 0000 	mov.w	r0, #0
 8004864:	bd70      	pop	{r4, r5, r6, pc}
 8004866:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800486a:	bf06      	itte	eq
 800486c:	4610      	moveq	r0, r2
 800486e:	4619      	moveq	r1, r3
 8004870:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004874:	d019      	beq.n	80048aa <__aeabi_dmul+0x24a>
 8004876:	ea94 0f0c 	teq	r4, ip
 800487a:	d102      	bne.n	8004882 <__aeabi_dmul+0x222>
 800487c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004880:	d113      	bne.n	80048aa <__aeabi_dmul+0x24a>
 8004882:	ea95 0f0c 	teq	r5, ip
 8004886:	d105      	bne.n	8004894 <__aeabi_dmul+0x234>
 8004888:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800488c:	bf1c      	itt	ne
 800488e:	4610      	movne	r0, r2
 8004890:	4619      	movne	r1, r3
 8004892:	d10a      	bne.n	80048aa <__aeabi_dmul+0x24a>
 8004894:	ea81 0103 	eor.w	r1, r1, r3
 8004898:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800489c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80048a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80048a4:	f04f 0000 	mov.w	r0, #0
 80048a8:	bd70      	pop	{r4, r5, r6, pc}
 80048aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80048ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80048b2:	bd70      	pop	{r4, r5, r6, pc}

080048b4 <__aeabi_ddiv>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80048ba:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80048be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80048c2:	bf1d      	ittte	ne
 80048c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80048c8:	ea94 0f0c 	teqne	r4, ip
 80048cc:	ea95 0f0c 	teqne	r5, ip
 80048d0:	f000 f8a7 	bleq	8004a22 <__aeabi_ddiv+0x16e>
 80048d4:	eba4 0405 	sub.w	r4, r4, r5
 80048d8:	ea81 0e03 	eor.w	lr, r1, r3
 80048dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80048e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80048e4:	f000 8088 	beq.w	80049f8 <__aeabi_ddiv+0x144>
 80048e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80048ec:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80048f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80048f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80048f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80048fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004900:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004904:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004908:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800490c:	429d      	cmp	r5, r3
 800490e:	bf08      	it	eq
 8004910:	4296      	cmpeq	r6, r2
 8004912:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8004916:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800491a:	d202      	bcs.n	8004922 <__aeabi_ddiv+0x6e>
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	ea4f 0232 	mov.w	r2, r2, rrx
 8004922:	1ab6      	subs	r6, r6, r2
 8004924:	eb65 0503 	sbc.w	r5, r5, r3
 8004928:	085b      	lsrs	r3, r3, #1
 800492a:	ea4f 0232 	mov.w	r2, r2, rrx
 800492e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004932:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8004936:	ebb6 0e02 	subs.w	lr, r6, r2
 800493a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800493e:	bf22      	ittt	cs
 8004940:	1ab6      	subcs	r6, r6, r2
 8004942:	4675      	movcs	r5, lr
 8004944:	ea40 000c 	orrcs.w	r0, r0, ip
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	ea4f 0232 	mov.w	r2, r2, rrx
 800494e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004956:	bf22      	ittt	cs
 8004958:	1ab6      	subcs	r6, r6, r2
 800495a:	4675      	movcs	r5, lr
 800495c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	ea4f 0232 	mov.w	r2, r2, rrx
 8004966:	ebb6 0e02 	subs.w	lr, r6, r2
 800496a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800496e:	bf22      	ittt	cs
 8004970:	1ab6      	subcs	r6, r6, r2
 8004972:	4675      	movcs	r5, lr
 8004974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	ea4f 0232 	mov.w	r2, r2, rrx
 800497e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004986:	bf22      	ittt	cs
 8004988:	1ab6      	subcs	r6, r6, r2
 800498a:	4675      	movcs	r5, lr
 800498c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004990:	ea55 0e06 	orrs.w	lr, r5, r6
 8004994:	d018      	beq.n	80049c8 <__aeabi_ddiv+0x114>
 8004996:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800499a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800499e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80049a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80049a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80049aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80049ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80049b2:	d1c0      	bne.n	8004936 <__aeabi_ddiv+0x82>
 80049b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80049b8:	d10b      	bne.n	80049d2 <__aeabi_ddiv+0x11e>
 80049ba:	ea41 0100 	orr.w	r1, r1, r0
 80049be:	f04f 0000 	mov.w	r0, #0
 80049c2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80049c6:	e7b6      	b.n	8004936 <__aeabi_ddiv+0x82>
 80049c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80049cc:	bf04      	itt	eq
 80049ce:	4301      	orreq	r1, r0
 80049d0:	2000      	moveq	r0, #0
 80049d2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80049d6:	bf88      	it	hi
 80049d8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80049dc:	f63f aeaf 	bhi.w	800473e <__aeabi_dmul+0xde>
 80049e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80049e4:	bf04      	itt	eq
 80049e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80049ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80049ee:	f150 0000 	adcs.w	r0, r0, #0
 80049f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80049fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004a00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004a04:	bfc2      	ittt	gt
 8004a06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004a0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004a0e:	bd70      	popgt	{r4, r5, r6, pc}
 8004a10:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004a14:	f04f 0e00 	mov.w	lr, #0
 8004a18:	3c01      	subs	r4, #1
 8004a1a:	e690      	b.n	800473e <__aeabi_dmul+0xde>
 8004a1c:	ea45 0e06 	orr.w	lr, r5, r6
 8004a20:	e68d      	b.n	800473e <__aeabi_dmul+0xde>
 8004a22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004a26:	ea94 0f0c 	teq	r4, ip
 8004a2a:	bf08      	it	eq
 8004a2c:	ea95 0f0c 	teqeq	r5, ip
 8004a30:	f43f af3b 	beq.w	80048aa <__aeabi_dmul+0x24a>
 8004a34:	ea94 0f0c 	teq	r4, ip
 8004a38:	d10a      	bne.n	8004a50 <__aeabi_ddiv+0x19c>
 8004a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004a3e:	f47f af34 	bne.w	80048aa <__aeabi_dmul+0x24a>
 8004a42:	ea95 0f0c 	teq	r5, ip
 8004a46:	f47f af25 	bne.w	8004894 <__aeabi_dmul+0x234>
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	e72c      	b.n	80048aa <__aeabi_dmul+0x24a>
 8004a50:	ea95 0f0c 	teq	r5, ip
 8004a54:	d106      	bne.n	8004a64 <__aeabi_ddiv+0x1b0>
 8004a56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004a5a:	f43f aefd 	beq.w	8004858 <__aeabi_dmul+0x1f8>
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	e722      	b.n	80048aa <__aeabi_dmul+0x24a>
 8004a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004a68:	bf18      	it	ne
 8004a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004a6e:	f47f aec5 	bne.w	80047fc <__aeabi_dmul+0x19c>
 8004a72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8004a76:	f47f af0d 	bne.w	8004894 <__aeabi_dmul+0x234>
 8004a7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004a7e:	f47f aeeb 	bne.w	8004858 <__aeabi_dmul+0x1f8>
 8004a82:	e712      	b.n	80048aa <__aeabi_dmul+0x24a>

08004a84 <__gedf2>:
 8004a84:	f04f 3cff 	mov.w	ip, #4294967295
 8004a88:	e006      	b.n	8004a98 <__cmpdf2+0x4>
 8004a8a:	bf00      	nop

08004a8c <__ledf2>:
 8004a8c:	f04f 0c01 	mov.w	ip, #1
 8004a90:	e002      	b.n	8004a98 <__cmpdf2+0x4>
 8004a92:	bf00      	nop

08004a94 <__cmpdf2>:
 8004a94:	f04f 0c01 	mov.w	ip, #1
 8004a98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004aa8:	bf18      	it	ne
 8004aaa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004aae:	d01b      	beq.n	8004ae8 <__cmpdf2+0x54>
 8004ab0:	b001      	add	sp, #4
 8004ab2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004ab6:	bf0c      	ite	eq
 8004ab8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004abc:	ea91 0f03 	teqne	r1, r3
 8004ac0:	bf02      	ittt	eq
 8004ac2:	ea90 0f02 	teqeq	r0, r2
 8004ac6:	2000      	moveq	r0, #0
 8004ac8:	4770      	bxeq	lr
 8004aca:	f110 0f00 	cmn.w	r0, #0
 8004ace:	ea91 0f03 	teq	r1, r3
 8004ad2:	bf58      	it	pl
 8004ad4:	4299      	cmppl	r1, r3
 8004ad6:	bf08      	it	eq
 8004ad8:	4290      	cmpeq	r0, r2
 8004ada:	bf2c      	ite	cs
 8004adc:	17d8      	asrcs	r0, r3, #31
 8004ade:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004ae2:	f040 0001 	orr.w	r0, r0, #1
 8004ae6:	4770      	bx	lr
 8004ae8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004af0:	d102      	bne.n	8004af8 <__cmpdf2+0x64>
 8004af2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004af6:	d107      	bne.n	8004b08 <__cmpdf2+0x74>
 8004af8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b00:	d1d6      	bne.n	8004ab0 <__cmpdf2+0x1c>
 8004b02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004b06:	d0d3      	beq.n	8004ab0 <__cmpdf2+0x1c>
 8004b08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop

08004b10 <__aeabi_cdrcmple>:
 8004b10:	4684      	mov	ip, r0
 8004b12:	4610      	mov	r0, r2
 8004b14:	4662      	mov	r2, ip
 8004b16:	468c      	mov	ip, r1
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4663      	mov	r3, ip
 8004b1c:	e000      	b.n	8004b20 <__aeabi_cdcmpeq>
 8004b1e:	bf00      	nop

08004b20 <__aeabi_cdcmpeq>:
 8004b20:	b501      	push	{r0, lr}
 8004b22:	f7ff ffb7 	bl	8004a94 <__cmpdf2>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	bf48      	it	mi
 8004b2a:	f110 0f00 	cmnmi.w	r0, #0
 8004b2e:	bd01      	pop	{r0, pc}

08004b30 <__aeabi_dcmpeq>:
 8004b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b34:	f7ff fff4 	bl	8004b20 <__aeabi_cdcmpeq>
 8004b38:	bf0c      	ite	eq
 8004b3a:	2001      	moveq	r0, #1
 8004b3c:	2000      	movne	r0, #0
 8004b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b42:	bf00      	nop

08004b44 <__aeabi_dcmplt>:
 8004b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b48:	f7ff ffea 	bl	8004b20 <__aeabi_cdcmpeq>
 8004b4c:	bf34      	ite	cc
 8004b4e:	2001      	movcc	r0, #1
 8004b50:	2000      	movcs	r0, #0
 8004b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b56:	bf00      	nop

08004b58 <__aeabi_dcmple>:
 8004b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b5c:	f7ff ffe0 	bl	8004b20 <__aeabi_cdcmpeq>
 8004b60:	bf94      	ite	ls
 8004b62:	2001      	movls	r0, #1
 8004b64:	2000      	movhi	r0, #0
 8004b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b6a:	bf00      	nop

08004b6c <__aeabi_dcmpge>:
 8004b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b70:	f7ff ffce 	bl	8004b10 <__aeabi_cdrcmple>
 8004b74:	bf94      	ite	ls
 8004b76:	2001      	movls	r0, #1
 8004b78:	2000      	movhi	r0, #0
 8004b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b7e:	bf00      	nop

08004b80 <__aeabi_dcmpgt>:
 8004b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b84:	f7ff ffc4 	bl	8004b10 <__aeabi_cdrcmple>
 8004b88:	bf34      	ite	cc
 8004b8a:	2001      	movcc	r0, #1
 8004b8c:	2000      	movcs	r0, #0
 8004b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b92:	bf00      	nop

08004b94 <__aeabi_dcmpun>:
 8004b94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b9c:	d102      	bne.n	8004ba4 <__aeabi_dcmpun+0x10>
 8004b9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004ba2:	d10a      	bne.n	8004bba <__aeabi_dcmpun+0x26>
 8004ba4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004ba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004bac:	d102      	bne.n	8004bb4 <__aeabi_dcmpun+0x20>
 8004bae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004bb2:	d102      	bne.n	8004bba <__aeabi_dcmpun+0x26>
 8004bb4:	f04f 0000 	mov.w	r0, #0
 8004bb8:	4770      	bx	lr
 8004bba:	f04f 0001 	mov.w	r0, #1
 8004bbe:	4770      	bx	lr

08004bc0 <__aeabi_d2iz>:
 8004bc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004bc4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8004bc8:	d215      	bcs.n	8004bf6 <__aeabi_d2iz+0x36>
 8004bca:	d511      	bpl.n	8004bf0 <__aeabi_d2iz+0x30>
 8004bcc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8004bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004bd4:	d912      	bls.n	8004bfc <__aeabi_d2iz+0x3c>
 8004bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004bda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004be2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004be6:	fa23 f002 	lsr.w	r0, r3, r2
 8004bea:	bf18      	it	ne
 8004bec:	4240      	negne	r0, r0
 8004bee:	4770      	bx	lr
 8004bf0:	f04f 0000 	mov.w	r0, #0
 8004bf4:	4770      	bx	lr
 8004bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004bfa:	d105      	bne.n	8004c08 <__aeabi_d2iz+0x48>
 8004bfc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8004c00:	bf08      	it	eq
 8004c02:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8004c06:	4770      	bx	lr
 8004c08:	f04f 0000 	mov.w	r0, #0
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop

08004c10 <__aeabi_d2f>:
 8004c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8004c18:	bf24      	itt	cs
 8004c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8004c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8004c22:	d90d      	bls.n	8004c40 <__aeabi_d2f+0x30>
 8004c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8004c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004c38:	bf08      	it	eq
 8004c3a:	f020 0001 	biceq.w	r0, r0, #1
 8004c3e:	4770      	bx	lr
 8004c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8004c44:	d121      	bne.n	8004c8a <__aeabi_d2f+0x7a>
 8004c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8004c4a:	bfbc      	itt	lt
 8004c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8004c50:	4770      	bxlt	lr
 8004c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004c5a:	f1c2 0218 	rsb	r2, r2, #24
 8004c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8004c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8004c66:	fa20 f002 	lsr.w	r0, r0, r2
 8004c6a:	bf18      	it	ne
 8004c6c:	f040 0001 	orrne.w	r0, r0, #1
 8004c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004c7c:	ea40 000c 	orr.w	r0, r0, ip
 8004c80:	fa23 f302 	lsr.w	r3, r3, r2
 8004c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004c88:	e7cc      	b.n	8004c24 <__aeabi_d2f+0x14>
 8004c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004c8e:	d107      	bne.n	8004ca0 <__aeabi_d2f+0x90>
 8004c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004c94:	bf1e      	ittt	ne
 8004c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8004c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8004c9e:	4770      	bxne	lr
 8004ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8004ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8004ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop

08004cb0 <__aeabi_frsub>:
 8004cb0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8004cb4:	e002      	b.n	8004cbc <__addsf3>
 8004cb6:	bf00      	nop

08004cb8 <__aeabi_fsub>:
 8004cb8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08004cbc <__addsf3>:
 8004cbc:	0042      	lsls	r2, r0, #1
 8004cbe:	bf1f      	itttt	ne
 8004cc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8004cc4:	ea92 0f03 	teqne	r2, r3
 8004cc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8004ccc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004cd0:	d06a      	beq.n	8004da8 <__addsf3+0xec>
 8004cd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8004cd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8004cda:	bfc1      	itttt	gt
 8004cdc:	18d2      	addgt	r2, r2, r3
 8004cde:	4041      	eorgt	r1, r0
 8004ce0:	4048      	eorgt	r0, r1
 8004ce2:	4041      	eorgt	r1, r0
 8004ce4:	bfb8      	it	lt
 8004ce6:	425b      	neglt	r3, r3
 8004ce8:	2b19      	cmp	r3, #25
 8004cea:	bf88      	it	hi
 8004cec:	4770      	bxhi	lr
 8004cee:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8004cf2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004cf6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8004cfa:	bf18      	it	ne
 8004cfc:	4240      	negne	r0, r0
 8004cfe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004d02:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8004d06:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8004d0a:	bf18      	it	ne
 8004d0c:	4249      	negne	r1, r1
 8004d0e:	ea92 0f03 	teq	r2, r3
 8004d12:	d03f      	beq.n	8004d94 <__addsf3+0xd8>
 8004d14:	f1a2 0201 	sub.w	r2, r2, #1
 8004d18:	fa41 fc03 	asr.w	ip, r1, r3
 8004d1c:	eb10 000c 	adds.w	r0, r0, ip
 8004d20:	f1c3 0320 	rsb	r3, r3, #32
 8004d24:	fa01 f103 	lsl.w	r1, r1, r3
 8004d28:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8004d2c:	d502      	bpl.n	8004d34 <__addsf3+0x78>
 8004d2e:	4249      	negs	r1, r1
 8004d30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8004d34:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8004d38:	d313      	bcc.n	8004d62 <__addsf3+0xa6>
 8004d3a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004d3e:	d306      	bcc.n	8004d4e <__addsf3+0x92>
 8004d40:	0840      	lsrs	r0, r0, #1
 8004d42:	ea4f 0131 	mov.w	r1, r1, rrx
 8004d46:	f102 0201 	add.w	r2, r2, #1
 8004d4a:	2afe      	cmp	r2, #254	@ 0xfe
 8004d4c:	d251      	bcs.n	8004df2 <__addsf3+0x136>
 8004d4e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8004d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004d56:	bf08      	it	eq
 8004d58:	f020 0001 	biceq.w	r0, r0, #1
 8004d5c:	ea40 0003 	orr.w	r0, r0, r3
 8004d60:	4770      	bx	lr
 8004d62:	0049      	lsls	r1, r1, #1
 8004d64:	eb40 0000 	adc.w	r0, r0, r0
 8004d68:	3a01      	subs	r2, #1
 8004d6a:	bf28      	it	cs
 8004d6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8004d70:	d2ed      	bcs.n	8004d4e <__addsf3+0x92>
 8004d72:	fab0 fc80 	clz	ip, r0
 8004d76:	f1ac 0c08 	sub.w	ip, ip, #8
 8004d7a:	ebb2 020c 	subs.w	r2, r2, ip
 8004d7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8004d82:	bfaa      	itet	ge
 8004d84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8004d88:	4252      	neglt	r2, r2
 8004d8a:	4318      	orrge	r0, r3
 8004d8c:	bfbc      	itt	lt
 8004d8e:	40d0      	lsrlt	r0, r2
 8004d90:	4318      	orrlt	r0, r3
 8004d92:	4770      	bx	lr
 8004d94:	f092 0f00 	teq	r2, #0
 8004d98:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8004d9c:	bf06      	itte	eq
 8004d9e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8004da2:	3201      	addeq	r2, #1
 8004da4:	3b01      	subne	r3, #1
 8004da6:	e7b5      	b.n	8004d14 <__addsf3+0x58>
 8004da8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8004dac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8004db0:	bf18      	it	ne
 8004db2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004db6:	d021      	beq.n	8004dfc <__addsf3+0x140>
 8004db8:	ea92 0f03 	teq	r2, r3
 8004dbc:	d004      	beq.n	8004dc8 <__addsf3+0x10c>
 8004dbe:	f092 0f00 	teq	r2, #0
 8004dc2:	bf08      	it	eq
 8004dc4:	4608      	moveq	r0, r1
 8004dc6:	4770      	bx	lr
 8004dc8:	ea90 0f01 	teq	r0, r1
 8004dcc:	bf1c      	itt	ne
 8004dce:	2000      	movne	r0, #0
 8004dd0:	4770      	bxne	lr
 8004dd2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8004dd6:	d104      	bne.n	8004de2 <__addsf3+0x126>
 8004dd8:	0040      	lsls	r0, r0, #1
 8004dda:	bf28      	it	cs
 8004ddc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8004de0:	4770      	bx	lr
 8004de2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8004de6:	bf3c      	itt	cc
 8004de8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8004dec:	4770      	bxcc	lr
 8004dee:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8004df2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8004df6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004dfa:	4770      	bx	lr
 8004dfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8004e00:	bf16      	itet	ne
 8004e02:	4608      	movne	r0, r1
 8004e04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8004e08:	4601      	movne	r1, r0
 8004e0a:	0242      	lsls	r2, r0, #9
 8004e0c:	bf06      	itte	eq
 8004e0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8004e12:	ea90 0f01 	teqeq	r0, r1
 8004e16:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8004e1a:	4770      	bx	lr

08004e1c <__aeabi_ui2f>:
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	e004      	b.n	8004e2c <__aeabi_i2f+0x8>
 8004e22:	bf00      	nop

08004e24 <__aeabi_i2f>:
 8004e24:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8004e28:	bf48      	it	mi
 8004e2a:	4240      	negmi	r0, r0
 8004e2c:	ea5f 0c00 	movs.w	ip, r0
 8004e30:	bf08      	it	eq
 8004e32:	4770      	bxeq	lr
 8004e34:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8004e38:	4601      	mov	r1, r0
 8004e3a:	f04f 0000 	mov.w	r0, #0
 8004e3e:	e01c      	b.n	8004e7a <__aeabi_l2f+0x2a>

08004e40 <__aeabi_ul2f>:
 8004e40:	ea50 0201 	orrs.w	r2, r0, r1
 8004e44:	bf08      	it	eq
 8004e46:	4770      	bxeq	lr
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	e00a      	b.n	8004e64 <__aeabi_l2f+0x14>
 8004e4e:	bf00      	nop

08004e50 <__aeabi_l2f>:
 8004e50:	ea50 0201 	orrs.w	r2, r0, r1
 8004e54:	bf08      	it	eq
 8004e56:	4770      	bxeq	lr
 8004e58:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8004e5c:	d502      	bpl.n	8004e64 <__aeabi_l2f+0x14>
 8004e5e:	4240      	negs	r0, r0
 8004e60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004e64:	ea5f 0c01 	movs.w	ip, r1
 8004e68:	bf02      	ittt	eq
 8004e6a:	4684      	moveq	ip, r0
 8004e6c:	4601      	moveq	r1, r0
 8004e6e:	2000      	moveq	r0, #0
 8004e70:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8004e74:	bf08      	it	eq
 8004e76:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8004e7e:	fabc f28c 	clz	r2, ip
 8004e82:	3a08      	subs	r2, #8
 8004e84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8004e88:	db10      	blt.n	8004eac <__aeabi_l2f+0x5c>
 8004e8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8004e8e:	4463      	add	r3, ip
 8004e90:	fa00 fc02 	lsl.w	ip, r0, r2
 8004e94:	f1c2 0220 	rsb	r2, r2, #32
 8004e98:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8004e9c:	fa20 f202 	lsr.w	r2, r0, r2
 8004ea0:	eb43 0002 	adc.w	r0, r3, r2
 8004ea4:	bf08      	it	eq
 8004ea6:	f020 0001 	biceq.w	r0, r0, #1
 8004eaa:	4770      	bx	lr
 8004eac:	f102 0220 	add.w	r2, r2, #32
 8004eb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8004eb4:	f1c2 0220 	rsb	r2, r2, #32
 8004eb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8004ebc:	fa21 f202 	lsr.w	r2, r1, r2
 8004ec0:	eb43 0002 	adc.w	r0, r3, r2
 8004ec4:	bf08      	it	eq
 8004ec6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8004eca:	4770      	bx	lr

08004ecc <__gesf2>:
 8004ecc:	f04f 3cff 	mov.w	ip, #4294967295
 8004ed0:	e006      	b.n	8004ee0 <__cmpsf2+0x4>
 8004ed2:	bf00      	nop

08004ed4 <__lesf2>:
 8004ed4:	f04f 0c01 	mov.w	ip, #1
 8004ed8:	e002      	b.n	8004ee0 <__cmpsf2+0x4>
 8004eda:	bf00      	nop

08004edc <__cmpsf2>:
 8004edc:	f04f 0c01 	mov.w	ip, #1
 8004ee0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8004ee8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8004eec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8004ef0:	bf18      	it	ne
 8004ef2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004ef6:	d011      	beq.n	8004f1c <__cmpsf2+0x40>
 8004ef8:	b001      	add	sp, #4
 8004efa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8004efe:	bf18      	it	ne
 8004f00:	ea90 0f01 	teqne	r0, r1
 8004f04:	bf58      	it	pl
 8004f06:	ebb2 0003 	subspl.w	r0, r2, r3
 8004f0a:	bf88      	it	hi
 8004f0c:	17c8      	asrhi	r0, r1, #31
 8004f0e:	bf38      	it	cc
 8004f10:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8004f14:	bf18      	it	ne
 8004f16:	f040 0001 	orrne.w	r0, r0, #1
 8004f1a:	4770      	bx	lr
 8004f1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8004f20:	d102      	bne.n	8004f28 <__cmpsf2+0x4c>
 8004f22:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8004f26:	d105      	bne.n	8004f34 <__cmpsf2+0x58>
 8004f28:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8004f2c:	d1e4      	bne.n	8004ef8 <__cmpsf2+0x1c>
 8004f2e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8004f32:	d0e1      	beq.n	8004ef8 <__cmpsf2+0x1c>
 8004f34:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop

08004f3c <__aeabi_cfrcmple>:
 8004f3c:	4684      	mov	ip, r0
 8004f3e:	4608      	mov	r0, r1
 8004f40:	4661      	mov	r1, ip
 8004f42:	e7ff      	b.n	8004f44 <__aeabi_cfcmpeq>

08004f44 <__aeabi_cfcmpeq>:
 8004f44:	b50f      	push	{r0, r1, r2, r3, lr}
 8004f46:	f7ff ffc9 	bl	8004edc <__cmpsf2>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	bf48      	it	mi
 8004f4e:	f110 0f00 	cmnmi.w	r0, #0
 8004f52:	bd0f      	pop	{r0, r1, r2, r3, pc}

08004f54 <__aeabi_fcmpeq>:
 8004f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004f58:	f7ff fff4 	bl	8004f44 <__aeabi_cfcmpeq>
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2001      	moveq	r0, #1
 8004f60:	2000      	movne	r0, #0
 8004f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8004f66:	bf00      	nop

08004f68 <__aeabi_fcmplt>:
 8004f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004f6c:	f7ff ffea 	bl	8004f44 <__aeabi_cfcmpeq>
 8004f70:	bf34      	ite	cc
 8004f72:	2001      	movcc	r0, #1
 8004f74:	2000      	movcs	r0, #0
 8004f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8004f7a:	bf00      	nop

08004f7c <__aeabi_fcmple>:
 8004f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004f80:	f7ff ffe0 	bl	8004f44 <__aeabi_cfcmpeq>
 8004f84:	bf94      	ite	ls
 8004f86:	2001      	movls	r0, #1
 8004f88:	2000      	movhi	r0, #0
 8004f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004f8e:	bf00      	nop

08004f90 <__aeabi_fcmpge>:
 8004f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004f94:	f7ff ffd2 	bl	8004f3c <__aeabi_cfrcmple>
 8004f98:	bf94      	ite	ls
 8004f9a:	2001      	movls	r0, #1
 8004f9c:	2000      	movhi	r0, #0
 8004f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004fa2:	bf00      	nop

08004fa4 <__aeabi_fcmpgt>:
 8004fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004fa8:	f7ff ffc8 	bl	8004f3c <__aeabi_cfrcmple>
 8004fac:	bf34      	ite	cc
 8004fae:	2001      	movcc	r0, #1
 8004fb0:	2000      	movcs	r0, #0
 8004fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8004fb6:	bf00      	nop

08004fb8 <__aeabi_f2iz>:
 8004fb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8004fbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8004fc0:	d30f      	bcc.n	8004fe2 <__aeabi_f2iz+0x2a>
 8004fc2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8004fc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8004fca:	d90d      	bls.n	8004fe8 <__aeabi_f2iz+0x30>
 8004fcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8004fd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fd4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8004fd8:	fa23 f002 	lsr.w	r0, r3, r2
 8004fdc:	bf18      	it	ne
 8004fde:	4240      	negne	r0, r0
 8004fe0:	4770      	bx	lr
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	4770      	bx	lr
 8004fe8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8004fec:	d101      	bne.n	8004ff2 <__aeabi_f2iz+0x3a>
 8004fee:	0242      	lsls	r2, r0, #9
 8004ff0:	d105      	bne.n	8004ffe <__aeabi_f2iz+0x46>
 8004ff2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8004ff6:	bf08      	it	eq
 8004ff8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8004ffc:	4770      	bx	lr
 8004ffe:	f04f 0000 	mov.w	r0, #0
 8005002:	4770      	bx	lr

08005004 <__aeabi_f2uiz>:
 8005004:	0042      	lsls	r2, r0, #1
 8005006:	d20e      	bcs.n	8005026 <__aeabi_f2uiz+0x22>
 8005008:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800500c:	d30b      	bcc.n	8005026 <__aeabi_f2uiz+0x22>
 800500e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8005012:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005016:	d409      	bmi.n	800502c <__aeabi_f2uiz+0x28>
 8005018:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800501c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005020:	fa23 f002 	lsr.w	r0, r3, r2
 8005024:	4770      	bx	lr
 8005026:	f04f 0000 	mov.w	r0, #0
 800502a:	4770      	bx	lr
 800502c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8005030:	d101      	bne.n	8005036 <__aeabi_f2uiz+0x32>
 8005032:	0242      	lsls	r2, r0, #9
 8005034:	d102      	bne.n	800503c <__aeabi_f2uiz+0x38>
 8005036:	f04f 30ff 	mov.w	r0, #4294967295
 800503a:	4770      	bx	lr
 800503c:	f04f 0000 	mov.w	r0, #0
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop

08005044 <exit_sleep_mode>:
 *
 * @return    none
 *
 */
static void exit_sleep_mode(can_regdef_t* p_can)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	p_can->MCR &= ~(1 << SLEEP_REQUEST_BIT_POS);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f023 0202 	bic.w	r2, r3, #2
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	601a      	str	r2, [r3, #0]
	while((p_can->MSR & (1 << SLEEP_ACK_BIT_POSITION)));
 8005058:	bf00      	nop
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f9      	bne.n	800505a <exit_sleep_mode+0x16>
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <exit_init_mode>:
 *
 * @return    none
 *
 */
static void exit_init_mode(can_regdef_t* p_can)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
	p_can->MCR &= ~(1 << INIT_REQUEST_BIT_POS);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
	while((p_can->MSR & (1 << INIT_ACK_BIT_POSITION)));
 8005086:	bf00      	nop
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f9      	bne.n	8005088 <exit_init_mode+0x16>
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <error_interrupt_en_di>:
 * @param[in]  EN OR DI
 *
 * @return    none
 */
static void error_interrupt_en_di(can_regdef_t* p_can,uint8_t en_di)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
	if (en_di == ERROR_INTERRUPT_EN)
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d106      	bne.n	80050c0 <error_interrupt_en_di+0x20>
	{
		p_can->IER |= (1 << ERROR_INTERRUPT_BIT_POS);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	615a      	str	r2, [r3, #20]
	}
	else if(en_di == ERROR_INTERRUPT_DI)
	{
		p_can->IER &= ~(1 << ERROR_INTERRUPT_BIT_POS);
	}
}
 80050be:	e008      	b.n	80050d2 <error_interrupt_en_di+0x32>
	else if(en_di == ERROR_INTERRUPT_DI)
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d105      	bne.n	80050d2 <error_interrupt_en_di+0x32>
		p_can->IER &= ~(1 << ERROR_INTERRUPT_BIT_POS);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	615a      	str	r2, [r3, #20]
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <no_art_en_di>:
 *
 * @return    none
 *
 */
static void no_art_en_di(can_regdef_t* p_can,uint8_t en_di)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	70fb      	strb	r3, [r7, #3]
	if (en_di == NO_AUTOMATIC_RE_TRANSMISSION_EN)
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d106      	bne.n	80050fc <no_art_en_di+0x20>
	{
		p_can->MCR |= (1 << NO_AUTOMATIC_RE_TRANSMISSION_BIT_POS);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f043 0210 	orr.w	r2, r3, #16
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
	}
	else if(en_di == NO_AUTOMATIC_RE_TRANSMISSION_DI)
	{
		p_can->MCR &= ~(1 << NO_AUTOMATIC_RE_TRANSMISSION_BIT_POS);
	}
}
 80050fa:	e008      	b.n	800510e <no_art_en_di+0x32>
	else if(en_di == NO_AUTOMATIC_RE_TRANSMISSION_DI)
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <no_art_en_di+0x32>
		p_can->MCR &= ~(1 << NO_AUTOMATIC_RE_TRANSMISSION_BIT_POS);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 0210 	bic.w	r2, r3, #16
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <check_for_data>:
 *
 * @return FIFO Number
 *
 */
static uint8_t check_for_data(can_regdef_t* p_can)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	if ( (p_can->RFxR[0] & 0x3) != 0x0)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <check_for_data+0x18>
	{
		return FIFO_0_MESSAGE_PENDING;
 800512c:	2300      	movs	r3, #0
 800512e:	e008      	b.n	8005142 <check_for_data+0x2a>
	}
	else if ( (p_can->RFxR[1] & 0x3) != 0x0)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <check_for_data+0x28>
	{
		return FIFO_1_MESSAGE_PENDING;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <check_for_data+0x2a>
	}
	else
	{
		return FIFO_NO_MESSAGE_PENDING;
 8005140:	23ff      	movs	r3, #255	@ 0xff
	}
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <read_rtr>:
 *
 * @return void
 *
 */
static void read_rtr(can_regdef_t* p_can,uint8_t fifo_index)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
	can_rx.rtr = ((p_can->can_rx_mailbox[fifo_index].RIxR >> 1) & 0x01);
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	331b      	adds	r3, #27
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	4413      	add	r3, r2
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	b2da      	uxtb	r2, r3
 800516e:	4b03      	ldr	r3, [pc, #12]	@ (800517c <read_rtr+0x30>)
 8005170:	705a      	strb	r2, [r3, #1]
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	200002a8 	.word	0x200002a8

08005180 <read_ide>:
 * @param[in] FIFO number (FIFO index)
 * @return void
 *
 */
static void read_ide(can_regdef_t* p_can,uint8_t fifo_index)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
	can_rx.ide = ((p_can->can_rx_mailbox[fifo_index].RIxR >> 1) & 0x02);
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	331b      	adds	r3, #27
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	4413      	add	r3, r2
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	4b03      	ldr	r3, [pc, #12]	@ (80051b0 <read_ide+0x30>)
 80051a4:	701a      	strb	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr
 80051b0:	200002a8 	.word	0x200002a8

080051b4 <read_id>:
 * @param[in] FIFO number (FIFO index)
 *
 * @return void
 */
static void read_id(can_regdef_t* p_can,uint8_t fifo_index)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
	if (can_rx.ide == STANDARD_FRAME)
 80051c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <read_id+0x4c>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <read_id+0x28>
	{
		can_rx.id = (( p_can->can_rx_mailbox[fifo_index].RIxR >> 21) & 0x7FF);
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	331b      	adds	r3, #27
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	4413      	add	r3, r2
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	0d5b      	lsrs	r3, r3, #21
 80051d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005200 <read_id+0x4c>)
 80051d8:	6093      	str	r3, [r2, #8]
	}
	else if (can_rx.ide == EXTENDED_FRAME)
	{
		can_rx.id = (( p_can->can_rx_mailbox[fifo_index].RIxR >> 3) & 0x1FFFFFFF);
	}
}
 80051da:	e00c      	b.n	80051f6 <read_id+0x42>
	else if (can_rx.ide == EXTENDED_FRAME)
 80051dc:	4b08      	ldr	r3, [pc, #32]	@ (8005200 <read_id+0x4c>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d108      	bne.n	80051f6 <read_id+0x42>
		can_rx.id = (( p_can->can_rx_mailbox[fifo_index].RIxR >> 3) & 0x1FFFFFFF);
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	331b      	adds	r3, #27
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	4413      	add	r3, r2
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	08db      	lsrs	r3, r3, #3
 80051f2:	4a03      	ldr	r2, [pc, #12]	@ (8005200 <read_id+0x4c>)
 80051f4:	6093      	str	r3, [r2, #8]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr
 8005200:	200002a8 	.word	0x200002a8

08005204 <read_length>:
 * @param[in] FIFO number (FIFO index)
 *
 * @return void
 */
static void read_length(can_regdef_t* p_can,uint8_t fifo_index)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
	can_rx.length = (p_can->can_rx_mailbox[fifo_index].RDTxR & 0xF);
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	331b      	adds	r3, #27
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	4413      	add	r3, r2
 800521a:	3304      	adds	r3, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	b2da      	uxtb	r2, r3
 8005226:	4b03      	ldr	r3, [pc, #12]	@ (8005234 <read_length+0x30>)
 8005228:	711a      	strb	r2, [r3, #4]
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr
 8005234:	200002a8 	.word	0x200002a8

08005238 <read_time_stamp>:
 * @param[in] FIFO number (FIFO index)
 *
 * @return void
 */
static void read_time_stamp(can_regdef_t* p_can,uint8_t fifo_index)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
	can_rx.time = (( p_can->can_rx_mailbox[fifo_index].RDTxR >> 16) & 0xFFFF);
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	331b      	adds	r3, #27
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	4413      	add	r3, r2
 800524e:	3304      	adds	r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	b29a      	uxth	r2, r3
 8005256:	4b03      	ldr	r3, [pc, #12]	@ (8005264 <read_time_stamp+0x2c>)
 8005258:	805a      	strh	r2, [r3, #2]
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr
 8005264:	200002a8 	.word	0x200002a8

08005268 <read_filter_match_index>:
 * @param[in] FIFO number (FIFO index)
 *
 * @return void
 */
static void read_filter_match_index(can_regdef_t* p_can,uint8_t fifo_index)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]
	can_rx.filter_match_index = (( p_can->can_rx_mailbox[fifo_index].RDTxR >> 8) & 0xFF);
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	331b      	adds	r3, #27
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	4413      	add	r3, r2
 800527e:	3304      	adds	r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	b2da      	uxtb	r2, r3
 8005286:	4b03      	ldr	r3, [pc, #12]	@ (8005294 <read_filter_match_index+0x2c>)
 8005288:	715a      	strb	r2, [r3, #5]
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	200002a8 	.word	0x200002a8

08005298 <read_data>:
 * @return void
 *
 */

static void read_data(can_regdef_t* p_can,uint8_t fifo_index)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
	can_rx.data_32[0] = p_can->can_rx_mailbox[fifo_index].RDLxR;
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a08      	ldr	r2, [pc, #32]	@ (80052d4 <read_data+0x3c>)
 80052b4:	60d3      	str	r3, [r2, #12]
	can_rx.data_32[1] = p_can->can_rx_mailbox[fifo_index].RDHxR;
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	4413      	add	r3, r2
 80052be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a03      	ldr	r2, [pc, #12]	@ (80052d4 <read_data+0x3c>)
 80052c6:	6113      	str	r3, [r2, #16]
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	200002a8 	.word	0x200002a8

080052d8 <release_fifo>:
 *
 * @return void
 *
 */
static void release_fifo(can_regdef_t* p_can,uint8_t fifo_index)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
	p_can->RFxR[fifo_index] |= (1 << RELEASE_FIFO_MAILBOX_BIT_POS);
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	3302      	adds	r3, #2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	f042 0220 	orr.w	r2, r2, #32
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	3302      	adds	r3, #2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	605a      	str	r2, [r3, #4]
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr
	...

0800530c <hal_can_init>:
 * @param[in]  global configuration structure.
 *
 * @return    none
 */
uint8_t hal_can_init(can_config_t* can_config)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	can_config->no_automatic_retransmission_en_di = NO_AUTOMATIC_RE_TRANSMISSION_DI;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
	can_config->error_interrupt_en_di = ERROR_INTERRUPT_DI;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	721a      	strb	r2, [r3, #8]
	can_config->test_mode = LOOPBACK_TEST_MODE_EN;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2203      	movs	r2, #3
 8005324:	725a      	strb	r2, [r3, #9]
	can_config->tx_mailbox_empty_interrupt_en_di = TX_MAILBOX_EMPTY_INTERRUPT_DI;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	705a      	strb	r2, [r3, #1]
	can_config->fifo_0_message_pending_interrupt_en_di = FIFO_0_MESSAGE_PENDING_INTERRUPT_EN;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2205      	movs	r2, #5
 8005330:	709a      	strb	r2, [r3, #2]
	can_config->filter_index = FILTER_3;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	741a      	strb	r2, [r3, #16]
	can_config->filter_config[can_config->filter_index].id.id_16_bit_2[0] = 0x27;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	7c1b      	ldrb	r3, [r3, #16]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	4613      	mov	r3, r2
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	4413      	add	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	440b      	add	r3, r1
 800534a:	3304      	adds	r3, #4
 800534c:	2227      	movs	r2, #39	@ 0x27
 800534e:	801a      	strh	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].id.id_16_bit_2[1] = 0x27;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	7c1b      	ldrb	r3, [r3, #16]
 8005354:	4619      	mov	r1, r3
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	440b      	add	r3, r1
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	331e      	adds	r3, #30
 8005364:	2227      	movs	r2, #39	@ 0x27
 8005366:	801a      	strh	r2, [r3, #0]

	can_config->filter_config[can_config->filter_index].scale = SCALE_16_BIT;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	7c1b      	ldrb	r3, [r3, #16]
 800536c:	4619      	mov	r1, r3
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	440b      	add	r3, r1
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	3314      	adds	r3, #20
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].mode = IDENTIFIER_MASK_MODE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	7c1b      	ldrb	r3, [r3, #16]
 8005384:	4619      	mov	r1, r3
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	440b      	add	r3, r1
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4413      	add	r3, r2
 8005392:	3315      	adds	r3, #21
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].filter_assign_to = FILTER_ASSIGN_TO_FIFO_0;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	7c1b      	ldrb	r3, [r3, #16]
 800539c:	4619      	mov	r1, r3
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	440b      	add	r3, r1
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	3316      	adds	r3, #22
 80053ac:	2200      	movs	r2, #0
 80053ae:	701a      	strb	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].ide = STANDARD_FRAME;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7c1b      	ldrb	r3, [r3, #16]
 80053b4:	4619      	mov	r1, r3
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	440b      	add	r3, r1
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	3317      	adds	r3, #23
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].rtr = DATA_FRAME;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	7c1b      	ldrb	r3, [r3, #16]
 80053cc:	4619      	mov	r1, r3
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	440b      	add	r3, r1
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	3318      	adds	r3, #24
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].mask.mask_32_bit_2[0] = 0xFE000000;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	7c1b      	ldrb	r3, [r3, #16]
 80053e4:	4619      	mov	r1, r3
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	440b      	add	r3, r1
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	3324      	adds	r3, #36	@ 0x24
 80053f4:	f04f 427e 	mov.w	r2, #4261412864	@ 0xfe000000
 80053f8:	601a      	str	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].mask.mask_32_bit_2[1] = 0xFE000000;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	7c1b      	ldrb	r3, [r3, #16]
 80053fe:	4619      	mov	r1, r3
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	460b      	mov	r3, r1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	440b      	add	r3, r1
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4413      	add	r3, r2
 800540c:	3328      	adds	r3, #40	@ 0x28
 800540e:	f04f 427e 	mov.w	r2, #4261412864	@ 0xfe000000
 8005412:	601a      	str	r2, [r3, #0]
	can_init(CAN1,&can_configuration);
 8005414:	4904      	ldr	r1, [pc, #16]	@ (8005428 <hal_can_init+0x11c>)
 8005416:	4805      	ldr	r0, [pc, #20]	@ (800542c <hal_can_init+0x120>)
 8005418:	f000 f80a 	bl	8005430 <can_init>

}
 800541c:	bf00      	nop
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	200002bc 	.word	0x200002bc
 800542c:	40006400 	.word	0x40006400

08005430 <can_init>:
 * @param[in]  global configuration structure.
 * @return    none
 *
 */
uint8_t can_init(can_regdef_t* p_can, can_config_t* can_config)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
	enter_init_mode(p_can);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa90 	bl	8005960 <enter_init_mode>

	CAN1->MCR &= ~(1 << 16);
 8005440:	4b20      	ldr	r3, [pc, #128]	@ (80054c4 <can_init+0x94>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1f      	ldr	r2, [pc, #124]	@ (80054c4 <can_init+0x94>)
 8005446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544a:	6013      	str	r3, [r2, #0]

	set_bit_timing(p_can,250000);
 800544c:	491e      	ldr	r1, [pc, #120]	@ (80054c8 <can_init+0x98>)
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 faa2 	bl	8005998 <set_bit_timing>

	set_test_mode(p_can,can_config->test_mode);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	7a5b      	ldrb	r3, [r3, #9]
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa4d 	bl	80058fa <set_test_mode>

	error_interrupt_en_di(p_can,can_config->error_interrupt_en_di);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	7a1b      	ldrb	r3, [r3, #8]
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fe1a 	bl	80050a0 <error_interrupt_en_di>

	no_art_en_di(p_can,can_config->no_automatic_retransmission_en_di);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fe32 	bl	80050dc <no_art_en_di>

	interrupt_en_di(p_can,can_config->tx_mailbox_empty_interrupt_en_di);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f832 	bl	80054e8 <interrupt_en_di>

	interrupt_en_di(p_can,can_config->fifo_0_message_pending_interrupt_en_di);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	789b      	ldrb	r3, [r3, #2]
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f82c 	bl	80054e8 <interrupt_en_di>

	filter_config(p_can,can_config->filter_index,&(can_config->filter_config[can_config->filter_index]));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	7c19      	ldrb	r1, [r3, #16]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	7c1b      	ldrb	r3, [r3, #16]
 8005498:	461a      	mov	r2, r3
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	3310      	adds	r3, #16
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	4413      	add	r3, r2
 80054a8:	3304      	adds	r3, #4
 80054aa:	461a      	mov	r2, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f869 	bl	8005584 <filter_config>

	enter_normal_mode(p_can);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f80a 	bl	80054cc <enter_normal_mode>

}
 80054b8:	bf00      	nop
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40006400 	.word	0x40006400
 80054c8:	0003d090 	.word	0x0003d090

080054cc <enter_normal_mode>:
 *
 * @return    none
 *
 */
void enter_normal_mode(can_regdef_t* p_can)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	exit_init_mode(p_can);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fdcc 	bl	8005072 <exit_init_mode>
	exit_sleep_mode(p_can);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff fdb2 	bl	8005044 <exit_sleep_mode>
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <interrupt_en_di>:
 *
 * @return    none
 *
 */
void interrupt_en_di(can_regdef_t* p_can,uint8_t en_di)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
	if (en_di == TX_MAILBOX_EMPTY_INTERRUPT_EN)
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d109      	bne.n	800550e <interrupt_en_di+0x26>
	{
		p_can->IER |= (1 << TX_MAILBOX_EMPTY_INTERRUPT_BIT_POS);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f043 0201 	orr.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	615a      	str	r2, [r3, #20]
		nvic_en_irq(CAN1_TX_IRQn);
 8005506:	2013      	movs	r0, #19
 8005508:	f000 fe52 	bl	80061b0 <nvic_en_irq>
	}
	else if(en_di == FIFO_1_MESSAGE_PENDING_INTERRUPT_DI)
	{
		p_can->IER &= ~(1 << FIFO_1_MESSAGE_PENDING_INTERRUPT_BIT_POS);
	}
}
 800550c:	e036      	b.n	800557c <interrupt_en_di+0x94>
	else if(en_di == TX_MAILBOX_EMPTY_INTERRUPT_DI)
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	2b02      	cmp	r3, #2
 8005512:	d106      	bne.n	8005522 <interrupt_en_di+0x3a>
		p_can->IER &= ~(1 << TX_MAILBOX_EMPTY_INTERRUPT_BIT_POS);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f023 0201 	bic.w	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	615a      	str	r2, [r3, #20]
}
 8005520:	e02c      	b.n	800557c <interrupt_en_di+0x94>
	else if (en_di == FIFO_0_MESSAGE_PENDING_INTERRUPT_EN)
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	2b05      	cmp	r3, #5
 8005526:	d109      	bne.n	800553c <interrupt_en_di+0x54>
		p_can->IER |= (1 << FIFO_0_MESSAGE_PENDING_INTERRUPT_BIT_POS);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f043 0202 	orr.w	r2, r3, #2
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	615a      	str	r2, [r3, #20]
		nvic_en_irq(CAN1_RX_0_IRQn);
 8005534:	2014      	movs	r0, #20
 8005536:	f000 fe3b 	bl	80061b0 <nvic_en_irq>
}
 800553a:	e01f      	b.n	800557c <interrupt_en_di+0x94>
	else if(en_di == FIFO_0_MESSAGE_PENDING_INTERRUPT_DI)
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	2b04      	cmp	r3, #4
 8005540:	d106      	bne.n	8005550 <interrupt_en_di+0x68>
		p_can->IER &= ~(1 << FIFO_0_MESSAGE_PENDING_INTERRUPT_BIT_POS);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f023 0202 	bic.w	r2, r3, #2
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	615a      	str	r2, [r3, #20]
}
 800554e:	e015      	b.n	800557c <interrupt_en_di+0x94>
	else if (en_di == FIFO_1_MESSAGE_PENDING_INTERRUPT_EN)
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	2b07      	cmp	r3, #7
 8005554:	d109      	bne.n	800556a <interrupt_en_di+0x82>
		p_can->IER |= (1 << FIFO_1_MESSAGE_PENDING_INTERRUPT_BIT_POS);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f043 0210 	orr.w	r2, r3, #16
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	615a      	str	r2, [r3, #20]
		nvic_en_irq(CAN1_RX_1_IRQn);
 8005562:	2015      	movs	r0, #21
 8005564:	f000 fe24 	bl	80061b0 <nvic_en_irq>
}
 8005568:	e008      	b.n	800557c <interrupt_en_di+0x94>
	else if(en_di == FIFO_1_MESSAGE_PENDING_INTERRUPT_DI)
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	2b06      	cmp	r3, #6
 800556e:	d105      	bne.n	800557c <interrupt_en_di+0x94>
		p_can->IER &= ~(1 << FIFO_1_MESSAGE_PENDING_INTERRUPT_BIT_POS);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	f023 0210 	bic.w	r2, r3, #16
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	615a      	str	r2, [r3, #20]
}
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <filter_config>:
 * @param[in]  filter configuration structure pointer.
 *
 * @return    none
 */
void filter_config(can_regdef_t* p_can,filter_index_e filter_number,filter_config_t* filter_configuration)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	460b      	mov	r3, r1
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	72fb      	strb	r3, [r7, #11]

	p_can->FMR |= (1 << FILTER_INIT_MODE_BIT_POS);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005598:	f043 0201 	orr.w	r2, r3, #1
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	//mode
	if (filter_configuration->mode == IDENTIFIER_LIST_MODE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d10b      	bne.n	80055c2 <filter_config+0x3e>
	{
		p_can->FM1R |= (1 << filter_number);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80055b0:	7afa      	ldrb	r2, [r7, #11]
 80055b2:	2101      	movs	r1, #1
 80055b4:	fa01 f202 	lsl.w	r2, r1, r2
 80055b8:	431a      	orrs	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80055c0:	e00f      	b.n	80055e2 <filter_config+0x5e>
	}
	else if (filter_configuration->mode == IDENTIFIER_MASK_MODE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <filter_config+0x5e>
	{
		p_can->FM1R &= ~(1 << filter_number);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80055d0:	7afa      	ldrb	r2, [r7, #11]
 80055d2:	2101      	movs	r1, #1
 80055d4:	fa01 f202 	lsl.w	r2, r1, r2
 80055d8:	43d2      	mvns	r2, r2
 80055da:	401a      	ands	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	}

	//scale
	if (filter_configuration->scale == SCALE_32_BIT)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d10b      	bne.n	8005602 <filter_config+0x7e>
	{
		p_can->FS1R |= (1 << filter_number);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80055f0:	7afa      	ldrb	r2, [r7, #11]
 80055f2:	2101      	movs	r1, #1
 80055f4:	fa01 f202 	lsl.w	r2, r1, r2
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8005600:	e00e      	b.n	8005620 <filter_config+0x9c>
	}
	else if (filter_configuration->scale == SCALE_32_BIT)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d10a      	bne.n	8005620 <filter_config+0x9c>
	{
		p_can->FS1R |= (1 << filter_number);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005610:	7afa      	ldrb	r2, [r7, #11]
 8005612:	2101      	movs	r1, #1
 8005614:	fa01 f202 	lsl.w	r2, r1, r2
 8005618:	431a      	orrs	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	}

	//filter assignement to FIFO
	if (filter_configuration->filter_assign_to == FILTER_ASSIGN_TO_FIFO_1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	789b      	ldrb	r3, [r3, #2]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d10b      	bne.n	8005640 <filter_config+0xbc>
	{
		p_can->FFA1R |= (1 << filter_number);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800562e:	7afa      	ldrb	r2, [r7, #11]
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f202 	lsl.w	r2, r1, r2
 8005636:	431a      	orrs	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800563e:	e00f      	b.n	8005660 <filter_config+0xdc>
	}
	else if (filter_configuration->filter_assign_to == FILTER_ASSIGN_TO_FIFO_0)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	789b      	ldrb	r3, [r3, #2]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <filter_config+0xdc>
	{
		p_can->FFA1R &= ~(1 << filter_number);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800564e:	7afa      	ldrb	r2, [r7, #11]
 8005650:	2101      	movs	r1, #1
 8005652:	fa01 f202 	lsl.w	r2, r1, r2
 8005656:	43d2      	mvns	r2, r2
 8005658:	401a      	ands	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	}


	if (filter_configuration->scale == SCALE_32_BIT && filter_configuration->mode == IDENTIFIER_LIST_MODE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d158      	bne.n	800571a <filter_config+0x196>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d154      	bne.n	800571a <filter_config+0x196>
	{
		// condition for standard and extented frame
		if(filter_configuration->ide == STANDARD_FRAME)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	78db      	ldrb	r3, [r3, #3]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d125      	bne.n	80056c4 <filter_config+0x140>
		{
			p_can->FxRi[filter_number*2].u32 = filter_configuration->id.id_32_bit_2[0] << 21 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	055a      	lsls	r2, r3, #21
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	78db      	ldrb	r3, [r3, #3]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	ea42 0103 	orr.w	r1, r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	791b      	ldrb	r3, [r3, #4]
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	7afa      	ldrb	r2, [r7, #11]
 8005690:	0052      	lsls	r2, r2, #1
 8005692:	4319      	orrs	r1, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3290      	adds	r2, #144	@ 0x90
 8005698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			p_can->FxRi[filter_number*2 + 1].u32 = filter_configuration->id.id_32_bit_2[1] << 21 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	055a      	lsls	r2, r3, #21
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	78db      	ldrb	r3, [r3, #3]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	ea42 0103 	orr.w	r1, r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	791b      	ldrb	r3, [r3, #4]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	7afa      	ldrb	r2, [r7, #11]
 80056b4:	0052      	lsls	r2, r2, #1
 80056b6:	3201      	adds	r2, #1
 80056b8:	4319      	orrs	r1, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3290      	adds	r2, #144	@ 0x90
 80056be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(filter_configuration->ide == STANDARD_FRAME)
 80056c2:	e0ff      	b.n	80058c4 <filter_config+0x340>
		}
		else if (filter_configuration->ide == EXTENDED_FRAME)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	78db      	ldrb	r3, [r3, #3]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	f040 80fb 	bne.w	80058c4 <filter_config+0x340>
		{
			p_can->FxRi[filter_number*2].u32 = filter_configuration->id.id_32_bit_2[0] << 3 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	00da      	lsls	r2, r3, #3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	78db      	ldrb	r3, [r3, #3]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	ea42 0103 	orr.w	r1, r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	791b      	ldrb	r3, [r3, #4]
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	7afa      	ldrb	r2, [r7, #11]
 80056e6:	0052      	lsls	r2, r2, #1
 80056e8:	4319      	orrs	r1, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3290      	adds	r2, #144	@ 0x90
 80056ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			p_can->FxRi[filter_number*2 + 1].u32 = filter_configuration->id.id_32_bit_2[1] << 3 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	00da      	lsls	r2, r3, #3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	78db      	ldrb	r3, [r3, #3]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	ea42 0103 	orr.w	r1, r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	791b      	ldrb	r3, [r3, #4]
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	7afa      	ldrb	r2, [r7, #11]
 800570a:	0052      	lsls	r2, r2, #1
 800570c:	3201      	adds	r2, #1
 800570e:	4319      	orrs	r1, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3290      	adds	r2, #144	@ 0x90
 8005714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(filter_configuration->ide == STANDARD_FRAME)
 8005718:	e0d4      	b.n	80058c4 <filter_config+0x340>
		}
	}
	else if (filter_configuration->scale == SCALE_32_BIT && filter_configuration->mode == IDENTIFIER_MASK_MODE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d156      	bne.n	80057d0 <filter_config+0x24c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d152      	bne.n	80057d0 <filter_config+0x24c>
	{
		// condition for standard and extended frame.
		if(filter_configuration->ide == STANDARD_FRAME)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	78db      	ldrb	r3, [r3, #3]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d124      	bne.n	800577c <filter_config+0x1f8>
		{
			p_can->FxRi[filter_number*2].u32 = filter_configuration->id.id_32_bit_2[0] << 21 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	055a      	lsls	r2, r3, #21
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	ea42 0103 	orr.w	r1, r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	791b      	ldrb	r3, [r3, #4]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	7afa      	ldrb	r2, [r7, #11]
 800574a:	0052      	lsls	r2, r2, #1
 800574c:	4319      	orrs	r1, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3290      	adds	r2, #144	@ 0x90
 8005752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			p_can->FxRi[filter_number*2 + 1].u32 = filter_configuration->mask.mask_32_bit_1[0]  | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	78db      	ldrb	r3, [r3, #3]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	ea42 0103 	orr.w	r1, r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	791b      	ldrb	r3, [r3, #4]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	7afa      	ldrb	r2, [r7, #11]
 800576c:	0052      	lsls	r2, r2, #1
 800576e:	3201      	adds	r2, #1
 8005770:	4319      	orrs	r1, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3290      	adds	r2, #144	@ 0x90
 8005776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(filter_configuration->ide == STANDARD_FRAME)
 800577a:	e0a5      	b.n	80058c8 <filter_config+0x344>
		}
		else if (filter_configuration->ide == EXTENDED_FRAME)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	78db      	ldrb	r3, [r3, #3]
 8005780:	2b01      	cmp	r3, #1
 8005782:	f040 80a1 	bne.w	80058c8 <filter_config+0x344>
		{
			p_can->FxRi[filter_number*2].u32 = filter_configuration->id.id_32_bit_2[0] << 3 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	00da      	lsls	r2, r3, #3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	78db      	ldrb	r3, [r3, #3]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	ea42 0103 	orr.w	r1, r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	791b      	ldrb	r3, [r3, #4]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	7afa      	ldrb	r2, [r7, #11]
 800579e:	0052      	lsls	r2, r2, #1
 80057a0:	4319      	orrs	r1, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3290      	adds	r2, #144	@ 0x90
 80057a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			p_can->FxRi[filter_number*2 + 1].u32 = filter_configuration->mask.mask_32_bit_1[0] | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	78db      	ldrb	r3, [r3, #3]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	ea42 0103 	orr.w	r1, r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	791b      	ldrb	r3, [r3, #4]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	7afa      	ldrb	r2, [r7, #11]
 80057c0:	0052      	lsls	r2, r2, #1
 80057c2:	3201      	adds	r2, #1
 80057c4:	4319      	orrs	r1, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3290      	adds	r2, #144	@ 0x90
 80057ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(filter_configuration->ide == STANDARD_FRAME)
 80057ce:	e07b      	b.n	80058c8 <filter_config+0x344>
		}
	}
	else if (filter_configuration->scale == SCALE_16_BIT && filter_configuration->mode == IDENTIFIER_LIST_MODE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d141      	bne.n	800585c <filter_config+0x2d8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d13d      	bne.n	800585c <filter_config+0x2d8>
	{
		// restricted to standard only.
		p_can->FxRi[filter_number*2].u32 = (filter_configuration->id.id_16_bit_4[1] << 21 | (filter_configuration->ide << 20) | (filter_configuration->rtr << 19))\
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	895b      	ldrh	r3, [r3, #10]
 80057e4:	055a      	lsls	r2, r3, #21
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	78db      	ldrb	r3, [r3, #3]
 80057ea:	051b      	lsls	r3, r3, #20
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	791b      	ldrb	r3, [r3, #4]
 80057f2:	04db      	lsls	r3, r3, #19
 80057f4:	431a      	orrs	r2, r3
											| (filter_configuration->id.id_16_bit_4[0] << 5 | (filter_configuration->ide << 4) | (filter_configuration->rtr << 3));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	891b      	ldrh	r3, [r3, #8]
 80057fa:	0159      	lsls	r1, r3, #5
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	78db      	ldrb	r3, [r3, #3]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	4319      	orrs	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	791b      	ldrb	r3, [r3, #4]
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	430b      	orrs	r3, r1
 800580c:	ea42 0103 	orr.w	r1, r2, r3
		p_can->FxRi[filter_number*2].u32 = (filter_configuration->id.id_16_bit_4[1] << 21 | (filter_configuration->ide << 20) | (filter_configuration->rtr << 19))\
 8005810:	7afb      	ldrb	r3, [r7, #11]
 8005812:	005a      	lsls	r2, r3, #1
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3290      	adds	r2, #144	@ 0x90
 8005818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		p_can->FxRi[filter_number*2 + 1].u32 = (filter_configuration->id.id_16_bit_4[3] << 21 | (filter_configuration->ide << 20) | (filter_configuration->rtr << 19))\
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	89db      	ldrh	r3, [r3, #14]
 8005820:	055a      	lsls	r2, r3, #21
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	78db      	ldrb	r3, [r3, #3]
 8005826:	051b      	lsls	r3, r3, #20
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	791b      	ldrb	r3, [r3, #4]
 800582e:	04db      	lsls	r3, r3, #19
 8005830:	431a      	orrs	r2, r3
												| (filter_configuration->id.id_16_bit_4[2] << 5 | (filter_configuration->ide << 4) | (filter_configuration->rtr << 3));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	899b      	ldrh	r3, [r3, #12]
 8005836:	0159      	lsls	r1, r3, #5
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	78db      	ldrb	r3, [r3, #3]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	4319      	orrs	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	791b      	ldrb	r3, [r3, #4]
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	430b      	orrs	r3, r1
 8005848:	ea42 0103 	orr.w	r1, r2, r3
		p_can->FxRi[filter_number*2 + 1].u32 = (filter_configuration->id.id_16_bit_4[3] << 21 | (filter_configuration->ide << 20) | (filter_configuration->rtr << 19))\
 800584c:	7afb      	ldrb	r3, [r7, #11]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3290      	adds	r2, #144	@ 0x90
 8005856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800585a:	e036      	b.n	80058ca <filter_config+0x346>
	}
	else if (filter_configuration->scale == SCALE_16_BIT && filter_configuration->mode == IDENTIFIER_MASK_MODE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d132      	bne.n	80058ca <filter_config+0x346>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d12e      	bne.n	80058ca <filter_config+0x346>
	{
		p_can->FxRi[filter_number*2].u32 = filter_configuration->mask.mask_32_bit_2[0] | (filter_configuration->id.id_16_bit_2[0] << 5) | (filter_configuration->ide << 4) | (filter_configuration->rtr << 3);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	891b      	ldrh	r3, [r3, #8]
 8005874:	015b      	lsls	r3, r3, #5
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	78db      	ldrb	r3, [r3, #3]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	ea42 0103 	orr.w	r1, r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	791b      	ldrb	r3, [r3, #4]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	7afa      	ldrb	r2, [r7, #11]
 800588a:	0052      	lsls	r2, r2, #1
 800588c:	4319      	orrs	r1, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3290      	adds	r2, #144	@ 0x90
 8005892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_can->FxRi[filter_number*2 + 1].u32 = filter_configuration->mask.mask_32_bit_2[1] | (filter_configuration->id.id_16_bit_2[1] << 5) | (filter_configuration->ide << 4) | (filter_configuration->rtr << 3);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	895b      	ldrh	r3, [r3, #10]
 800589e:	015b      	lsls	r3, r3, #5
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	78db      	ldrb	r3, [r3, #3]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	ea42 0103 	orr.w	r1, r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	791b      	ldrb	r3, [r3, #4]
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	7afa      	ldrb	r2, [r7, #11]
 80058b4:	0052      	lsls	r2, r2, #1
 80058b6:	3201      	adds	r2, #1
 80058b8:	4319      	orrs	r1, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3290      	adds	r2, #144	@ 0x90
 80058be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80058c2:	e002      	b.n	80058ca <filter_config+0x346>
		if(filter_configuration->ide == STANDARD_FRAME)
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <filter_config+0x346>
		if(filter_configuration->ide == STANDARD_FRAME)
 80058c8:	bf00      	nop

	}

	//activate the filter.
	p_can->FA1R |= (1 << filter_number);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80058d0:	7afa      	ldrb	r2, [r7, #11]
 80058d2:	2101      	movs	r1, #1
 80058d4:	fa01 f202 	lsl.w	r2, r1, r2
 80058d8:	431a      	orrs	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	//exit from initialization mode.
	p_can->FMR &= ~(1 << FILTER_INIT_MODE_BIT_POS);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <set_test_mode>:
 *
 * @return    none
 *
 */
void set_test_mode(can_regdef_t* p_can,uint8_t test_mode)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	460b      	mov	r3, r1
 8005904:	70fb      	strb	r3, [r7, #3]
	if (test_mode == LOOPBACK_TEST_MODE_EN)
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d106      	bne.n	800591a <set_test_mode+0x20>
	{
		p_can->BTR |= (1 << LOOPBACK_TEST_MODE_BIT_POSITION);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	61da      	str	r2, [r3, #28]
	}
	else if (test_mode == SILENT_TEST_MODE_DI)
	{
		p_can->BTR &= ~(1 << SILENT_TEST_MODE_BIT_POSITION);
	}
}
 8005918:	e01c      	b.n	8005954 <set_test_mode+0x5a>
	else if (test_mode == LOOPBACK_TEST_MODE_DI)
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d106      	bne.n	800592e <set_test_mode+0x34>
		p_can->BTR &= ~(1 << LOOPBACK_TEST_MODE_BIT_POSITION);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	61da      	str	r2, [r3, #28]
}
 800592c:	e012      	b.n	8005954 <set_test_mode+0x5a>
	else if (test_mode == SILENT_TEST_MODE_EN)
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d106      	bne.n	8005942 <set_test_mode+0x48>
		p_can->BTR |= (1 << SILENT_TEST_MODE_BIT_POSITION);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	61da      	str	r2, [r3, #28]
}
 8005940:	e008      	b.n	8005954 <set_test_mode+0x5a>
	else if (test_mode == SILENT_TEST_MODE_DI)
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d105      	bne.n	8005954 <set_test_mode+0x5a>
		p_can->BTR &= ~(1 << SILENT_TEST_MODE_BIT_POSITION);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	61da      	str	r2, [r3, #28]
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr
	...

08005960 <enter_init_mode>:
 *
 * @return    none
 *
 */
void enter_init_mode(can_regdef_t* p_can)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	exit_sleep_mode(p_can);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff fb6b 	bl	8005044 <exit_sleep_mode>
	CAN1->MCR |= (1 << INIT_REQUEST_BIT_POS);
 800596e:	4b09      	ldr	r3, [pc, #36]	@ (8005994 <enter_init_mode+0x34>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a08      	ldr	r2, [pc, #32]	@ (8005994 <enter_init_mode+0x34>)
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	6013      	str	r3, [r2, #0]
	while(!(p_can->MSR & (1 << INIT_ACK_BIT_POSITION)));
 800597a:	bf00      	nop
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f9      	beq.n	800597c <enter_init_mode+0x1c>
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40006400 	.word	0x40006400

08005998 <set_bit_timing>:

 * @return    none
 *
 */
void set_bit_timing(can_regdef_t* p_can,uint32_t baudrate)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
	uint16_t brp;
	brp = (uint16_t)( (apb_get_clock(APB1) / (baudrate * 16) ) - 1);
 80059a2:	2001      	movs	r0, #1
 80059a4:	f000 f9d6 	bl	8005d54 <apb_get_clock>
 80059a8:	4602      	mov	r2, r0
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	81fb      	strh	r3, [r7, #14]
	p_can->BTR = 0x00000000;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	61da      	str	r2, [r3, #28]
	p_can->BTR |= (brp << 0);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69da      	ldr	r2, [r3, #28]
 80059c2:	89fb      	ldrh	r3, [r7, #14]
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	61da      	str	r2, [r3, #28]
	p_can->BTR |= 0xC << 16;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	61da      	str	r2, [r3, #28]
	p_can->BTR |= 0x1 << 20;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	61da      	str	r2, [r3, #28]
	p_can->BTR |= 0x0 << 24;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	61da      	str	r2, [r3, #28]
}
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <can_receive_message>:
 *
 * @return RX_DONE (1)
 *
 */
uint8_t can_receive_message(can_regdef_t* p_can, uint8_t fifo_message_pending_index)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	70fb      	strb	r3, [r7, #3]

		read_rtr(p_can,fifo_message_pending_index);
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	4619      	mov	r1, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff fba2 	bl	800514c <read_rtr>

		read_ide(p_can,fifo_message_pending_index);
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fbb7 	bl	8005180 <read_ide>

		read_id(p_can,fifo_message_pending_index);
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fbcc 	bl	80051b4 <read_id>

		read_length(p_can,fifo_message_pending_index);
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fbef 	bl	8005204 <read_length>

		read_time_stamp(p_can,fifo_message_pending_index);
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff fc04 	bl	8005238 <read_time_stamp>

		read_filter_match_index(p_can,fifo_message_pending_index);
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff fc17 	bl	8005268 <read_filter_match_index>

		read_data(p_can,fifo_message_pending_index);
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff fc2a 	bl	8005298 <read_data>

		release_fifo(p_can,fifo_message_pending_index);
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff fc45 	bl	80052d8 <release_fifo>

		return RX_DONE;
 8005a4e:	2301      	movs	r3, #1

}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <register_rx0_callback>:
 *
 * @return void
 *
 */
void register_rx0_callback(can_rx0_callback_t callback)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	callback_rx0 = callback;
 8005a60:	4a03      	ldr	r2, [pc, #12]	@ (8005a70 <register_rx0_callback+0x18>)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6013      	str	r3, [r2, #0]
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr
 8005a70:	20000420 	.word	0x20000420

08005a74 <USB_LP_CAN_RX0_IRQHandler>:
 *
 * @return void
 *
 */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	71fb      	strb	r3, [r7, #7]
	// FIFO FULL

	// FIFO OVERRUN

	// FIFO message received
	if (check_for_data(CAN1) == FIFO_0_MESSAGE_PENDING)
 8005a7e:	480b      	ldr	r0, [pc, #44]	@ (8005aac <USB_LP_CAN_RX0_IRQHandler+0x38>)
 8005a80:	f7ff fb4a 	bl	8005118 <check_for_data>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10b      	bne.n	8005aa2 <USB_LP_CAN_RX0_IRQHandler+0x2e>
	{
		can_receive_message(CAN1,FIFO_0_MESSAGE_PENDING); // reads the message.
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4807      	ldr	r0, [pc, #28]	@ (8005aac <USB_LP_CAN_RX0_IRQHandler+0x38>)
 8005a8e:	f7ff ffb0 	bl	80059f2 <can_receive_message>
		if (callback_rx0)
 8005a92:	4b07      	ldr	r3, [pc, #28]	@ (8005ab0 <USB_LP_CAN_RX0_IRQHandler+0x3c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <USB_LP_CAN_RX0_IRQHandler+0x2e>
		{
			callback_rx0(&can_rx);
 8005a9a:	4b05      	ldr	r3, [pc, #20]	@ (8005ab0 <USB_LP_CAN_RX0_IRQHandler+0x3c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4805      	ldr	r0, [pc, #20]	@ (8005ab4 <USB_LP_CAN_RX0_IRQHandler+0x40>)
 8005aa0:	4798      	blx	r3
		}
	}

}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40006400 	.word	0x40006400
 8005ab0:	20000420 	.word	0x20000420
 8005ab4:	200002a8 	.word	0x200002a8

08005ab8 <clock_init>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

void clock_init(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
	ahb_clk_set(p->ahb_prescalar);
 8005abc:	4b17      	ldr	r3, [pc, #92]	@ (8005b1c <clock_init+0x64>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	78db      	ldrb	r3, [r3, #3]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f8c2 	bl	8005c4c <ahb_clk_set>

	apb1_clk_set(p->apb1_prescalar);
 8005ac8:	4b14      	ldr	r3, [pc, #80]	@ (8005b1c <clock_init+0x64>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	791b      	ldrb	r3, [r3, #4]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 f8d6 	bl	8005c80 <apb1_clk_set>

	apb2_clk_set(p->apb2_prescalar);
 8005ad4:	4b11      	ldr	r3, [pc, #68]	@ (8005b1c <clock_init+0x64>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	795b      	ldrb	r3, [r3, #5]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f8ea 	bl	8005cb4 <apb2_clk_set>

	pll_clk_config(p->pll_clock_source,p->pll_input_clock_multiplier);
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b1c <clock_init+0x64>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	789a      	ldrb	r2, [r3, #2]
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <clock_init+0x64>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f000 f882 	bl	8005bf8 <pll_clk_config>

	system_clock_set(p->system_clock_source);
 8005af4:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <clock_init+0x64>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f812 	bl	8005b24 <system_clock_set>

	ahb_peripheral_clock_en(AHB_PERIPHERAL_CLOCK_EN);
 8005b00:	2001      	movs	r0, #1
 8005b02:	f000 f915 	bl	8005d30 <ahb_peripheral_clock_en>

	apb2_peripheral_clock_en(APB2_PERIPHERAL_CLOCK_EN);
 8005b06:	f641 201d 	movw	r0, #6685	@ 0x1a1d
 8005b0a:	f000 f8ed 	bl	8005ce8 <apb2_peripheral_clock_en>

	apb1_peripheral_clock_en(APB1_PERIPHERAL_CLOCK_EN);
 8005b0e:	4804      	ldr	r0, [pc, #16]	@ (8005b20 <clock_init+0x68>)
 8005b10:	f000 f8fc 	bl	8005d0c <apb1_peripheral_clock_en>

	lsi_clock_en();
 8005b14:	f000 f9da 	bl	8005ecc <lsi_clock_en>

}
 8005b18:	bf00      	nop
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000008 	.word	0x20000008
 8005b20:	02420000 	.word	0x02420000

08005b24 <system_clock_set>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

uint8_t system_clock_set(clock_source_e source)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = HSI;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]
	if (source == HSE)
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d11f      	bne.n	8005b78 <system_clock_set+0x54>
	{
		RCC->CR |= HSE_ON;
 8005b38:	4b2e      	ldr	r3, [pc, #184]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b42:	6013      	str	r3, [r2, #0]
		while (!IS_HSE_READY())
 8005b44:	bf00      	nop
 8005b46:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f9      	beq.n	8005b46 <system_clock_set+0x22>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8005b52:	4b28      	ldr	r3, [pc, #160]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	4a27      	ldr	r2, [pc, #156]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b58:	f023 0303 	bic.w	r3, r3, #3
 8005b5c:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSE;
 8005b5e:	4b25      	ldr	r3, [pc, #148]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4a24      	ldr	r2, [pc, #144]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b64:	f043 0301 	orr.w	r3, r3, #1
 8005b68:	6053      	str	r3, [r2, #4]
		RCC->CR &= ~(1 << 0);
 8005b6a:	4b22      	ldr	r3, [pc, #136]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a21      	ldr	r2, [pc, #132]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e037      	b.n	8005be8 <system_clock_set+0xc4>
	}
	else if (source == HSI)
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d117      	bne.n	8005bae <system_clock_set+0x8a>
	{
		RCC->CR |= HSI_ON;
 8005b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1c      	ldr	r2, [pc, #112]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	6013      	str	r3, [r2, #0]
		while (!IS_HSI_READY())
 8005b8a:	bf00      	nop
 8005b8c:	4b19      	ldr	r3, [pc, #100]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f9      	beq.n	8005b8c <system_clock_set+0x68>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8005b98:	4b16      	ldr	r3, [pc, #88]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4a15      	ldr	r2, [pc, #84]	@ (8005bf4 <system_clock_set+0xd0>)
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSI;
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <system_clock_set+0xd0>)
 8005ba6:	4a13      	ldr	r2, [pc, #76]	@ (8005bf4 <system_clock_set+0xd0>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	6053      	str	r3, [r2, #4]
 8005bac:	e01c      	b.n	8005be8 <system_clock_set+0xc4>
	}
	else if (source == PLL)
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d119      	bne.n	8005be8 <system_clock_set+0xc4>
	{
		RCC->CR |= PLL_ON;
 8005bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf4 <system_clock_set+0xd0>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8005bf4 <system_clock_set+0xd0>)
 8005bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bbe:	6013      	str	r3, [r2, #0]
		while (!IS_PLL_READY())
 8005bc0:	bf00      	nop
 8005bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf4 <system_clock_set+0xd0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f9      	beq.n	8005bc2 <system_clock_set+0x9e>
		{
			;
		}
		//RCC->CFGR &= ~(3 << 0);
		RCC->CFGR |= PLL;
 8005bce:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <system_clock_set+0xd0>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	4a08      	ldr	r2, [pc, #32]	@ (8005bf4 <system_clock_set+0xd0>)
 8005bd4:	f043 0302 	orr.w	r3, r3, #2
 8005bd8:	6053      	str	r3, [r2, #4]
		while ((RCC->CFGR & (3 << 2)) != 8);
 8005bda:	bf00      	nop
 8005bdc:	4b05      	ldr	r3, [pc, #20]	@ (8005bf4 <system_clock_set+0xd0>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 030c 	and.w	r3, r3, #12
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d1f9      	bne.n	8005bdc <system_clock_set+0xb8>
		//RCC->CR &= ~(1 << 0);

	}
	return temp;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr
 8005bf4:	40021000 	.word	0x40021000

08005bf8 <pll_clk_config>:
**
** Returned value:		status of the function (healthy or error)
**
*****************************************************************************/
uint8_t pll_clk_config(pll_entry_clock_source_e source,pll_input_multiplier_e multiplication_factor)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	460a      	mov	r2, r1
 8005c02:	71fb      	strb	r3, [r7, #7]
 8005c04:	4613      	mov	r3, r2
 8005c06:	71bb      	strb	r3, [r7, #6]
	 RCC->CFGR &= ~(0xF << 18);
 8005c08:	4b0f      	ldr	r3, [pc, #60]	@ (8005c48 <pll_clk_config+0x50>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8005c48 <pll_clk_config+0x50>)
 8005c0e:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8005c12:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= (multiplication_factor << 18);
 8005c14:	4b0c      	ldr	r3, [pc, #48]	@ (8005c48 <pll_clk_config+0x50>)
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	79bb      	ldrb	r3, [r7, #6]
 8005c1a:	049b      	lsls	r3, r3, #18
 8005c1c:	490a      	ldr	r1, [pc, #40]	@ (8005c48 <pll_clk_config+0x50>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	604b      	str	r3, [r1, #4]
	 RCC->CFGR &= ~(1 << 16);
 8005c22:	4b09      	ldr	r3, [pc, #36]	@ (8005c48 <pll_clk_config+0x50>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4a08      	ldr	r2, [pc, #32]	@ (8005c48 <pll_clk_config+0x50>)
 8005c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c2c:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= source;
 8005c2e:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <pll_clk_config+0x50>)
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	4904      	ldr	r1, [pc, #16]	@ (8005c48 <pll_clk_config+0x50>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	604b      	str	r3, [r1, #4]
     return 1;
 8005c3a:	2301      	movs	r3, #1
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000

08005c4c <ahb_clk_set>:
**
*****************************************************************************/


void ahb_clk_set(ahb_prescalar_option_e factor)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << AHB_CLOCK_PRESCALAR_OFFSET);
 8005c56:	4b09      	ldr	r3, [pc, #36]	@ (8005c7c <ahb_clk_set+0x30>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	4a08      	ldr	r2, [pc, #32]	@ (8005c7c <ahb_clk_set+0x30>)
 8005c5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c60:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << AHB_CLOCK_PRESCALAR_OFFSET);
 8005c62:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <ahb_clk_set+0x30>)
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	4904      	ldr	r1, [pc, #16]	@ (8005c7c <ahb_clk_set+0x30>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	604b      	str	r3, [r1, #4]
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000

08005c80 <apb1_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_clk_set(apbx_prescalar_options_e factor)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0x7 << APB1_CLOCK_PRESCALAR_OFFSET);
 8005c8a:	4b09      	ldr	r3, [pc, #36]	@ (8005cb0 <apb1_clk_set+0x30>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4a08      	ldr	r2, [pc, #32]	@ (8005cb0 <apb1_clk_set+0x30>)
 8005c90:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005c94:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB1_CLOCK_PRESCALAR_OFFSET);
 8005c96:	4b06      	ldr	r3, [pc, #24]	@ (8005cb0 <apb1_clk_set+0x30>)
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	4904      	ldr	r1, [pc, #16]	@ (8005cb0 <apb1_clk_set+0x30>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	604b      	str	r3, [r1, #4]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <apb2_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_clk_set(apbx_prescalar_options_e factor)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << APB2_CLOCK_PRESCALAR_OFFSET);
 8005cbe:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <apb2_clk_set+0x30>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4a08      	ldr	r2, [pc, #32]	@ (8005ce4 <apb2_clk_set+0x30>)
 8005cc4:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8005cc8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB2_CLOCK_PRESCALAR_OFFSET);
 8005cca:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <apb2_clk_set+0x30>)
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	02db      	lsls	r3, r3, #11
 8005cd2:	4904      	ldr	r1, [pc, #16]	@ (8005ce4 <apb2_clk_set+0x30>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40021000 	.word	0x40021000

08005ce8 <apb2_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_peripheral_clock_en(uint32_t clock_en_parameter)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= clock_en_parameter;
 8005cf0:	4b05      	ldr	r3, [pc, #20]	@ (8005d08 <apb2_peripheral_clock_en+0x20>)
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	4904      	ldr	r1, [pc, #16]	@ (8005d08 <apb2_peripheral_clock_en+0x20>)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	618b      	str	r3, [r1, #24]
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40021000 	.word	0x40021000

08005d0c <apb1_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_peripheral_clock_en(uint32_t clock_en_parameter)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= clock_en_parameter;
 8005d14:	4b05      	ldr	r3, [pc, #20]	@ (8005d2c <apb1_peripheral_clock_en+0x20>)
 8005d16:	69da      	ldr	r2, [r3, #28]
 8005d18:	4904      	ldr	r1, [pc, #16]	@ (8005d2c <apb1_peripheral_clock_en+0x20>)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61cb      	str	r3, [r1, #28]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000

08005d30 <ahb_peripheral_clock_en>:


void ahb_peripheral_clock_en(uint32_t clock_en_parameter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	RCC->AHBENR |= clock_en_parameter;
 8005d38:	4b05      	ldr	r3, [pc, #20]	@ (8005d50 <ahb_peripheral_clock_en+0x20>)
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	4904      	ldr	r1, [pc, #16]	@ (8005d50 <ahb_peripheral_clock_en+0x20>)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	614b      	str	r3, [r1, #20]
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000

08005d54 <apb_get_clock>:
**
** Returned value:		Clock Frequency
**
*****************************************************************************/
uint32_t apb_get_clock(uint8_t apb)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t clock_source;
	uint32_t sysclk, temp, ahbp, apbp;

	clock_source = ((RCC->CFGR >> 2) & 0x03);
 8005d5e:	4b36      	ldr	r3, [pc, #216]	@ (8005e38 <apb_get_clock+0xe4>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	74fb      	strb	r3, [r7, #19]
	if (clock_source == SYSCLK_SOURCE_HSI)
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <apb_get_clock+0x24>
	{
		sysclk = 8000000;
 8005d72:	4b32      	ldr	r3, [pc, #200]	@ (8005e3c <apb_get_clock+0xe8>)
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	e011      	b.n	8005d9c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_HSE)
 8005d78:	7cfb      	ldrb	r3, [r7, #19]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d102      	bne.n	8005d84 <apb_get_clock+0x30>
	{
		sysclk = 8000000;
 8005d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e3c <apb_get_clock+0xe8>)
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e00b      	b.n	8005d9c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL)
 8005d84:	7cfb      	ldrb	r3, [r7, #19]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d103      	bne.n	8005d92 <apb_get_clock+0x3e>
	{
		sysclk = get_pll_clock();
 8005d8a:	f000 f85d 	bl	8005e48 <get_pll_clock>
 8005d8e:	61f8      	str	r0, [r7, #28]
 8005d90:	e004      	b.n	8005d9c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL_R)
 8005d92:	7cfb      	ldrb	r3, [r7, #19]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d101      	bne.n	8005d9c <apb_get_clock+0x48>
	{
		sysclk = 1; // study this and write the function for it.
 8005d98:	2301      	movs	r3, #1
 8005d9a:	61fb      	str	r3, [r7, #28]
	}

	/*
	 * Get AHB Prescalar Value
	 */
	temp = (RCC->CFGR >> 4) & 0xF;
 8005d9c:	4b26      	ldr	r3, [pc, #152]	@ (8005e38 <apb_get_clock+0xe4>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	091b      	lsrs	r3, r3, #4
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	60fb      	str	r3, [r7, #12]
	if (temp < 8)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b07      	cmp	r3, #7
 8005dac:	d802      	bhi.n	8005db4 <apb_get_clock+0x60>
	{
		ahbp = 1;
 8005dae:	2301      	movs	r3, #1
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	e005      	b.n	8005dc0 <apb_get_clock+0x6c>
	}
	else
	{
		ahbp = ahb_prescaler_1[temp - 8];
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3b08      	subs	r3, #8
 8005db8:	4a21      	ldr	r2, [pc, #132]	@ (8005e40 <apb_get_clock+0xec>)
 8005dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dbe:	61bb      	str	r3, [r7, #24]
	}

	/*
	 * Get APB1 Prescalar Value
	 */
	if (apb == APB1)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d114      	bne.n	8005df0 <apb_get_clock+0x9c>
	{
		temp = ((RCC->CFGR >> 10) && 0x7);
 8005dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e38 <apb_get_clock+0xe4>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	0a9b      	lsrs	r3, r3, #10
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	bf14      	ite	ne
 8005dd0:	2301      	movne	r3, #1
 8005dd2:	2300      	moveq	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d802      	bhi.n	8005de4 <apb_get_clock+0x90>
		{
			apbp = 1;
 8005dde:	2301      	movs	r3, #1
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	e005      	b.n	8005df0 <apb_get_clock+0x9c>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3b04      	subs	r3, #4
 8005de8:	4a16      	ldr	r2, [pc, #88]	@ (8005e44 <apb_get_clock+0xf0>)
 8005dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dee:	617b      	str	r3, [r7, #20]
	}

	/*
	 * get APB2 Prescalar Value
	 */
	if (apb == APB2)
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d114      	bne.n	8005e20 <apb_get_clock+0xcc>
	{
		temp = ((RCC->CFGR >> 13) && 0x7);
 8005df6:	4b10      	ldr	r3, [pc, #64]	@ (8005e38 <apb_get_clock+0xe4>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	0b5b      	lsrs	r3, r3, #13
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d802      	bhi.n	8005e14 <apb_get_clock+0xc0>
		{
			apbp = 1;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	e005      	b.n	8005e20 <apb_get_clock+0xcc>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3b04      	subs	r3, #4
 8005e18:	4a0a      	ldr	r2, [pc, #40]	@ (8005e44 <apb_get_clock+0xf0>)
 8005e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e1e:	617b      	str	r3, [r7, #20]
		}
	}
	return (sysclk / ahbp / apbp);
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3

}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	007a1200 	.word	0x007a1200
 8005e40:	2000000c 	.word	0x2000000c
 8005e44:	2000001c 	.word	0x2000001c

08005e48 <get_pll_clock>:




uint32_t get_pll_clock(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
	// PLL input Clock source
	// If PLL input clock source is HSE then check PLLXTRE in Register
	uint8_t clock_source = ( (RCC->CFGR >> 16) & 0x01);
 8005e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8005ebc <get_pll_clock+0x74>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	0c1b      	lsrs	r3, r3, #16
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	72fb      	strb	r3, [r7, #11]
	uint32_t multipliation_factor = ( (RCC->CFGR >> 18) & 0x0F);
 8005e5c:	4b17      	ldr	r3, [pc, #92]	@ (8005ebc <get_pll_clock+0x74>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	0c9b      	lsrs	r3, r3, #18
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	607b      	str	r3, [r7, #4]
	uint32_t hse_pll_divider = ( (RCC->CFGR >> 17) & 0x01);
 8005e68:	4b14      	ldr	r3, [pc, #80]	@ (8005ebc <get_pll_clock+0x74>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	0c5b      	lsrs	r3, r3, #17
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	603b      	str	r3, [r7, #0]
	uint32_t pll_out_clk = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
	if (clock_source == PLL_HSI_DIV_2)
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <get_pll_clock+0x4a>
	{
		pll_out_clk =  ( (HSI_INPUT / 2) * pll_multiplier[multipliation_factor]);
 8005e7e:	4a10      	ldr	r2, [pc, #64]	@ (8005ec0 <get_pll_clock+0x78>)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4413      	add	r3, r2
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec4 <get_pll_clock+0x7c>)
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e00e      	b.n	8005eb0 <get_pll_clock+0x68>
	}
	else if (clock_source == PLL_HSE)
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d10b      	bne.n	8005eb0 <get_pll_clock+0x68>
	{
		pll_out_clk =  ( ( (HSE_INPUT) / (hse_pll_divider + 1) ) * pll_multiplier[multipliation_factor]);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec8 <get_pll_clock+0x80>)
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	4907      	ldr	r1, [pc, #28]	@ (8005ec0 <get_pll_clock+0x78>)
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	60fb      	str	r3, [r7, #12]
	}
	return pll_out_clk;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	20000024 	.word	0x20000024
 8005ec4:	003d0900 	.word	0x003d0900
 8005ec8:	007a1200 	.word	0x007a1200

08005ecc <lsi_clock_en>:

void lsi_clock_en(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
	RCC->CSR |= (1 << LSI_CLOCK_EN_BIT_POSITION_CSR);
 8005ed0:	4b08      	ldr	r3, [pc, #32]	@ (8005ef4 <lsi_clock_en+0x28>)
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	4a07      	ldr	r2, [pc, #28]	@ (8005ef4 <lsi_clock_en+0x28>)
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	6253      	str	r3, [r2, #36]	@ 0x24
	while(!(RCC->CSR & IS_LSI_CLOCK_READY)){;}
 8005edc:	bf00      	nop
 8005ede:	4b05      	ldr	r3, [pc, #20]	@ (8005ef4 <lsi_clock_en+0x28>)
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f9      	beq.n	8005ede <lsi_clock_en+0x12>
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr
 8005ef4:	40021000 	.word	0x40021000

08005ef8 <io_port>:

#define LED_ON() 			io_set_out(IO_TEST_LED, OUT_STATE_LOW);
#define LED_OFF() 			io_set_out(IO_TEST_LED, OUT_STATE_HIGH);

static uint8_t io_port(io_e io)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
    return (io & IO_PORT_MASK) >> IO_PORT_OFFSET;
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f003 0303 	and.w	r3, r3, #3
 8005f0c:	b2db      	uxtb	r3, r3
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr

08005f18 <io_pin_bit>:

static uint8_t io_pin_bit(gpio_pins io)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	71fb      	strb	r3, [r7, #7]
    return io & IO_PIN_MASK;
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	b2db      	uxtb	r3, r3
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <io_init>:
	}
}


void io_init(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	71fb      	strb	r3, [r7, #7]
 8005f3e:	e00d      	b.n	8005f5c <io_init+0x28>
	{
		io_config(io,&io_initial_config[io]);
 8005f40:	79fa      	ldrb	r2, [r7, #7]
 8005f42:	4613      	mov	r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	4413      	add	r3, r2
 8005f48:	4a08      	ldr	r2, [pc, #32]	@ (8005f6c <io_init+0x38>)
 8005f4a:	441a      	add	r2, r3
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	4611      	mov	r1, r2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 f80d 	bl	8005f70 <io_config>
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	71fb      	strb	r3, [r7, #7]
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	2b30      	cmp	r3, #48	@ 0x30
 8005f60:	d9ee      	bls.n	8005f40 <io_init+0xc>
	}
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20000034 	.word	0x20000034

08005f70 <io_config>:

void io_config(io_e io, io_configuration *config)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	6039      	str	r1, [r7, #0]
 8005f7a:	71fb      	strb	r3, [r7, #7]
	io_set_io_mode(io,config->mode,config->config,config->pupd);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	7819      	ldrb	r1, [r3, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	785a      	ldrb	r2, [r3, #1]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	789b      	ldrb	r3, [r3, #2]
 8005f88:	79f8      	ldrb	r0, [r7, #7]
 8005f8a:	f000 f805 	bl	8005f98 <io_set_io_mode>
}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <io_set_io_mode>:

void io_set_io_mode(io_e io, io_mode_e mode, io_config_e config,io_pull_up_down_e pupd)
{
 8005f98:	b590      	push	{r4, r7, lr}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	71fb      	strb	r3, [r7, #7]
 8005faa:	4603      	mov	r3, r0
 8005fac:	71bb      	strb	r3, [r7, #6]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	717b      	strb	r3, [r7, #5]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	713b      	strb	r3, [r7, #4]
	pin = io_pin_bit(io);
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff ffad 	bl	8005f18 <io_pin_bit>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4b3c      	ldr	r3, [pc, #240]	@ (80060b4 <io_set_io_mode+0x11c>)
 8005fc4:	701a      	strb	r2, [r3, #0]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + (io_port(io)*0x400));
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff ff95 	bl	8005ef8 <io_port>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	029b      	lsls	r3, r3, #10
 8005fd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fd6:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8005fda:	60fb      	str	r3, [r7, #12]
	if(config == CONFIG_INPUT_WITH_PULLUP_PULLDOWN)
 8005fdc:	797b      	ldrb	r3, [r7, #5]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d11b      	bne.n	800601a <io_set_io_mode+0x82>
	{
		if (pupd == PULL_UP)
 8005fe2:	793b      	ldrb	r3, [r7, #4]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d10a      	bne.n	8005ffe <io_set_io_mode+0x66>
		{
			Port->ODR |= (1 << pin);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4a31      	ldr	r2, [pc, #196]	@ (80060b4 <io_set_io_mode+0x11c>)
 8005fee:	7812      	ldrb	r2, [r2, #0]
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	408a      	lsls	r2, r1
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	60da      	str	r2, [r3, #12]
 8005ffc:	e00d      	b.n	800601a <io_set_io_mode+0x82>
		}
		else if (pupd == PULL_DOWN)
 8005ffe:	793b      	ldrb	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <io_set_io_mode+0x82>
		{
			Port->ODR &= ~(1 << pin);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4a2a      	ldr	r2, [pc, #168]	@ (80060b4 <io_set_io_mode+0x11c>)
 800600a:	7812      	ldrb	r2, [r2, #0]
 800600c:	4611      	mov	r1, r2
 800600e:	2201      	movs	r2, #1
 8006010:	408a      	lsls	r2, r1
 8006012:	43d2      	mvns	r2, r2
 8006014:	401a      	ands	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	60da      	str	r2, [r3, #12]
		}
	}
	if (pin < 8)
 800601a:	4b26      	ldr	r3, [pc, #152]	@ (80060b4 <io_set_io_mode+0x11c>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b07      	cmp	r3, #7
 8006020:	d81e      	bhi.n	8006060 <io_set_io_mode+0xc8>
	{
		Port->CRL &= ~(0xF << PIN_MODE_MASK);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a23      	ldr	r2, [pc, #140]	@ (80060b4 <io_set_io_mode+0x11c>)
 8006028:	7812      	ldrb	r2, [r2, #0]
 800602a:	0092      	lsls	r2, r2, #2
 800602c:	210f      	movs	r1, #15
 800602e:	fa01 f202 	lsl.w	r2, r1, r2
 8006032:	43d2      	mvns	r2, r2
 8006034:	401a      	ands	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	601a      	str	r2, [r3, #0]
		Port->CRL |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK + 2));
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	79b9      	ldrb	r1, [r7, #6]
 8006040:	4a1c      	ldr	r2, [pc, #112]	@ (80060b4 <io_set_io_mode+0x11c>)
 8006042:	7812      	ldrb	r2, [r2, #0]
 8006044:	0092      	lsls	r2, r2, #2
 8006046:	4091      	lsls	r1, r2
 8006048:	7978      	ldrb	r0, [r7, #5]
 800604a:	4a1a      	ldr	r2, [pc, #104]	@ (80060b4 <io_set_io_mode+0x11c>)
 800604c:	7812      	ldrb	r2, [r2, #0]
 800604e:	0092      	lsls	r2, r2, #2
 8006050:	3202      	adds	r2, #2
 8006052:	fa00 f202 	lsl.w	r2, r0, r2
 8006056:	430a      	orrs	r2, r1
 8006058:	431a      	orrs	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	601a      	str	r2, [r3, #0]
	{
		pin %= 8;
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
	}
}
 800605e:	e024      	b.n	80060aa <io_set_io_mode+0x112>
		pin %= 8;
 8006060:	4b14      	ldr	r3, [pc, #80]	@ (80060b4 <io_set_io_mode+0x11c>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	b2da      	uxtb	r2, r3
 800606a:	4b12      	ldr	r3, [pc, #72]	@ (80060b4 <io_set_io_mode+0x11c>)
 800606c:	701a      	strb	r2, [r3, #0]
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	4a10      	ldr	r2, [pc, #64]	@ (80060b4 <io_set_io_mode+0x11c>)
 8006074:	7812      	ldrb	r2, [r2, #0]
 8006076:	0092      	lsls	r2, r2, #2
 8006078:	210f      	movs	r1, #15
 800607a:	fa01 f202 	lsl.w	r2, r1, r2
 800607e:	43d2      	mvns	r2, r2
 8006080:	401a      	ands	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	605a      	str	r2, [r3, #4]
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	79b9      	ldrb	r1, [r7, #6]
 800608c:	4a09      	ldr	r2, [pc, #36]	@ (80060b4 <io_set_io_mode+0x11c>)
 800608e:	7812      	ldrb	r2, [r2, #0]
 8006090:	0092      	lsls	r2, r2, #2
 8006092:	4091      	lsls	r1, r2
 8006094:	7978      	ldrb	r0, [r7, #5]
 8006096:	4a07      	ldr	r2, [pc, #28]	@ (80060b4 <io_set_io_mode+0x11c>)
 8006098:	7812      	ldrb	r2, [r2, #0]
 800609a:	0092      	lsls	r2, r2, #2
 800609c:	3202      	adds	r2, #2
 800609e:	fa00 f202 	lsl.w	r2, r0, r2
 80060a2:	430a      	orrs	r2, r1
 80060a4:	431a      	orrs	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	605a      	str	r2, [r3, #4]
}
 80060aa:	bf00      	nop
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd90      	pop	{r4, r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000425 	.word	0x20000425

080060b8 <io_set_out>:



void io_set_out(io_e io, io_out_e out)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	460a      	mov	r2, r1
 80060c2:	71fb      	strb	r3, [r7, #7]
 80060c4:	4613      	mov	r3, r2
 80060c6:	71bb      	strb	r3, [r7, #6]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff ff14 	bl	8005ef8 <io_port>
 80060d0:	4603      	mov	r3, r0
 80060d2:	029b      	lsls	r3, r3, #10
 80060d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060d8:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80060dc:	60fb      	str	r3, [r7, #12]
	switch(out){
 80060de:	79bb      	ldrb	r3, [r7, #6]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d010      	beq.n	8006106 <io_set_out+0x4e>
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d11d      	bne.n	8006124 <io_set_out+0x6c>
	case OUT_STATE_HIGH:
		Port->ODR &= ~(1 << io_pin_bit(io));
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff ff14 	bl	8005f18 <io_pin_bit>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	2301      	movs	r3, #1
 80060f6:	4093      	lsls	r3, r2
 80060f8:	43da      	mvns	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	401a      	ands	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	60da      	str	r2, [r3, #12]
		break;
 8006104:	e00e      	b.n	8006124 <io_set_out+0x6c>
	case OUT_STATE_LOW:
		Port->ODR |= (1 << io_pin_bit(io));
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff ff05 	bl	8005f18 <io_pin_bit>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	2301      	movs	r3, #1
 8006114:	fa03 f202 	lsl.w	r2, r3, r2
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	431a      	orrs	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	60da      	str	r2, [r3, #12]
		break;
 8006122:	bf00      	nop
	}
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <io_toggle>:

void io_toggle(io_e io)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	71fb      	strb	r3, [r7, #7]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff fedd 	bl	8005ef8 <io_port>
 800613e:	4603      	mov	r3, r0
 8006140:	029b      	lsls	r3, r3, #10
 8006142:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006146:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800614a:	60fb      	str	r3, [r7, #12]
	Port->ODR ^= (1 << 13);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f483 5200 	eor.w	r2, r3, #8192	@ 0x2000
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	60da      	str	r2, [r3, #12]
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <EXTI4_IRQHandler>:
	return (Port->IDR & (1 << io_pin_bit(io)));
}


void EXTI4_IRQHandler(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 4))
 8006164:	4b10      	ldr	r3, [pc, #64]	@ (80061a8 <EXTI4_IRQHandler+0x48>)
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b00      	cmp	r3, #0
 800616e:	d018      	beq.n	80061a2 <EXTI4_IRQHandler+0x42>
	{
		EXTI->PR |= (1 << 4);
 8006170:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <EXTI4_IRQHandler+0x48>)
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	4a0c      	ldr	r2, [pc, #48]	@ (80061a8 <EXTI4_IRQHandler+0x48>)
 8006176:	f043 0310 	orr.w	r3, r3, #16
 800617a:	6153      	str	r3, [r2, #20]
		if (!flag_led_on)
 800617c:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <EXTI4_IRQHandler+0x4c>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d107      	bne.n	8006194 <EXTI4_IRQHandler+0x34>
		{
			LED_ON();
 8006184:	2100      	movs	r1, #0
 8006186:	202d      	movs	r0, #45	@ 0x2d
 8006188:	f7ff ff96 	bl	80060b8 <io_set_out>
			flag_led_on = 1;
 800618c:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <EXTI4_IRQHandler+0x4c>)
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
		{
			LED_OFF();
			flag_led_on = 0;
		}
	}
}
 8006192:	e006      	b.n	80061a2 <EXTI4_IRQHandler+0x42>
			LED_OFF();
 8006194:	2101      	movs	r1, #1
 8006196:	202d      	movs	r0, #45	@ 0x2d
 8006198:	f7ff ff8e 	bl	80060b8 <io_set_out>
			flag_led_on = 0;
 800619c:	4b03      	ldr	r3, [pc, #12]	@ (80061ac <EXTI4_IRQHandler+0x4c>)
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40010400 	.word	0x40010400
 80061ac:	20000424 	.word	0x20000424

080061b0 <nvic_en_irq>:
uint16_t counter_adc_sampling;
uint16_t counter_data_transmit;
uint16_t counter_led_toggle;
uint32_t count_systick;
void nvic_en_irq(irqn_type irqn)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	71fb      	strb	r3, [r7, #7]
	uint8_t register_position = irqn / 32;
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	73fb      	strb	r3, [r7, #15]
	uint8_t irq_position = irqn % 32;
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	73bb      	strb	r3, [r7, #14]
	NVIC->ISER[register_position] = (1 << irq_position);
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	2201      	movs	r2, #1
 80061cc:	fa02 f103 	lsl.w	r1, r2, r3
 80061d0:	4a04      	ldr	r2, [pc, #16]	@ (80061e4 <nvic_en_irq+0x34>)
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80061d8:	bf00      	nop
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	e000e100 	.word	0xe000e100

080061e8 <systick_init>:

void systick_init(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
	// Reload Value
	SYSTICK->RVR = 7999; //for 1 ms @ 8 Mhz
 80061ec:	4b08      	ldr	r3, [pc, #32]	@ (8006210 <systick_init+0x28>)
 80061ee:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80061f2:	605a      	str	r2, [r3, #4]
	// Clear the current count
	SYSTICK->CVR = 0;
 80061f4:	4b06      	ldr	r3, [pc, #24]	@ (8006210 <systick_init+0x28>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	609a      	str	r2, [r3, #8]

	// Clock Selection
	SYSTICK->CSR |= (1 << 2) | (1 << 1) | ((1 << 0)); //AHB selected
 80061fa:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <systick_init+0x28>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a04      	ldr	r2, [pc, #16]	@ (8006210 <systick_init+0x28>)
 8006200:	f043 0307 	orr.w	r3, r3, #7
 8006204:	6013      	str	r3, [r2, #0]

}
 8006206:	bf00      	nop
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000e010 	.word	0xe000e010

08006214 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
	counter_adc_sampling++;
 8006218:	4b0d      	ldr	r3, [pc, #52]	@ (8006250 <SysTick_Handler+0x3c>)
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	3301      	adds	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	4b0b      	ldr	r3, [pc, #44]	@ (8006250 <SysTick_Handler+0x3c>)
 8006222:	801a      	strh	r2, [r3, #0]
	counter_data_transmit++;
 8006224:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <SysTick_Handler+0x40>)
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	3301      	adds	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	4b09      	ldr	r3, [pc, #36]	@ (8006254 <SysTick_Handler+0x40>)
 800622e:	801a      	strh	r2, [r3, #0]
	counter_led_toggle++;
 8006230:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <SysTick_Handler+0x44>)
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	4b07      	ldr	r3, [pc, #28]	@ (8006258 <SysTick_Handler+0x44>)
 800623a:	801a      	strh	r2, [r3, #0]
	count_systick++;
 800623c:	4b07      	ldr	r3, [pc, #28]	@ (800625c <SysTick_Handler+0x48>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	4a06      	ldr	r2, [pc, #24]	@ (800625c <SysTick_Handler+0x48>)
 8006244:	6013      	str	r3, [r2, #0]
}
 8006246:	bf00      	nop
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	20000426 	.word	0x20000426
 8006254:	20000428 	.word	0x20000428
 8006258:	2000042a 	.word	0x2000042a
 800625c:	2000042c 	.word	0x2000042c

08006260 <uart_x_configure_parameter>:
uint16_t logic_counter3 = 0;
uint16_t logic_counter4 = 0;
uint16_t logic_counter5 = 0;

void uart_x_configure_parameter(usart_handle *p_usart_handle)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	p_usart_handle->add_of_usartx = USART2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a0e      	ldr	r2, [pc, #56]	@ (80062a4 <uart_x_configure_parameter+0x44>)
 800626c:	601a      	str	r2, [r3, #0]
	//USART2Handle.Usart_Configuration.Mode = USART_MODE_TXRX;
	p_usart_handle->usart_configuration.no_of_stop_bits = USART_STOPBITS_1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	715a      	strb	r2, [r3, #5]
	p_usart_handle->usart_configuration.data_word_length = USART_WORDLEN_8BITS;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	711a      	strb	r2, [r3, #4]
	p_usart_handle->usart_configuration.baudrate = USART_STD_BAUD_9600;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006280:	609a      	str	r2, [r3, #8]
	p_usart_handle->usart_configuration.parity_control = USART_PARITY_DISABLE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	60da      	str	r2, [r3, #12]
	//p_usart_handle->usart_configuration.dma_transmitter_en = USARTx_DMA_TRANSMITTER_EN;
	//p_usart_handle->usart_configuration.dma_receiver_en = USARTx_DMA_RECEIVER_EN;
	p_usart_handle->tx_buffer = &(tx_buffer_data[0]);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a07      	ldr	r2, [pc, #28]	@ (80062a8 <uart_x_configure_parameter+0x48>)
 800628c:	615a      	str	r2, [r3, #20]
	p_usart_handle->rx_buffer = &(rx_buffer_data[0]);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a06      	ldr	r2, [pc, #24]	@ (80062ac <uart_x_configure_parameter+0x4c>)
 8006292:	619a      	str	r2, [r3, #24]
	p_usart_handle->rx_len = 8;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2208      	movs	r2, #8
 8006298:	775a      	strb	r2, [r3, #29]

}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr
 80062a4:	40004400 	.word	0x40004400
 80062a8:	20000430 	.word	0x20000430
 80062ac:	20000480 	.word	0x20000480

080062b0 <usart_init>:

void usart_init(usart_handle *p_usart_handle)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	config_stop_bit(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.no_of_stop_bits);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	795b      	ldrb	r3, [r3, #5]
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f000 f909 	bl	80064da <config_stop_bit>

	config_data_word_len(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.data_word_length);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	791b      	ldrb	r3, [r3, #4]
 80062d0:	4619      	mov	r1, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	f000 f919 	bl	800650a <config_data_word_len>

	config_parity(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.parity_control);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f000 f922 	bl	800652e <config_parity>

	//config_mode(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.mode);

	usart_set_baudrate(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.baudrate);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f000 f81f 	bl	8006338 <usart_set_baudrate>

	usart_dma_mode_en_di(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.dma_transmitter_en);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	7c1b      	ldrb	r3, [r3, #16]
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f000 fa85 	bl	8006814 <usart_dma_mode_en_di>

	usart_dma_mode_en_di(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.dma_receiver_en);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	7c5b      	ldrb	r3, [r3, #17]
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f000 fa7d 	bl	8006814 <usart_dma_mode_en_di>

	usart_en(p_usart_handle->add_of_usartx);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f8cc 	bl	80064bc <usart_en>

	//usart_read_interrupt(p_usart_handle->add_of_usartx);

	usart_rx_en(p_usart_handle->add_of_usartx);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fa54 	bl	80067d6 <usart_rx_en>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <usart_set_baudrate>:

void usart_set_baudrate(usartx_regdef_t *p_usartx,uint32_t baudrate)
{
 8006338:	b5b0      	push	{r4, r5, r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
	 * USARTDIV is an unsigned fixed point number that is coded on the USART_BRR register.
	 */
	float temp,fraction;
	uint32_t mantissa;
	// TO DO: ADD CONDITION FOR CHECKING WHICH UART IT IS BEFORE GETTING THE CLOCK OF THE PERIPHERAL.
	uint32_t pclk = apb_get_clock(APB1); // It gets the Clock source for mentioned APB.
 8006342:	2001      	movs	r0, #1
 8006344:	f7ff fd06 	bl	8005d54 <apb_get_clock>
 8006348:	6178      	str	r0, [r7, #20]
	uint32_t div_fraction;
	temp = pclk / (16.0 * baudrate);
 800634a:	6978      	ldr	r0, [r7, #20]
 800634c:	f7fe f90e 	bl	800456c <__aeabi_ui2d>
 8006350:	4604      	mov	r4, r0
 8006352:	460d      	mov	r5, r1
 8006354:	6838      	ldr	r0, [r7, #0]
 8006356:	f7fe f909 	bl	800456c <__aeabi_ui2d>
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	4b26      	ldr	r3, [pc, #152]	@ (80063f8 <usart_set_baudrate+0xc0>)
 8006360:	f7fe f97e 	bl	8004660 <__aeabi_dmul>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4620      	mov	r0, r4
 800636a:	4629      	mov	r1, r5
 800636c:	f7fe faa2 	bl	80048b4 <__aeabi_ddiv>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4610      	mov	r0, r2
 8006376:	4619      	mov	r1, r3
 8006378:	f7fe fc4a 	bl	8004c10 <__aeabi_d2f>
 800637c:	4603      	mov	r3, r0
 800637e:	613b      	str	r3, [r7, #16]
	fraction = temp - (int)temp;
 8006380:	6938      	ldr	r0, [r7, #16]
 8006382:	f7fe fe19 	bl	8004fb8 <__aeabi_f2iz>
 8006386:	4603      	mov	r3, r0
 8006388:	4618      	mov	r0, r3
 800638a:	f7fe fd4b 	bl	8004e24 <__aeabi_i2f>
 800638e:	4603      	mov	r3, r0
 8006390:	4619      	mov	r1, r3
 8006392:	6938      	ldr	r0, [r7, #16]
 8006394:	f7fe fc90 	bl	8004cb8 <__aeabi_fsub>
 8006398:	4603      	mov	r3, r0
 800639a:	60fb      	str	r3, [r7, #12]
	mantissa = temp - fraction;
 800639c:	68f9      	ldr	r1, [r7, #12]
 800639e:	6938      	ldr	r0, [r7, #16]
 80063a0:	f7fe fc8a 	bl	8004cb8 <__aeabi_fsub>
 80063a4:	4603      	mov	r3, r0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fe2c 	bl	8005004 <__aeabi_f2uiz>
 80063ac:	4603      	mov	r3, r0
 80063ae:	61fb      	str	r3, [r7, #28]

	div_fraction = round_off((16 * fraction)); // Function to round off the decimal number
 80063b0:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7fd fee3 	bl	8004180 <__aeabi_fmul>
 80063ba:	4603      	mov	r3, r0
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fa87 	bl	80068d0 <round_off>
 80063c2:	61b8      	str	r0, [r7, #24]
	if (div_fraction > 15)
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d904      	bls.n	80063d4 <usart_set_baudrate+0x9c>
	{
		div_fraction = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	61bb      	str	r3, [r7, #24]
		mantissa += 1;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	3301      	adds	r3, #1
 80063d2:	61fb      	str	r3, [r7, #28]
	}
	p_usartx->BRR |= (mantissa << 4);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	609a      	str	r2, [r3, #8]
	p_usartx->BRR |= div_fraction;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	609a      	str	r2, [r3, #8]
}
 80063ee:	bf00      	nop
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bdb0      	pop	{r4, r5, r7, pc}
 80063f6:	bf00      	nop
 80063f8:	40300000 	.word	0x40300000

080063fc <usart_write_polling>:
{
	usart_2_handle.tx_buffer = (uint8_t*)&num;
	usart_write_polling(&usart_2_handle);
}
void usart_write_polling(usart_handle *p_usart_handle)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]

	//p_usart_handle->tx_buffer = tx_buffer_data;
	usart_tx_en(p_usart_handle->add_of_usartx);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 f9d5 	bl	80067b8 <usart_tx_en>
	while (*p_usart_handle->tx_buffer != '\0')
 800640e:	e03d      	b.n	800648c <usart_write_polling+0x90>
	{
		// 8 bit data len
		// 9 bit data len
		while ( get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 0);
 8006410:	bf00      	nop
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2180      	movs	r1, #128	@ 0x80
 8006418:	4618      	mov	r0, r3
 800641a:	f000 f8a6 	bl	800656a <get_flag_status>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0f6      	beq.n	8006412 <usart_write_polling+0x16>

		if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	791b      	ldrb	r3, [r3, #4]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d120      	bne.n	800646e <usart_write_polling+0x72>
		{
			// IF Parity DISABLED
			if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d110      	bne.n	8006456 <usart_write_polling+0x5a>
			{
				//*pData = buffer;
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer & (uint16_t)0x1FF);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	781a      	ldrb	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	615a      	str	r2, [r3, #20]
				p_usart_handle->tx_buffer++;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	615a      	str	r2, [r3, #20]
 8006454:	e01a      	b.n	800648c <usart_write_polling+0x90>
			}
			// IF Parity ENABLED
			else
			{
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer & (uint8_t)0xFF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	781a      	ldrb	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	615a      	str	r2, [r3, #20]
 800646c:	e00e      	b.n	800648c <usart_write_polling+0x90>
			}
		}
		else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	791b      	ldrb	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <usart_write_polling+0x90>
		{
			//p_usart_handle->add_of_usartx->DR = (*buffer & (uint8_t)0xFF);
			//temp_chara = (*buffer);
			// printable character anyhoe is 7-bits, So it doesnt matter if we handle the parity control.
			p_usart_handle->add_of_usartx->DR = *p_usart_handle->tx_buffer;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	781a      	ldrb	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	605a      	str	r2, [r3, #4]
			p_usart_handle->tx_buffer++;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	615a      	str	r2, [r3, #20]
	while (*p_usart_handle->tx_buffer != '\0')
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1bc      	bne.n	8006410 <usart_write_polling+0x14>



	}
	// Wait till TC Got completed
	while (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) != 1);
 8006496:	bf00      	nop
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2140      	movs	r1, #64	@ 0x40
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f863 	bl	800656a <get_flag_status>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d1f6      	bne.n	8006498 <usart_write_polling+0x9c>
	usart_tx_di(p_usart_handle->add_of_usartx);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f9a0 	bl	80067f4 <usart_tx_di>
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <usart_en>:
		}
	}
}

void usart_en(usartx_regdef_t* p_usartx)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_EN);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60da      	str	r2, [r3, #12]
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <config_stop_bit>:

void config_stop_bit(usartx_regdef_t* p_usartx, uint8_t stop_bits)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR2 &=  ~(STOP_BIT_MASK());
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	611a      	str	r2, [r3, #16]
	p_usartx->CR2 |=  (stop_bits << USART_CR2_STOP_BIT);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	031b      	lsls	r3, r3, #12
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	611a      	str	r2, [r3, #16]
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr

0800650a <config_data_word_len>:

void config_data_word_len(usartx_regdef_t* p_usartx, uint8_t data_word_len)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR1 |= (data_word_len << USART_CR1_DATA_WORD_LEN);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	031b      	lsls	r3, r3, #12
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60da      	str	r2, [r3, #12]
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr

0800652e <config_parity>:

void config_parity(usartx_regdef_t* p_usartx, uint8_t parity_type)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
	if (parity_type == USART_PARITY_EN_EVEN)
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d106      	bne.n	800654e <config_parity+0x20>
	{
		p_usartx->CR1 |= (1 << USART_CR1_PARITY_CONTROL_EN); // Enabled the Parity Control, Even Parity Bydefault Selected.
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]
	}
	else if(parity_type == USART_PARITY_EN_ODD)
	{
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
	}
}
 800654c:	e008      	b.n	8006560 <config_parity+0x32>
	else if(parity_type == USART_PARITY_EN_ODD)
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	2b02      	cmp	r3, #2
 8006552:	d105      	bne.n	8006560 <config_parity+0x32>
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f443 62c0 	orr.w	r2, r3, #1536	@ 0x600
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <get_flag_status>:
		p_usartx->CR1 |= ( (1 << USART_CR1_TX_EN) | (1 << USART_CR1_RX_EN) );
	}
}

uint8_t get_flag_status(usartx_regdef_t *p_usartx, uint8_t flag)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	70fb      	strb	r3, [r7, #3]
	if (p_usartx->SR & flag)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <get_flag_status+0x1c>
	{
		return 1;
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <get_flag_status+0x1e>
	}
	else
	{
		return 0;
 8006586:	2300      	movs	r3, #0
	}
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr
	...

08006594 <usart_interrupt_handling>:

}


void usart_interrupt_handling(usart_handle *p_usart_handle)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) == 1)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2140      	movs	r1, #64	@ 0x40
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff ffe1 	bl	800656a <get_flag_status>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d128      	bne.n	8006600 <usart_interrupt_handling+0x6c>
	{
		tc_buffer[tc_buffer_index++] = *(p_usart_handle->tx_buffer);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695a      	ldr	r2, [r3, #20]
 80065b2:	4b7c      	ldr	r3, [pc, #496]	@ (80067a4 <usart_interrupt_handling+0x210>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	1c59      	adds	r1, r3, #1
 80065b8:	b2c8      	uxtb	r0, r1
 80065ba:	497a      	ldr	r1, [pc, #488]	@ (80067a4 <usart_interrupt_handling+0x210>)
 80065bc:	7008      	strb	r0, [r1, #0]
 80065be:	4619      	mov	r1, r3
 80065c0:	7812      	ldrb	r2, [r2, #0]
 80065c2:	4b79      	ldr	r3, [pc, #484]	@ (80067a8 <usart_interrupt_handling+0x214>)
 80065c4:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) == '\0')
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d117      	bne.n	8006600 <usart_interrupt_handling+0x6c>
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065de:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TC_INTERRUPT_EN);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065ee:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0208 	bic.w	r2, r2, #8
 80065fe:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2180      	movs	r1, #128	@ 0x80
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff ffaf 	bl	800656a <get_flag_status>
 800660c:	4603      	mov	r3, r0
 800660e:	2b01      	cmp	r3, #1
 8006610:	d158      	bne.n	80066c4 <usart_interrupt_handling+0x130>
	{
		txe_counter++;
 8006612:	4b66      	ldr	r3, [pc, #408]	@ (80067ac <usart_interrupt_handling+0x218>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	3301      	adds	r3, #1
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4b64      	ldr	r3, [pc, #400]	@ (80067ac <usart_interrupt_handling+0x218>)
 800661c:	701a      	strb	r2, [r3, #0]
		txe_buffer[txe_buffer_index++] = *(p_usart_handle->tx_buffer);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695a      	ldr	r2, [r3, #20]
 8006622:	4b63      	ldr	r3, [pc, #396]	@ (80067b0 <usart_interrupt_handling+0x21c>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	b2c8      	uxtb	r0, r1
 800662a:	4961      	ldr	r1, [pc, #388]	@ (80067b0 <usart_interrupt_handling+0x21c>)
 800662c:	7008      	strb	r0, [r1, #0]
 800662e:	4619      	mov	r1, r3
 8006630:	7812      	ldrb	r2, [r2, #0]
 8006632:	4b60      	ldr	r3, [pc, #384]	@ (80067b4 <usart_interrupt_handling+0x220>)
 8006634:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) != '\0')
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d039      	beq.n	80066b4 <usart_interrupt_handling+0x120>
		{
			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	791b      	ldrb	r3, [r3, #4]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d125      	bne.n	8006694 <usart_interrupt_handling+0x100>
			{
				// IF Parity DISABLED
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d115      	bne.n	800667c <usart_interrupt_handling+0xe8>
				{
					uint16_t *p_data = (uint16_t*)p_usart_handle->tx_buffer;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	60fb      	str	r3, [r7, #12]
					p_usart_handle->add_of_usartx->DR = (*(p_data) & (uint16_t)0x1FF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006664:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	615a      	str	r2, [r3, #20]
					p_usart_handle->tx_buffer++;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	615a      	str	r2, [r3, #20]
 800667a:	e023      	b.n	80066c4 <usart_interrupt_handling+0x130>
				}
				// IF Parity ENABLED
				else
				{
					p_usart_handle->add_of_usartx->DR = (*(p_usart_handle->tx_buffer) & (uint8_t)0xFF);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	781a      	ldrb	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	615a      	str	r2, [r3, #20]
 8006692:	e017      	b.n	80066c4 <usart_interrupt_handling+0x130>
				}
			}
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	791b      	ldrb	r3, [r3, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d113      	bne.n	80066c4 <usart_interrupt_handling+0x130>
			{
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	615a      	str	r2, [r3, #20]
 80066b2:	e007      	b.n	80066c4 <usart_interrupt_handling+0x130>
			}
		}
		else
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066c2:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_RXNE) == 1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2120      	movs	r1, #32
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff ff4d 	bl	800656a <get_flag_status>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d161      	bne.n	800679a <usart_interrupt_handling+0x206>
	{
		if (p_usart_handle->rx_len > 0)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7f5b      	ldrb	r3, [r3, #29]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d051      	beq.n	8006782 <usart_interrupt_handling+0x1ee>
		{
			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	791b      	ldrb	r3, [r3, #4]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d125      	bne.n	8006732 <usart_interrupt_handling+0x19e>
			{
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d114      	bne.n	8006718 <usart_interrupt_handling+0x184>
				{
					//*((uint16_t*)(p_usart_handle->rx_buffer)) = ((uint16_t*)(p_usart_handle->add_of_usartx->DR & 0x1FF));
					*((uint16_t*)(p_usart_handle->rx_buffer)) = (p_usart_handle->add_of_usartx->DR & 0x1FF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066fe:	b292      	uxth	r2, r2
 8006700:	801a      	strh	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_buffer++;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	619a      	str	r2, [r3, #24]
		else if (p_usart_handle->rx_len == 0)
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
		}
	}
}
 8006716:	e040      	b.n	800679a <usart_interrupt_handling+0x206>
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	619a      	str	r2, [r3, #24]
}
 8006730:	e033      	b.n	800679a <usart_interrupt_handling+0x206>
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	791b      	ldrb	r3, [r3, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d12f      	bne.n	800679a <usart_interrupt_handling+0x206>
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d112      	bne.n	8006768 <usart_interrupt_handling+0x1d4>
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_len--;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	7f5b      	ldrb	r3, [r3, #29]
 800675e:	3b01      	subs	r3, #1
 8006760:	b2da      	uxtb	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	775a      	strb	r2, [r3, #29]
}
 8006766:	e018      	b.n	800679a <usart_interrupt_handling+0x206>
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	619a      	str	r2, [r3, #24]
}
 8006780:	e00b      	b.n	800679a <usart_interrupt_handling+0x206>
		else if (p_usart_handle->rx_len == 0)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7f5b      	ldrb	r3, [r3, #29]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d107      	bne.n	800679a <usart_interrupt_handling+0x206>
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0220 	bic.w	r2, r2, #32
 8006798:	60da      	str	r2, [r3, #12]
}
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000520 	.word	0x20000520
 80067a8:	200004d0 	.word	0x200004d0
 80067ac:	20000598 	.word	0x20000598
 80067b0:	20000574 	.word	0x20000574
 80067b4:	20000524 	.word	0x20000524

080067b8 <usart_tx_en>:

void usart_tx_en(usartx_regdef_t *p_usartx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_TX_EN);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f043 0208 	orr.w	r2, r3, #8
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60da      	str	r2, [r3, #12]
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr

080067d6 <usart_rx_en>:

void usart_rx_en(usartx_regdef_t *p_usartx)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_RX_EN);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f043 0204 	orr.w	r2, r3, #4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60da      	str	r2, [r3, #12]
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr

080067f4 <usart_tx_di>:

void usart_tx_di(usartx_regdef_t *p_usartx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f023 0208 	bic.w	r2, r3, #8
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60da      	str	r2, [r3, #12]
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr
	...

08006814 <usart_dma_mode_en_di>:
{
	p_usartx->CR1 &= ~(1 << USART_CR1_RX_EN);
}

void usart_dma_mode_en_di(usartx_regdef_t *p_usartx,uint8_t en_di)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
	switch(en_di){
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	2b03      	cmp	r3, #3
 8006824:	d826      	bhi.n	8006874 <usart_dma_mode_en_di+0x60>
 8006826:	a201      	add	r2, pc, #4	@ (adr r2, 800682c <usart_dma_mode_en_di+0x18>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	0800683d 	.word	0x0800683d
 8006830:	0800684b 	.word	0x0800684b
 8006834:	08006859 	.word	0x08006859
 8006838:	08006867 	.word	0x08006867
	case USARTx_DMA_TRANSMITTER_EN:
		p_usartx->CR3 |= USARTx_DMA_TRANSMITTER_EN_POS;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	615a      	str	r2, [r3, #20]
		break;
 8006848:	e014      	b.n	8006874 <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_TRANSMITTER_DI:
		p_usartx->CR3 &= USARTx_DMA_TRANSMITTER_DI_POS;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	615a      	str	r2, [r3, #20]
		break;
 8006856:	e00d      	b.n	8006874 <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_RECEIVER_EN:
		p_usartx->CR3 |= USARTx_DMA_RECEIVER_EN_POS;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	615a      	str	r2, [r3, #20]
		break;
 8006864:	e006      	b.n	8006874 <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_RECEIVER_DI:
		p_usartx->CR3 &= USARTx_DMA_RECEIVER_DI_POS;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	615a      	str	r2, [r3, #20]
		break;
 8006872:	bf00      	nop
	}
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop

08006880 <USART2_IRQHandler>:
	dma_channel_en(DMA1,7,1);


}
void USART2_IRQHandler(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
	usart_interrupt_handling(&usart_2_handle);
 8006884:	4802      	ldr	r0, [pc, #8]	@ (8006890 <USART2_IRQHandler+0x10>)
 8006886:	f7ff fe85 	bl	8006594 <usart_interrupt_handling>
}
 800688a:	bf00      	nop
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000578 	.word	0x20000578

08006894 <mcu_init>:
 *      Author: Prashant Ajabe
 */
#include "common.h"

void mcu_init(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
	clock_init();
 8006898:	f7ff f90e 	bl	8005ab8 <clock_init>
	SCB->VTOR = 0x08004000;
 800689c:	4b08      	ldr	r3, [pc, #32]	@ (80068c0 <mcu_init+0x2c>)
 800689e:	4a09      	ldr	r2, [pc, #36]	@ (80068c4 <mcu_init+0x30>)
 80068a0:	609a      	str	r2, [r3, #8]
	io_init();
 80068a2:	f7ff fb47 	bl	8005f34 <io_init>

	uart_x_configure_parameter(&usart_2_handle);
 80068a6:	4808      	ldr	r0, [pc, #32]	@ (80068c8 <mcu_init+0x34>)
 80068a8:	f7ff fcda 	bl	8006260 <uart_x_configure_parameter>
	usart_init(&usart_2_handle);
 80068ac:	4806      	ldr	r0, [pc, #24]	@ (80068c8 <mcu_init+0x34>)
 80068ae:	f7ff fcff 	bl	80062b0 <usart_init>

	hal_can_init(&can_configuration);
 80068b2:	4806      	ldr	r0, [pc, #24]	@ (80068cc <mcu_init+0x38>)
 80068b4:	f7fe fd2a 	bl	800530c <hal_can_init>

	systick_init();
 80068b8:	f7ff fc96 	bl	80061e8 <systick_init>

}
 80068bc:	bf00      	nop
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	e000ed00 	.word	0xe000ed00
 80068c4:	08004000 	.word	0x08004000
 80068c8:	20000578 	.word	0x20000578
 80068cc:	200002bc 	.word	0x200002bc

080068d0 <round_off>:

uint32_t round_off(float number)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	float fraction;
	uint8_t carry;
	uint32_t realPart = (int)number;
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fe fb6d 	bl	8004fb8 <__aeabi_f2iz>
 80068de:	4603      	mov	r3, r0
 80068e0:	613b      	str	r3, [r7, #16]
	fraction = number - (int)number;
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fe fb68 	bl	8004fb8 <__aeabi_f2iz>
 80068e8:	4603      	mov	r3, r0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fa9a 	bl	8004e24 <__aeabi_i2f>
 80068f0:	4603      	mov	r3, r0
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7fe f9df 	bl	8004cb8 <__aeabi_fsub>
 80068fa:	4603      	mov	r3, r0
 80068fc:	60fb      	str	r3, [r7, #12]
	if (fraction < 0.50)
 80068fe:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7fe fb30 	bl	8004f68 <__aeabi_fcmplt>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <round_off+0x44>
	{
		carry = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]
 8006912:	e009      	b.n	8006928 <round_off+0x58>
	}
	else if (fraction >= 0.50)
 8006914:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7fe fb39 	bl	8004f90 <__aeabi_fcmpge>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <round_off+0x58>
	{
		carry = 1;
 8006924:	2301      	movs	r3, #1
 8006926:	75fb      	strb	r3, [r7, #23]
	}

	return (realPart + (uint32_t)carry);
 8006928:	7dfa      	ldrb	r2, [r7, #23]
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	4413      	add	r3, r2
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <print_msg>:


void print_msg(char* format,...)
{
 8006938:	b40f      	push	{r0, r1, r2, r3}
 800693a:	b580      	push	{r7, lr}
 800693c:	b096      	sub	sp, #88	@ 0x58
 800693e:	af00      	add	r7, sp, #0
	char str[80];
	va_list args;
	va_start(args,format);
 8006940:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006944:	607b      	str	r3, [r7, #4]
	vsprintf(str,format,args);
 8006946:	f107 0308 	add.w	r3, r7, #8
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fee0 	bl	8007714 <vsiprintf>
	usart_2_handle.tx_buffer = &(str);
 8006954:	4a06      	ldr	r2, [pc, #24]	@ (8006970 <print_msg+0x38>)
 8006956:	f107 0308 	add.w	r3, r7, #8
 800695a:	6153      	str	r3, [r2, #20]
	usart_write_polling(&usart_2_handle);
 800695c:	4804      	ldr	r0, [pc, #16]	@ (8006970 <print_msg+0x38>)
 800695e:	f7ff fd4d 	bl	80063fc <usart_write_polling>
}
 8006962:	bf00      	nop
 8006964:	3758      	adds	r7, #88	@ 0x58
 8006966:	46bd      	mov	sp, r7
 8006968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800696c:	b004      	add	sp, #16
 800696e:	4770      	bx	lr
 8006970:	20000578 	.word	0x20000578

08006974 <app_rx0_handler>:
 */

#include "app.h"

void app_rx0_handler(const can_rx_frame_t* msg)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	print_msg("ID:0x%x \r\n",msg->id);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4619      	mov	r1, r3
 8006982:	4813      	ldr	r0, [pc, #76]	@ (80069d0 <app_rx0_handler+0x5c>)
 8006984:	f7ff ffd8 	bl	8006938 <print_msg>

	print_msg("INDEX:0x%x \r\n",msg->filter_match_index);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	795b      	ldrb	r3, [r3, #5]
 800698c:	4619      	mov	r1, r3
 800698e:	4811      	ldr	r0, [pc, #68]	@ (80069d4 <app_rx0_handler+0x60>)
 8006990:	f7ff ffd2 	bl	8006938 <print_msg>

	print_msg("Data: ");
 8006994:	4810      	ldr	r0, [pc, #64]	@ (80069d8 <app_rx0_handler+0x64>)
 8006996:	f7ff ffcf 	bl	8006938 <print_msg>
	for(uint8_t i = 0; i < msg->length;i++)
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]
 800699e:	e00a      	b.n	80069b6 <app_rx0_handler+0x42>
	{
		print_msg("%c",msg->data_8[i]);
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	4413      	add	r3, r2
 80069a6:	7b1b      	ldrb	r3, [r3, #12]
 80069a8:	4619      	mov	r1, r3
 80069aa:	480c      	ldr	r0, [pc, #48]	@ (80069dc <app_rx0_handler+0x68>)
 80069ac:	f7ff ffc4 	bl	8006938 <print_msg>
	for(uint8_t i = 0; i < msg->length;i++)
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	3301      	adds	r3, #1
 80069b4:	73fb      	strb	r3, [r7, #15]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	791b      	ldrb	r3, [r3, #4]
 80069ba:	7bfa      	ldrb	r2, [r7, #15]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d3ef      	bcc.n	80069a0 <app_rx0_handler+0x2c>
	}
	print_msg("\r\n");
 80069c0:	4807      	ldr	r0, [pc, #28]	@ (80069e0 <app_rx0_handler+0x6c>)
 80069c2:	f7ff ffb9 	bl	8006938 <print_msg>
}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	080098e8 	.word	0x080098e8
 80069d4:	080098f4 	.word	0x080098f4
 80069d8:	08009904 	.word	0x08009904
 80069dc:	0800990c 	.word	0x0800990c
 80069e0:	08009910 	.word	0x08009910

080069e4 <main>:
#define LED_TOGGLE()        io_toggle(IO_TEST_LED)



int main(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
	float temp = 100.0;
 80069ea:	4b12      	ldr	r3, [pc, #72]	@ (8006a34 <main+0x50>)
 80069ec:	60bb      	str	r3, [r7, #8]
	mcu_init();
 80069ee:	f7ff ff51 	bl	8006894 <mcu_init>

	uint32_t base_addr = SCB->VTOR;
 80069f2:	4b11      	ldr	r3, [pc, #68]	@ (8006a38 <main+0x54>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	607b      	str	r3, [r7, #4]
	print_msg("Base Addr: %x \r\n",base_addr);
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4810      	ldr	r0, [pc, #64]	@ (8006a3c <main+0x58>)
 80069fc:	f7ff ff9c 	bl	8006938 <print_msg>
	register_rx0_callback(app_rx0_handler);
 8006a00:	480f      	ldr	r0, [pc, #60]	@ (8006a40 <main+0x5c>)
 8006a02:	f7ff f829 	bl	8005a58 <register_rx0_callback>

	//sprintf(tx_buffer_data,"EMBEDDED");
	//hal_can_transmit(CAN1,&tx_buffer_data,8,0,0,0x2A);
	for(uint32_t i = 0; i < 100000;i++);
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e002      	b.n	8006a12 <main+0x2e>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a0b      	ldr	r2, [pc, #44]	@ (8006a44 <main+0x60>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d9f8      	bls.n	8006a0c <main+0x28>
//		for (uint8_t i; i < 5;i++)
//		{
//			print_msg("received data:%d",rx_buffer_data[i]);
//		}

		if (counter_led_toggle >= 1000)
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a48 <main+0x64>)
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a22:	d3fa      	bcc.n	8006a1a <main+0x36>
		{
			counter_led_toggle = 0;
 8006a24:	4b08      	ldr	r3, [pc, #32]	@ (8006a48 <main+0x64>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	801a      	strh	r2, [r3, #0]
			LED_TOGGLE();
 8006a2a:	202d      	movs	r0, #45	@ 0x2d
 8006a2c:	f7ff fb7e 	bl	800612c <io_toggle>
		if (counter_led_toggle >= 1000)
 8006a30:	e7f3      	b.n	8006a1a <main+0x36>
 8006a32:	bf00      	nop
 8006a34:	42c80000 	.word	0x42c80000
 8006a38:	e000ed00 	.word	0xe000ed00
 8006a3c:	08009914 	.word	0x08009914
 8006a40:	08006975 	.word	0x08006975
 8006a44:	0001869f 	.word	0x0001869f
 8006a48:	2000042a 	.word	0x2000042a

08006a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
	return 1;
 8006a50:	2301      	movs	r3, #1
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <_kill>:

int _kill(int pid, int sig)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006a64:	f000 feb2 	bl	80077cc <__errno>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2216      	movs	r2, #22
 8006a6c:	601a      	str	r2, [r3, #0]
	return -1;
 8006a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <_exit>:

void _exit (int status)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006a82:	f04f 31ff 	mov.w	r1, #4294967295
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff ffe7 	bl	8006a5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8006a8c:	bf00      	nop
 8006a8e:	e7fd      	b.n	8006a8c <_exit+0x12>

08006a90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e00a      	b.n	8006ab8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006aa2:	f3af 8000 	nop.w
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	60ba      	str	r2, [r7, #8]
 8006aae:	b2ca      	uxtb	r2, r1
 8006ab0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	dbf0      	blt.n	8006aa2 <_read+0x12>
	}

return len;
 8006ac0:	687b      	ldr	r3, [r7, #4]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b086      	sub	sp, #24
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	e009      	b.n	8006af0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	60ba      	str	r2, [r7, #8]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	3301      	adds	r3, #1
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	dbf1      	blt.n	8006adc <_write+0x12>
	}
	return len;
 8006af8:	687b      	ldr	r3, [r7, #4]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <_close>:

int _close(int file)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
	return -1;
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006b28:	605a      	str	r2, [r3, #4]
	return 0;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr

08006b36 <_isatty>:

int _isatty(int file)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8006b3e:	2301      	movs	r3, #1
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr

08006b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
	return 0;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr
	...

08006b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006b6c:	4a14      	ldr	r2, [pc, #80]	@ (8006bc0 <_sbrk+0x5c>)
 8006b6e:	4b15      	ldr	r3, [pc, #84]	@ (8006bc4 <_sbrk+0x60>)
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b78:	4b13      	ldr	r3, [pc, #76]	@ (8006bc8 <_sbrk+0x64>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b80:	4b11      	ldr	r3, [pc, #68]	@ (8006bc8 <_sbrk+0x64>)
 8006b82:	4a12      	ldr	r2, [pc, #72]	@ (8006bcc <_sbrk+0x68>)
 8006b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b86:	4b10      	ldr	r3, [pc, #64]	@ (8006bc8 <_sbrk+0x64>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d207      	bcs.n	8006ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b94:	f000 fe1a 	bl	80077cc <__errno>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	220c      	movs	r2, #12
 8006b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba2:	e009      	b.n	8006bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ba4:	4b08      	ldr	r3, [pc, #32]	@ (8006bc8 <_sbrk+0x64>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006baa:	4b07      	ldr	r3, [pc, #28]	@ (8006bc8 <_sbrk+0x64>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	4a05      	ldr	r2, [pc, #20]	@ (8006bc8 <_sbrk+0x64>)
 8006bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20005000 	.word	0x20005000
 8006bc4:	00000400 	.word	0x00000400
 8006bc8:	2000059c 	.word	0x2000059c
 8006bcc:	200006f0 	.word	0x200006f0

08006bd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006bd0:	480d      	ldr	r0, [pc, #52]	@ (8006c08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006bd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006bd4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006bd8:	480c      	ldr	r0, [pc, #48]	@ (8006c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8006bda:	490d      	ldr	r1, [pc, #52]	@ (8006c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8006c14 <LoopForever+0xe>)
  movs r3, #0
 8006bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006be0:	e002      	b.n	8006be8 <LoopCopyDataInit>

08006be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006be6:	3304      	adds	r3, #4

08006be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bec:	d3f9      	bcc.n	8006be2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bee:	4a0a      	ldr	r2, [pc, #40]	@ (8006c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8006c1c <LoopForever+0x16>)
  movs r3, #0
 8006bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006bf4:	e001      	b.n	8006bfa <LoopFillZerobss>

08006bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bf8:	3204      	adds	r2, #4

08006bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006bfc:	d3fb      	bcc.n	8006bf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006bfe:	f000 fdeb 	bl	80077d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006c02:	f7ff feef 	bl	80069e4 <main>

08006c06 <LoopForever>:

LoopForever:
    b LoopForever
 8006c06:	e7fe      	b.n	8006c06 <LoopForever>
  ldr   r0, =_estack
 8006c08:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c10:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8006c14:	08009ca8 	.word	0x08009ca8
  ldr r2, =_sbss
 8006c18:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 8006c1c:	200006ec 	.word	0x200006ec

08006c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006c20:	e7fe      	b.n	8006c20 <ADC1_2_IRQHandler>

08006c22 <__cvt>:
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c28:	461d      	mov	r5, r3
 8006c2a:	bfbb      	ittet	lt
 8006c2c:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006c30:	461d      	movlt	r5, r3
 8006c32:	2300      	movge	r3, #0
 8006c34:	232d      	movlt	r3, #45	@ 0x2d
 8006c36:	b088      	sub	sp, #32
 8006c38:	4614      	mov	r4, r2
 8006c3a:	bfb8      	it	lt
 8006c3c:	4614      	movlt	r4, r2
 8006c3e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c40:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006c42:	7013      	strb	r3, [r2, #0]
 8006c44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c46:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006c4a:	f023 0820 	bic.w	r8, r3, #32
 8006c4e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c52:	d005      	beq.n	8006c60 <__cvt+0x3e>
 8006c54:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c58:	d100      	bne.n	8006c5c <__cvt+0x3a>
 8006c5a:	3601      	adds	r6, #1
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e000      	b.n	8006c62 <__cvt+0x40>
 8006c60:	2303      	movs	r3, #3
 8006c62:	aa07      	add	r2, sp, #28
 8006c64:	9204      	str	r2, [sp, #16]
 8006c66:	aa06      	add	r2, sp, #24
 8006c68:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c6c:	e9cd 3600 	strd	r3, r6, [sp]
 8006c70:	4622      	mov	r2, r4
 8006c72:	462b      	mov	r3, r5
 8006c74:	f000 fe70 	bl	8007958 <_dtoa_r>
 8006c78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	d119      	bne.n	8006cb4 <__cvt+0x92>
 8006c80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c82:	07db      	lsls	r3, r3, #31
 8006c84:	d50e      	bpl.n	8006ca4 <__cvt+0x82>
 8006c86:	eb00 0906 	add.w	r9, r0, r6
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7fd ff4d 	bl	8004b30 <__aeabi_dcmpeq>
 8006c96:	b108      	cbz	r0, 8006c9c <__cvt+0x7a>
 8006c98:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c9c:	2230      	movs	r2, #48	@ 0x30
 8006c9e:	9b07      	ldr	r3, [sp, #28]
 8006ca0:	454b      	cmp	r3, r9
 8006ca2:	d31e      	bcc.n	8006ce2 <__cvt+0xc0>
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	9b07      	ldr	r3, [sp, #28]
 8006ca8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006caa:	1bdb      	subs	r3, r3, r7
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	b008      	add	sp, #32
 8006cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006cb8:	eb00 0906 	add.w	r9, r0, r6
 8006cbc:	d1e5      	bne.n	8006c8a <__cvt+0x68>
 8006cbe:	7803      	ldrb	r3, [r0, #0]
 8006cc0:	2b30      	cmp	r3, #48	@ 0x30
 8006cc2:	d10a      	bne.n	8006cda <__cvt+0xb8>
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	4620      	mov	r0, r4
 8006cca:	4629      	mov	r1, r5
 8006ccc:	f7fd ff30 	bl	8004b30 <__aeabi_dcmpeq>
 8006cd0:	b918      	cbnz	r0, 8006cda <__cvt+0xb8>
 8006cd2:	f1c6 0601 	rsb	r6, r6, #1
 8006cd6:	f8ca 6000 	str.w	r6, [sl]
 8006cda:	f8da 3000 	ldr.w	r3, [sl]
 8006cde:	4499      	add	r9, r3
 8006ce0:	e7d3      	b.n	8006c8a <__cvt+0x68>
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	9107      	str	r1, [sp, #28]
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	e7d9      	b.n	8006c9e <__cvt+0x7c>

08006cea <__exponent>:
 8006cea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cec:	2900      	cmp	r1, #0
 8006cee:	bfb6      	itet	lt
 8006cf0:	232d      	movlt	r3, #45	@ 0x2d
 8006cf2:	232b      	movge	r3, #43	@ 0x2b
 8006cf4:	4249      	neglt	r1, r1
 8006cf6:	2909      	cmp	r1, #9
 8006cf8:	7002      	strb	r2, [r0, #0]
 8006cfa:	7043      	strb	r3, [r0, #1]
 8006cfc:	dd29      	ble.n	8006d52 <__exponent+0x68>
 8006cfe:	f10d 0307 	add.w	r3, sp, #7
 8006d02:	461d      	mov	r5, r3
 8006d04:	270a      	movs	r7, #10
 8006d06:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	fb07 1416 	mls	r4, r7, r6, r1
 8006d10:	3430      	adds	r4, #48	@ 0x30
 8006d12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d16:	460c      	mov	r4, r1
 8006d18:	2c63      	cmp	r4, #99	@ 0x63
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d20:	dcf1      	bgt.n	8006d06 <__exponent+0x1c>
 8006d22:	3130      	adds	r1, #48	@ 0x30
 8006d24:	1e94      	subs	r4, r2, #2
 8006d26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	1c41      	adds	r1, r0, #1
 8006d2e:	42ab      	cmp	r3, r5
 8006d30:	d30a      	bcc.n	8006d48 <__exponent+0x5e>
 8006d32:	f10d 0309 	add.w	r3, sp, #9
 8006d36:	1a9b      	subs	r3, r3, r2
 8006d38:	42ac      	cmp	r4, r5
 8006d3a:	bf88      	it	hi
 8006d3c:	2300      	movhi	r3, #0
 8006d3e:	3302      	adds	r3, #2
 8006d40:	4403      	add	r3, r0
 8006d42:	1a18      	subs	r0, r3, r0
 8006d44:	b003      	add	sp, #12
 8006d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d50:	e7ed      	b.n	8006d2e <__exponent+0x44>
 8006d52:	2330      	movs	r3, #48	@ 0x30
 8006d54:	3130      	adds	r1, #48	@ 0x30
 8006d56:	7083      	strb	r3, [r0, #2]
 8006d58:	70c1      	strb	r1, [r0, #3]
 8006d5a:	1d03      	adds	r3, r0, #4
 8006d5c:	e7f1      	b.n	8006d42 <__exponent+0x58>
	...

08006d60 <_printf_float>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	b091      	sub	sp, #68	@ 0x44
 8006d66:	460c      	mov	r4, r1
 8006d68:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	461f      	mov	r7, r3
 8006d70:	4605      	mov	r5, r0
 8006d72:	f000 fce1 	bl	8007738 <_localeconv_r>
 8006d76:	6803      	ldr	r3, [r0, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	9308      	str	r3, [sp, #32]
 8006d7c:	f7fd f9f8 	bl	8004170 <strlen>
 8006d80:	2300      	movs	r3, #0
 8006d82:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d84:	f8d8 3000 	ldr.w	r3, [r8]
 8006d88:	9009      	str	r0, [sp, #36]	@ 0x24
 8006d8a:	3307      	adds	r3, #7
 8006d8c:	f023 0307 	bic.w	r3, r3, #7
 8006d90:	f103 0208 	add.w	r2, r3, #8
 8006d94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d98:	f8d4 b000 	ldr.w	fp, [r4]
 8006d9c:	f8c8 2000 	str.w	r2, [r8]
 8006da0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006da4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006da8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006daa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295
 8006db2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006db6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006dba:	4b9c      	ldr	r3, [pc, #624]	@ (800702c <_printf_float+0x2cc>)
 8006dbc:	f7fd feea 	bl	8004b94 <__aeabi_dcmpun>
 8006dc0:	bb70      	cbnz	r0, 8006e20 <_printf_float+0xc0>
 8006dc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	4b98      	ldr	r3, [pc, #608]	@ (800702c <_printf_float+0x2cc>)
 8006dcc:	f7fd fec4 	bl	8004b58 <__aeabi_dcmple>
 8006dd0:	bb30      	cbnz	r0, 8006e20 <_printf_float+0xc0>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	4649      	mov	r1, r9
 8006dda:	f7fd feb3 	bl	8004b44 <__aeabi_dcmplt>
 8006dde:	b110      	cbz	r0, 8006de6 <_printf_float+0x86>
 8006de0:	232d      	movs	r3, #45	@ 0x2d
 8006de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de6:	4a92      	ldr	r2, [pc, #584]	@ (8007030 <_printf_float+0x2d0>)
 8006de8:	4b92      	ldr	r3, [pc, #584]	@ (8007034 <_printf_float+0x2d4>)
 8006dea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006dee:	bf94      	ite	ls
 8006df0:	4690      	movls	r8, r2
 8006df2:	4698      	movhi	r8, r3
 8006df4:	2303      	movs	r3, #3
 8006df6:	f04f 0900 	mov.w	r9, #0
 8006dfa:	6123      	str	r3, [r4, #16]
 8006dfc:	f02b 0304 	bic.w	r3, fp, #4
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	4633      	mov	r3, r6
 8006e04:	4621      	mov	r1, r4
 8006e06:	4628      	mov	r0, r5
 8006e08:	9700      	str	r7, [sp, #0]
 8006e0a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006e0c:	f000 f9d4 	bl	80071b8 <_printf_common>
 8006e10:	3001      	adds	r0, #1
 8006e12:	f040 8090 	bne.w	8006f36 <_printf_float+0x1d6>
 8006e16:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1a:	b011      	add	sp, #68	@ 0x44
 8006e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	4640      	mov	r0, r8
 8006e26:	4649      	mov	r1, r9
 8006e28:	f7fd feb4 	bl	8004b94 <__aeabi_dcmpun>
 8006e2c:	b148      	cbz	r0, 8006e42 <_printf_float+0xe2>
 8006e2e:	464b      	mov	r3, r9
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bfb8      	it	lt
 8006e34:	232d      	movlt	r3, #45	@ 0x2d
 8006e36:	4a80      	ldr	r2, [pc, #512]	@ (8007038 <_printf_float+0x2d8>)
 8006e38:	bfb8      	it	lt
 8006e3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800703c <_printf_float+0x2dc>)
 8006e40:	e7d3      	b.n	8006dea <_printf_float+0x8a>
 8006e42:	6863      	ldr	r3, [r4, #4]
 8006e44:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	d13f      	bne.n	8006ecc <_printf_float+0x16c>
 8006e4c:	2306      	movs	r3, #6
 8006e4e:	6063      	str	r3, [r4, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	9206      	str	r2, [sp, #24]
 8006e5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8006e5c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006e60:	aa0d      	add	r2, sp, #52	@ 0x34
 8006e62:	9203      	str	r2, [sp, #12]
 8006e64:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006e68:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e6c:	6863      	ldr	r3, [r4, #4]
 8006e6e:	4642      	mov	r2, r8
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	4628      	mov	r0, r5
 8006e74:	464b      	mov	r3, r9
 8006e76:	910a      	str	r1, [sp, #40]	@ 0x28
 8006e78:	f7ff fed3 	bl	8006c22 <__cvt>
 8006e7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e7e:	4680      	mov	r8, r0
 8006e80:	2947      	cmp	r1, #71	@ 0x47
 8006e82:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006e84:	d128      	bne.n	8006ed8 <_printf_float+0x178>
 8006e86:	1cc8      	adds	r0, r1, #3
 8006e88:	db02      	blt.n	8006e90 <_printf_float+0x130>
 8006e8a:	6863      	ldr	r3, [r4, #4]
 8006e8c:	4299      	cmp	r1, r3
 8006e8e:	dd40      	ble.n	8006f12 <_printf_float+0x1b2>
 8006e90:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e94:	fa5f fa8a 	uxtb.w	sl, sl
 8006e98:	4652      	mov	r2, sl
 8006e9a:	3901      	subs	r1, #1
 8006e9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ea0:	910d      	str	r1, [sp, #52]	@ 0x34
 8006ea2:	f7ff ff22 	bl	8006cea <__exponent>
 8006ea6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ea8:	4681      	mov	r9, r0
 8006eaa:	1813      	adds	r3, r2, r0
 8006eac:	2a01      	cmp	r2, #1
 8006eae:	6123      	str	r3, [r4, #16]
 8006eb0:	dc02      	bgt.n	8006eb8 <_printf_float+0x158>
 8006eb2:	6822      	ldr	r2, [r4, #0]
 8006eb4:	07d2      	lsls	r2, r2, #31
 8006eb6:	d501      	bpl.n	8006ebc <_printf_float+0x15c>
 8006eb8:	3301      	adds	r3, #1
 8006eba:	6123      	str	r3, [r4, #16]
 8006ebc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d09e      	beq.n	8006e02 <_printf_float+0xa2>
 8006ec4:	232d      	movs	r3, #45	@ 0x2d
 8006ec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006eca:	e79a      	b.n	8006e02 <_printf_float+0xa2>
 8006ecc:	2947      	cmp	r1, #71	@ 0x47
 8006ece:	d1bf      	bne.n	8006e50 <_printf_float+0xf0>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1bd      	bne.n	8006e50 <_printf_float+0xf0>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e7ba      	b.n	8006e4e <_printf_float+0xee>
 8006ed8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006edc:	d9dc      	bls.n	8006e98 <_printf_float+0x138>
 8006ede:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006ee2:	d118      	bne.n	8006f16 <_printf_float+0x1b6>
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	6863      	ldr	r3, [r4, #4]
 8006ee8:	dd0b      	ble.n	8006f02 <_printf_float+0x1a2>
 8006eea:	6121      	str	r1, [r4, #16]
 8006eec:	b913      	cbnz	r3, 8006ef4 <_printf_float+0x194>
 8006eee:	6822      	ldr	r2, [r4, #0]
 8006ef0:	07d0      	lsls	r0, r2, #31
 8006ef2:	d502      	bpl.n	8006efa <_printf_float+0x19a>
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	440b      	add	r3, r1
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	f04f 0900 	mov.w	r9, #0
 8006efe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006f00:	e7dc      	b.n	8006ebc <_printf_float+0x15c>
 8006f02:	b913      	cbnz	r3, 8006f0a <_printf_float+0x1aa>
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	07d2      	lsls	r2, r2, #31
 8006f08:	d501      	bpl.n	8006f0e <_printf_float+0x1ae>
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	e7f4      	b.n	8006ef8 <_printf_float+0x198>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e7f2      	b.n	8006ef8 <_printf_float+0x198>
 8006f12:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	db05      	blt.n	8006f28 <_printf_float+0x1c8>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	6121      	str	r1, [r4, #16]
 8006f20:	07d8      	lsls	r0, r3, #31
 8006f22:	d5ea      	bpl.n	8006efa <_printf_float+0x19a>
 8006f24:	1c4b      	adds	r3, r1, #1
 8006f26:	e7e7      	b.n	8006ef8 <_printf_float+0x198>
 8006f28:	2900      	cmp	r1, #0
 8006f2a:	bfcc      	ite	gt
 8006f2c:	2201      	movgt	r2, #1
 8006f2e:	f1c1 0202 	rsble	r2, r1, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	e7e0      	b.n	8006ef8 <_printf_float+0x198>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	055a      	lsls	r2, r3, #21
 8006f3a:	d407      	bmi.n	8006f4c <_printf_float+0x1ec>
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	4642      	mov	r2, r8
 8006f40:	4631      	mov	r1, r6
 8006f42:	4628      	mov	r0, r5
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	d12b      	bne.n	8006fa2 <_printf_float+0x242>
 8006f4a:	e764      	b.n	8006e16 <_printf_float+0xb6>
 8006f4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f50:	f240 80dc 	bls.w	800710c <_printf_float+0x3ac>
 8006f54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f7fd fde8 	bl	8004b30 <__aeabi_dcmpeq>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d033      	beq.n	8006fcc <_printf_float+0x26c>
 8006f64:	2301      	movs	r3, #1
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	4a35      	ldr	r2, [pc, #212]	@ (8007040 <_printf_float+0x2e0>)
 8006f6c:	47b8      	blx	r7
 8006f6e:	3001      	adds	r0, #1
 8006f70:	f43f af51 	beq.w	8006e16 <_printf_float+0xb6>
 8006f74:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006f78:	4543      	cmp	r3, r8
 8006f7a:	db02      	blt.n	8006f82 <_printf_float+0x222>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	07d8      	lsls	r0, r3, #31
 8006f80:	d50f      	bpl.n	8006fa2 <_printf_float+0x242>
 8006f82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f af42 	beq.w	8006e16 <_printf_float+0xb6>
 8006f92:	f04f 0900 	mov.w	r9, #0
 8006f96:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f9a:	f104 0a1a 	add.w	sl, r4, #26
 8006f9e:	45c8      	cmp	r8, r9
 8006fa0:	dc09      	bgt.n	8006fb6 <_printf_float+0x256>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	079b      	lsls	r3, r3, #30
 8006fa6:	f100 8102 	bmi.w	80071ae <_printf_float+0x44e>
 8006faa:	68e0      	ldr	r0, [r4, #12]
 8006fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fae:	4298      	cmp	r0, r3
 8006fb0:	bfb8      	it	lt
 8006fb2:	4618      	movlt	r0, r3
 8006fb4:	e731      	b.n	8006e1a <_printf_float+0xba>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	4652      	mov	r2, sl
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f af28 	beq.w	8006e16 <_printf_float+0xb6>
 8006fc6:	f109 0901 	add.w	r9, r9, #1
 8006fca:	e7e8      	b.n	8006f9e <_printf_float+0x23e>
 8006fcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dc38      	bgt.n	8007044 <_printf_float+0x2e4>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	4a19      	ldr	r2, [pc, #100]	@ (8007040 <_printf_float+0x2e0>)
 8006fda:	47b8      	blx	r7
 8006fdc:	3001      	adds	r0, #1
 8006fde:	f43f af1a 	beq.w	8006e16 <_printf_float+0xb6>
 8006fe2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006fe6:	ea59 0303 	orrs.w	r3, r9, r3
 8006fea:	d102      	bne.n	8006ff2 <_printf_float+0x292>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	07d9      	lsls	r1, r3, #31
 8006ff0:	d5d7      	bpl.n	8006fa2 <_printf_float+0x242>
 8006ff2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f43f af0a 	beq.w	8006e16 <_printf_float+0xb6>
 8007002:	f04f 0a00 	mov.w	sl, #0
 8007006:	f104 0b1a 	add.w	fp, r4, #26
 800700a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800700c:	425b      	negs	r3, r3
 800700e:	4553      	cmp	r3, sl
 8007010:	dc01      	bgt.n	8007016 <_printf_float+0x2b6>
 8007012:	464b      	mov	r3, r9
 8007014:	e793      	b.n	8006f3e <_printf_float+0x1de>
 8007016:	2301      	movs	r3, #1
 8007018:	465a      	mov	r2, fp
 800701a:	4631      	mov	r1, r6
 800701c:	4628      	mov	r0, r5
 800701e:	47b8      	blx	r7
 8007020:	3001      	adds	r0, #1
 8007022:	f43f aef8 	beq.w	8006e16 <_printf_float+0xb6>
 8007026:	f10a 0a01 	add.w	sl, sl, #1
 800702a:	e7ee      	b.n	800700a <_printf_float+0x2aa>
 800702c:	7fefffff 	.word	0x7fefffff
 8007030:	08009925 	.word	0x08009925
 8007034:	08009929 	.word	0x08009929
 8007038:	0800992d 	.word	0x0800992d
 800703c:	08009931 	.word	0x08009931
 8007040:	08009935 	.word	0x08009935
 8007044:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007046:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800704a:	4553      	cmp	r3, sl
 800704c:	bfa8      	it	ge
 800704e:	4653      	movge	r3, sl
 8007050:	2b00      	cmp	r3, #0
 8007052:	4699      	mov	r9, r3
 8007054:	dc36      	bgt.n	80070c4 <_printf_float+0x364>
 8007056:	f04f 0b00 	mov.w	fp, #0
 800705a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800705e:	f104 021a 	add.w	r2, r4, #26
 8007062:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007064:	930a      	str	r3, [sp, #40]	@ 0x28
 8007066:	eba3 0309 	sub.w	r3, r3, r9
 800706a:	455b      	cmp	r3, fp
 800706c:	dc31      	bgt.n	80070d2 <_printf_float+0x372>
 800706e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007070:	459a      	cmp	sl, r3
 8007072:	dc3a      	bgt.n	80070ea <_printf_float+0x38a>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	07da      	lsls	r2, r3, #31
 8007078:	d437      	bmi.n	80070ea <_printf_float+0x38a>
 800707a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800707c:	ebaa 0903 	sub.w	r9, sl, r3
 8007080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007082:	ebaa 0303 	sub.w	r3, sl, r3
 8007086:	4599      	cmp	r9, r3
 8007088:	bfa8      	it	ge
 800708a:	4699      	movge	r9, r3
 800708c:	f1b9 0f00 	cmp.w	r9, #0
 8007090:	dc33      	bgt.n	80070fa <_printf_float+0x39a>
 8007092:	f04f 0800 	mov.w	r8, #0
 8007096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800709a:	f104 0b1a 	add.w	fp, r4, #26
 800709e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070a0:	ebaa 0303 	sub.w	r3, sl, r3
 80070a4:	eba3 0309 	sub.w	r3, r3, r9
 80070a8:	4543      	cmp	r3, r8
 80070aa:	f77f af7a 	ble.w	8006fa2 <_printf_float+0x242>
 80070ae:	2301      	movs	r3, #1
 80070b0:	465a      	mov	r2, fp
 80070b2:	4631      	mov	r1, r6
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b8      	blx	r7
 80070b8:	3001      	adds	r0, #1
 80070ba:	f43f aeac 	beq.w	8006e16 <_printf_float+0xb6>
 80070be:	f108 0801 	add.w	r8, r8, #1
 80070c2:	e7ec      	b.n	800709e <_printf_float+0x33e>
 80070c4:	4642      	mov	r2, r8
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	d1c2      	bne.n	8007056 <_printf_float+0x2f6>
 80070d0:	e6a1      	b.n	8006e16 <_printf_float+0xb6>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4631      	mov	r1, r6
 80070d6:	4628      	mov	r0, r5
 80070d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80070da:	47b8      	blx	r7
 80070dc:	3001      	adds	r0, #1
 80070de:	f43f ae9a 	beq.w	8006e16 <_printf_float+0xb6>
 80070e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070e4:	f10b 0b01 	add.w	fp, fp, #1
 80070e8:	e7bb      	b.n	8007062 <_printf_float+0x302>
 80070ea:	4631      	mov	r1, r6
 80070ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070f0:	4628      	mov	r0, r5
 80070f2:	47b8      	blx	r7
 80070f4:	3001      	adds	r0, #1
 80070f6:	d1c0      	bne.n	800707a <_printf_float+0x31a>
 80070f8:	e68d      	b.n	8006e16 <_printf_float+0xb6>
 80070fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070fc:	464b      	mov	r3, r9
 80070fe:	4631      	mov	r1, r6
 8007100:	4628      	mov	r0, r5
 8007102:	4442      	add	r2, r8
 8007104:	47b8      	blx	r7
 8007106:	3001      	adds	r0, #1
 8007108:	d1c3      	bne.n	8007092 <_printf_float+0x332>
 800710a:	e684      	b.n	8006e16 <_printf_float+0xb6>
 800710c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007110:	f1ba 0f01 	cmp.w	sl, #1
 8007114:	dc01      	bgt.n	800711a <_printf_float+0x3ba>
 8007116:	07db      	lsls	r3, r3, #31
 8007118:	d536      	bpl.n	8007188 <_printf_float+0x428>
 800711a:	2301      	movs	r3, #1
 800711c:	4642      	mov	r2, r8
 800711e:	4631      	mov	r1, r6
 8007120:	4628      	mov	r0, r5
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	f43f ae76 	beq.w	8006e16 <_printf_float+0xb6>
 800712a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	f43f ae6e 	beq.w	8006e16 <_printf_float+0xb6>
 800713a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800713e:	2200      	movs	r2, #0
 8007140:	2300      	movs	r3, #0
 8007142:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007146:	f7fd fcf3 	bl	8004b30 <__aeabi_dcmpeq>
 800714a:	b9c0      	cbnz	r0, 800717e <_printf_float+0x41e>
 800714c:	4653      	mov	r3, sl
 800714e:	f108 0201 	add.w	r2, r8, #1
 8007152:	4631      	mov	r1, r6
 8007154:	4628      	mov	r0, r5
 8007156:	47b8      	blx	r7
 8007158:	3001      	adds	r0, #1
 800715a:	d10c      	bne.n	8007176 <_printf_float+0x416>
 800715c:	e65b      	b.n	8006e16 <_printf_float+0xb6>
 800715e:	2301      	movs	r3, #1
 8007160:	465a      	mov	r2, fp
 8007162:	4631      	mov	r1, r6
 8007164:	4628      	mov	r0, r5
 8007166:	47b8      	blx	r7
 8007168:	3001      	adds	r0, #1
 800716a:	f43f ae54 	beq.w	8006e16 <_printf_float+0xb6>
 800716e:	f108 0801 	add.w	r8, r8, #1
 8007172:	45d0      	cmp	r8, sl
 8007174:	dbf3      	blt.n	800715e <_printf_float+0x3fe>
 8007176:	464b      	mov	r3, r9
 8007178:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800717c:	e6e0      	b.n	8006f40 <_printf_float+0x1e0>
 800717e:	f04f 0800 	mov.w	r8, #0
 8007182:	f104 0b1a 	add.w	fp, r4, #26
 8007186:	e7f4      	b.n	8007172 <_printf_float+0x412>
 8007188:	2301      	movs	r3, #1
 800718a:	4642      	mov	r2, r8
 800718c:	e7e1      	b.n	8007152 <_printf_float+0x3f2>
 800718e:	2301      	movs	r3, #1
 8007190:	464a      	mov	r2, r9
 8007192:	4631      	mov	r1, r6
 8007194:	4628      	mov	r0, r5
 8007196:	47b8      	blx	r7
 8007198:	3001      	adds	r0, #1
 800719a:	f43f ae3c 	beq.w	8006e16 <_printf_float+0xb6>
 800719e:	f108 0801 	add.w	r8, r8, #1
 80071a2:	68e3      	ldr	r3, [r4, #12]
 80071a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80071a6:	1a5b      	subs	r3, r3, r1
 80071a8:	4543      	cmp	r3, r8
 80071aa:	dcf0      	bgt.n	800718e <_printf_float+0x42e>
 80071ac:	e6fd      	b.n	8006faa <_printf_float+0x24a>
 80071ae:	f04f 0800 	mov.w	r8, #0
 80071b2:	f104 0919 	add.w	r9, r4, #25
 80071b6:	e7f4      	b.n	80071a2 <_printf_float+0x442>

080071b8 <_printf_common>:
 80071b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071bc:	4616      	mov	r6, r2
 80071be:	4698      	mov	r8, r3
 80071c0:	688a      	ldr	r2, [r1, #8]
 80071c2:	690b      	ldr	r3, [r1, #16]
 80071c4:	4607      	mov	r7, r0
 80071c6:	4293      	cmp	r3, r2
 80071c8:	bfb8      	it	lt
 80071ca:	4613      	movlt	r3, r2
 80071cc:	6033      	str	r3, [r6, #0]
 80071ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071d2:	460c      	mov	r4, r1
 80071d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071d8:	b10a      	cbz	r2, 80071de <_printf_common+0x26>
 80071da:	3301      	adds	r3, #1
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	0699      	lsls	r1, r3, #26
 80071e2:	bf42      	ittt	mi
 80071e4:	6833      	ldrmi	r3, [r6, #0]
 80071e6:	3302      	addmi	r3, #2
 80071e8:	6033      	strmi	r3, [r6, #0]
 80071ea:	6825      	ldr	r5, [r4, #0]
 80071ec:	f015 0506 	ands.w	r5, r5, #6
 80071f0:	d106      	bne.n	8007200 <_printf_common+0x48>
 80071f2:	f104 0a19 	add.w	sl, r4, #25
 80071f6:	68e3      	ldr	r3, [r4, #12]
 80071f8:	6832      	ldr	r2, [r6, #0]
 80071fa:	1a9b      	subs	r3, r3, r2
 80071fc:	42ab      	cmp	r3, r5
 80071fe:	dc2b      	bgt.n	8007258 <_printf_common+0xa0>
 8007200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007204:	6822      	ldr	r2, [r4, #0]
 8007206:	3b00      	subs	r3, #0
 8007208:	bf18      	it	ne
 800720a:	2301      	movne	r3, #1
 800720c:	0692      	lsls	r2, r2, #26
 800720e:	d430      	bmi.n	8007272 <_printf_common+0xba>
 8007210:	4641      	mov	r1, r8
 8007212:	4638      	mov	r0, r7
 8007214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007218:	47c8      	blx	r9
 800721a:	3001      	adds	r0, #1
 800721c:	d023      	beq.n	8007266 <_printf_common+0xae>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	6922      	ldr	r2, [r4, #16]
 8007222:	f003 0306 	and.w	r3, r3, #6
 8007226:	2b04      	cmp	r3, #4
 8007228:	bf14      	ite	ne
 800722a:	2500      	movne	r5, #0
 800722c:	6833      	ldreq	r3, [r6, #0]
 800722e:	f04f 0600 	mov.w	r6, #0
 8007232:	bf08      	it	eq
 8007234:	68e5      	ldreq	r5, [r4, #12]
 8007236:	f104 041a 	add.w	r4, r4, #26
 800723a:	bf08      	it	eq
 800723c:	1aed      	subeq	r5, r5, r3
 800723e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007242:	bf08      	it	eq
 8007244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007248:	4293      	cmp	r3, r2
 800724a:	bfc4      	itt	gt
 800724c:	1a9b      	subgt	r3, r3, r2
 800724e:	18ed      	addgt	r5, r5, r3
 8007250:	42b5      	cmp	r5, r6
 8007252:	d11a      	bne.n	800728a <_printf_common+0xd2>
 8007254:	2000      	movs	r0, #0
 8007256:	e008      	b.n	800726a <_printf_common+0xb2>
 8007258:	2301      	movs	r3, #1
 800725a:	4652      	mov	r2, sl
 800725c:	4641      	mov	r1, r8
 800725e:	4638      	mov	r0, r7
 8007260:	47c8      	blx	r9
 8007262:	3001      	adds	r0, #1
 8007264:	d103      	bne.n	800726e <_printf_common+0xb6>
 8007266:	f04f 30ff 	mov.w	r0, #4294967295
 800726a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726e:	3501      	adds	r5, #1
 8007270:	e7c1      	b.n	80071f6 <_printf_common+0x3e>
 8007272:	2030      	movs	r0, #48	@ 0x30
 8007274:	18e1      	adds	r1, r4, r3
 8007276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007280:	4422      	add	r2, r4
 8007282:	3302      	adds	r3, #2
 8007284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007288:	e7c2      	b.n	8007210 <_printf_common+0x58>
 800728a:	2301      	movs	r3, #1
 800728c:	4622      	mov	r2, r4
 800728e:	4641      	mov	r1, r8
 8007290:	4638      	mov	r0, r7
 8007292:	47c8      	blx	r9
 8007294:	3001      	adds	r0, #1
 8007296:	d0e6      	beq.n	8007266 <_printf_common+0xae>
 8007298:	3601      	adds	r6, #1
 800729a:	e7d9      	b.n	8007250 <_printf_common+0x98>

0800729c <_printf_i>:
 800729c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	7e0f      	ldrb	r7, [r1, #24]
 80072a2:	4691      	mov	r9, r2
 80072a4:	2f78      	cmp	r7, #120	@ 0x78
 80072a6:	4680      	mov	r8, r0
 80072a8:	460c      	mov	r4, r1
 80072aa:	469a      	mov	sl, r3
 80072ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072b2:	d807      	bhi.n	80072c4 <_printf_i+0x28>
 80072b4:	2f62      	cmp	r7, #98	@ 0x62
 80072b6:	d80a      	bhi.n	80072ce <_printf_i+0x32>
 80072b8:	2f00      	cmp	r7, #0
 80072ba:	f000 80d3 	beq.w	8007464 <_printf_i+0x1c8>
 80072be:	2f58      	cmp	r7, #88	@ 0x58
 80072c0:	f000 80ba 	beq.w	8007438 <_printf_i+0x19c>
 80072c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072cc:	e03a      	b.n	8007344 <_printf_i+0xa8>
 80072ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072d2:	2b15      	cmp	r3, #21
 80072d4:	d8f6      	bhi.n	80072c4 <_printf_i+0x28>
 80072d6:	a101      	add	r1, pc, #4	@ (adr r1, 80072dc <_printf_i+0x40>)
 80072d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072dc:	08007335 	.word	0x08007335
 80072e0:	08007349 	.word	0x08007349
 80072e4:	080072c5 	.word	0x080072c5
 80072e8:	080072c5 	.word	0x080072c5
 80072ec:	080072c5 	.word	0x080072c5
 80072f0:	080072c5 	.word	0x080072c5
 80072f4:	08007349 	.word	0x08007349
 80072f8:	080072c5 	.word	0x080072c5
 80072fc:	080072c5 	.word	0x080072c5
 8007300:	080072c5 	.word	0x080072c5
 8007304:	080072c5 	.word	0x080072c5
 8007308:	0800744b 	.word	0x0800744b
 800730c:	08007373 	.word	0x08007373
 8007310:	08007405 	.word	0x08007405
 8007314:	080072c5 	.word	0x080072c5
 8007318:	080072c5 	.word	0x080072c5
 800731c:	0800746d 	.word	0x0800746d
 8007320:	080072c5 	.word	0x080072c5
 8007324:	08007373 	.word	0x08007373
 8007328:	080072c5 	.word	0x080072c5
 800732c:	080072c5 	.word	0x080072c5
 8007330:	0800740d 	.word	0x0800740d
 8007334:	6833      	ldr	r3, [r6, #0]
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6032      	str	r2, [r6, #0]
 800733c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007344:	2301      	movs	r3, #1
 8007346:	e09e      	b.n	8007486 <_printf_i+0x1ea>
 8007348:	6833      	ldr	r3, [r6, #0]
 800734a:	6820      	ldr	r0, [r4, #0]
 800734c:	1d19      	adds	r1, r3, #4
 800734e:	6031      	str	r1, [r6, #0]
 8007350:	0606      	lsls	r6, r0, #24
 8007352:	d501      	bpl.n	8007358 <_printf_i+0xbc>
 8007354:	681d      	ldr	r5, [r3, #0]
 8007356:	e003      	b.n	8007360 <_printf_i+0xc4>
 8007358:	0645      	lsls	r5, r0, #25
 800735a:	d5fb      	bpl.n	8007354 <_printf_i+0xb8>
 800735c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007360:	2d00      	cmp	r5, #0
 8007362:	da03      	bge.n	800736c <_printf_i+0xd0>
 8007364:	232d      	movs	r3, #45	@ 0x2d
 8007366:	426d      	negs	r5, r5
 8007368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800736c:	230a      	movs	r3, #10
 800736e:	4859      	ldr	r0, [pc, #356]	@ (80074d4 <_printf_i+0x238>)
 8007370:	e011      	b.n	8007396 <_printf_i+0xfa>
 8007372:	6821      	ldr	r1, [r4, #0]
 8007374:	6833      	ldr	r3, [r6, #0]
 8007376:	0608      	lsls	r0, r1, #24
 8007378:	f853 5b04 	ldr.w	r5, [r3], #4
 800737c:	d402      	bmi.n	8007384 <_printf_i+0xe8>
 800737e:	0649      	lsls	r1, r1, #25
 8007380:	bf48      	it	mi
 8007382:	b2ad      	uxthmi	r5, r5
 8007384:	2f6f      	cmp	r7, #111	@ 0x6f
 8007386:	6033      	str	r3, [r6, #0]
 8007388:	bf14      	ite	ne
 800738a:	230a      	movne	r3, #10
 800738c:	2308      	moveq	r3, #8
 800738e:	4851      	ldr	r0, [pc, #324]	@ (80074d4 <_printf_i+0x238>)
 8007390:	2100      	movs	r1, #0
 8007392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007396:	6866      	ldr	r6, [r4, #4]
 8007398:	2e00      	cmp	r6, #0
 800739a:	bfa8      	it	ge
 800739c:	6821      	ldrge	r1, [r4, #0]
 800739e:	60a6      	str	r6, [r4, #8]
 80073a0:	bfa4      	itt	ge
 80073a2:	f021 0104 	bicge.w	r1, r1, #4
 80073a6:	6021      	strge	r1, [r4, #0]
 80073a8:	b90d      	cbnz	r5, 80073ae <_printf_i+0x112>
 80073aa:	2e00      	cmp	r6, #0
 80073ac:	d04b      	beq.n	8007446 <_printf_i+0x1aa>
 80073ae:	4616      	mov	r6, r2
 80073b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80073b4:	fb03 5711 	mls	r7, r3, r1, r5
 80073b8:	5dc7      	ldrb	r7, [r0, r7]
 80073ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073be:	462f      	mov	r7, r5
 80073c0:	42bb      	cmp	r3, r7
 80073c2:	460d      	mov	r5, r1
 80073c4:	d9f4      	bls.n	80073b0 <_printf_i+0x114>
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d10b      	bne.n	80073e2 <_printf_i+0x146>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	07df      	lsls	r7, r3, #31
 80073ce:	d508      	bpl.n	80073e2 <_printf_i+0x146>
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	6861      	ldr	r1, [r4, #4]
 80073d4:	4299      	cmp	r1, r3
 80073d6:	bfde      	ittt	le
 80073d8:	2330      	movle	r3, #48	@ 0x30
 80073da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073e2:	1b92      	subs	r2, r2, r6
 80073e4:	6122      	str	r2, [r4, #16]
 80073e6:	464b      	mov	r3, r9
 80073e8:	4621      	mov	r1, r4
 80073ea:	4640      	mov	r0, r8
 80073ec:	f8cd a000 	str.w	sl, [sp]
 80073f0:	aa03      	add	r2, sp, #12
 80073f2:	f7ff fee1 	bl	80071b8 <_printf_common>
 80073f6:	3001      	adds	r0, #1
 80073f8:	d14a      	bne.n	8007490 <_printf_i+0x1f4>
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	b004      	add	sp, #16
 8007400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	f043 0320 	orr.w	r3, r3, #32
 800740a:	6023      	str	r3, [r4, #0]
 800740c:	2778      	movs	r7, #120	@ 0x78
 800740e:	4832      	ldr	r0, [pc, #200]	@ (80074d8 <_printf_i+0x23c>)
 8007410:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	6831      	ldr	r1, [r6, #0]
 8007418:	061f      	lsls	r7, r3, #24
 800741a:	f851 5b04 	ldr.w	r5, [r1], #4
 800741e:	d402      	bmi.n	8007426 <_printf_i+0x18a>
 8007420:	065f      	lsls	r7, r3, #25
 8007422:	bf48      	it	mi
 8007424:	b2ad      	uxthmi	r5, r5
 8007426:	6031      	str	r1, [r6, #0]
 8007428:	07d9      	lsls	r1, r3, #31
 800742a:	bf44      	itt	mi
 800742c:	f043 0320 	orrmi.w	r3, r3, #32
 8007430:	6023      	strmi	r3, [r4, #0]
 8007432:	b11d      	cbz	r5, 800743c <_printf_i+0x1a0>
 8007434:	2310      	movs	r3, #16
 8007436:	e7ab      	b.n	8007390 <_printf_i+0xf4>
 8007438:	4826      	ldr	r0, [pc, #152]	@ (80074d4 <_printf_i+0x238>)
 800743a:	e7e9      	b.n	8007410 <_printf_i+0x174>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	f023 0320 	bic.w	r3, r3, #32
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	e7f6      	b.n	8007434 <_printf_i+0x198>
 8007446:	4616      	mov	r6, r2
 8007448:	e7bd      	b.n	80073c6 <_printf_i+0x12a>
 800744a:	6833      	ldr	r3, [r6, #0]
 800744c:	6825      	ldr	r5, [r4, #0]
 800744e:	1d18      	adds	r0, r3, #4
 8007450:	6961      	ldr	r1, [r4, #20]
 8007452:	6030      	str	r0, [r6, #0]
 8007454:	062e      	lsls	r6, r5, #24
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	d501      	bpl.n	800745e <_printf_i+0x1c2>
 800745a:	6019      	str	r1, [r3, #0]
 800745c:	e002      	b.n	8007464 <_printf_i+0x1c8>
 800745e:	0668      	lsls	r0, r5, #25
 8007460:	d5fb      	bpl.n	800745a <_printf_i+0x1be>
 8007462:	8019      	strh	r1, [r3, #0]
 8007464:	2300      	movs	r3, #0
 8007466:	4616      	mov	r6, r2
 8007468:	6123      	str	r3, [r4, #16]
 800746a:	e7bc      	b.n	80073e6 <_printf_i+0x14a>
 800746c:	6833      	ldr	r3, [r6, #0]
 800746e:	2100      	movs	r1, #0
 8007470:	1d1a      	adds	r2, r3, #4
 8007472:	6032      	str	r2, [r6, #0]
 8007474:	681e      	ldr	r6, [r3, #0]
 8007476:	6862      	ldr	r2, [r4, #4]
 8007478:	4630      	mov	r0, r6
 800747a:	f000 f9d4 	bl	8007826 <memchr>
 800747e:	b108      	cbz	r0, 8007484 <_printf_i+0x1e8>
 8007480:	1b80      	subs	r0, r0, r6
 8007482:	6060      	str	r0, [r4, #4]
 8007484:	6863      	ldr	r3, [r4, #4]
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	2300      	movs	r3, #0
 800748a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800748e:	e7aa      	b.n	80073e6 <_printf_i+0x14a>
 8007490:	4632      	mov	r2, r6
 8007492:	4649      	mov	r1, r9
 8007494:	4640      	mov	r0, r8
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	47d0      	blx	sl
 800749a:	3001      	adds	r0, #1
 800749c:	d0ad      	beq.n	80073fa <_printf_i+0x15e>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	079b      	lsls	r3, r3, #30
 80074a2:	d413      	bmi.n	80074cc <_printf_i+0x230>
 80074a4:	68e0      	ldr	r0, [r4, #12]
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	4298      	cmp	r0, r3
 80074aa:	bfb8      	it	lt
 80074ac:	4618      	movlt	r0, r3
 80074ae:	e7a6      	b.n	80073fe <_printf_i+0x162>
 80074b0:	2301      	movs	r3, #1
 80074b2:	4632      	mov	r2, r6
 80074b4:	4649      	mov	r1, r9
 80074b6:	4640      	mov	r0, r8
 80074b8:	47d0      	blx	sl
 80074ba:	3001      	adds	r0, #1
 80074bc:	d09d      	beq.n	80073fa <_printf_i+0x15e>
 80074be:	3501      	adds	r5, #1
 80074c0:	68e3      	ldr	r3, [r4, #12]
 80074c2:	9903      	ldr	r1, [sp, #12]
 80074c4:	1a5b      	subs	r3, r3, r1
 80074c6:	42ab      	cmp	r3, r5
 80074c8:	dcf2      	bgt.n	80074b0 <_printf_i+0x214>
 80074ca:	e7eb      	b.n	80074a4 <_printf_i+0x208>
 80074cc:	2500      	movs	r5, #0
 80074ce:	f104 0619 	add.w	r6, r4, #25
 80074d2:	e7f5      	b.n	80074c0 <_printf_i+0x224>
 80074d4:	08009937 	.word	0x08009937
 80074d8:	08009948 	.word	0x08009948

080074dc <std>:
 80074dc:	2300      	movs	r3, #0
 80074de:	b510      	push	{r4, lr}
 80074e0:	4604      	mov	r4, r0
 80074e2:	e9c0 3300 	strd	r3, r3, [r0]
 80074e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074ea:	6083      	str	r3, [r0, #8]
 80074ec:	8181      	strh	r1, [r0, #12]
 80074ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80074f0:	81c2      	strh	r2, [r0, #14]
 80074f2:	6183      	str	r3, [r0, #24]
 80074f4:	4619      	mov	r1, r3
 80074f6:	2208      	movs	r2, #8
 80074f8:	305c      	adds	r0, #92	@ 0x5c
 80074fa:	f000 f915 	bl	8007728 <memset>
 80074fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007534 <std+0x58>)
 8007500:	6224      	str	r4, [r4, #32]
 8007502:	6263      	str	r3, [r4, #36]	@ 0x24
 8007504:	4b0c      	ldr	r3, [pc, #48]	@ (8007538 <std+0x5c>)
 8007506:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007508:	4b0c      	ldr	r3, [pc, #48]	@ (800753c <std+0x60>)
 800750a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800750c:	4b0c      	ldr	r3, [pc, #48]	@ (8007540 <std+0x64>)
 800750e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007510:	4b0c      	ldr	r3, [pc, #48]	@ (8007544 <std+0x68>)
 8007512:	429c      	cmp	r4, r3
 8007514:	d006      	beq.n	8007524 <std+0x48>
 8007516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800751a:	4294      	cmp	r4, r2
 800751c:	d002      	beq.n	8007524 <std+0x48>
 800751e:	33d0      	adds	r3, #208	@ 0xd0
 8007520:	429c      	cmp	r4, r3
 8007522:	d105      	bne.n	8007530 <std+0x54>
 8007524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800752c:	f000 b978 	b.w	8007820 <__retarget_lock_init_recursive>
 8007530:	bd10      	pop	{r4, pc}
 8007532:	bf00      	nop
 8007534:	08007661 	.word	0x08007661
 8007538:	08007683 	.word	0x08007683
 800753c:	080076bb 	.word	0x080076bb
 8007540:	080076df 	.word	0x080076df
 8007544:	200005a0 	.word	0x200005a0

08007548 <stdio_exit_handler>:
 8007548:	4a02      	ldr	r2, [pc, #8]	@ (8007554 <stdio_exit_handler+0xc>)
 800754a:	4903      	ldr	r1, [pc, #12]	@ (8007558 <stdio_exit_handler+0x10>)
 800754c:	4803      	ldr	r0, [pc, #12]	@ (800755c <stdio_exit_handler+0x14>)
 800754e:	f000 b869 	b.w	8007624 <_fwalk_sglue>
 8007552:	bf00      	nop
 8007554:	200000c4 	.word	0x200000c4
 8007558:	08009195 	.word	0x08009195
 800755c:	200000d4 	.word	0x200000d4

08007560 <cleanup_stdio>:
 8007560:	6841      	ldr	r1, [r0, #4]
 8007562:	4b0c      	ldr	r3, [pc, #48]	@ (8007594 <cleanup_stdio+0x34>)
 8007564:	b510      	push	{r4, lr}
 8007566:	4299      	cmp	r1, r3
 8007568:	4604      	mov	r4, r0
 800756a:	d001      	beq.n	8007570 <cleanup_stdio+0x10>
 800756c:	f001 fe12 	bl	8009194 <_fflush_r>
 8007570:	68a1      	ldr	r1, [r4, #8]
 8007572:	4b09      	ldr	r3, [pc, #36]	@ (8007598 <cleanup_stdio+0x38>)
 8007574:	4299      	cmp	r1, r3
 8007576:	d002      	beq.n	800757e <cleanup_stdio+0x1e>
 8007578:	4620      	mov	r0, r4
 800757a:	f001 fe0b 	bl	8009194 <_fflush_r>
 800757e:	68e1      	ldr	r1, [r4, #12]
 8007580:	4b06      	ldr	r3, [pc, #24]	@ (800759c <cleanup_stdio+0x3c>)
 8007582:	4299      	cmp	r1, r3
 8007584:	d004      	beq.n	8007590 <cleanup_stdio+0x30>
 8007586:	4620      	mov	r0, r4
 8007588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800758c:	f001 be02 	b.w	8009194 <_fflush_r>
 8007590:	bd10      	pop	{r4, pc}
 8007592:	bf00      	nop
 8007594:	200005a0 	.word	0x200005a0
 8007598:	20000608 	.word	0x20000608
 800759c:	20000670 	.word	0x20000670

080075a0 <global_stdio_init.part.0>:
 80075a0:	b510      	push	{r4, lr}
 80075a2:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <global_stdio_init.part.0+0x30>)
 80075a4:	4c0b      	ldr	r4, [pc, #44]	@ (80075d4 <global_stdio_init.part.0+0x34>)
 80075a6:	4a0c      	ldr	r2, [pc, #48]	@ (80075d8 <global_stdio_init.part.0+0x38>)
 80075a8:	4620      	mov	r0, r4
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	2104      	movs	r1, #4
 80075ae:	2200      	movs	r2, #0
 80075b0:	f7ff ff94 	bl	80074dc <std>
 80075b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075b8:	2201      	movs	r2, #1
 80075ba:	2109      	movs	r1, #9
 80075bc:	f7ff ff8e 	bl	80074dc <std>
 80075c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075c4:	2202      	movs	r2, #2
 80075c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ca:	2112      	movs	r1, #18
 80075cc:	f7ff bf86 	b.w	80074dc <std>
 80075d0:	200006d8 	.word	0x200006d8
 80075d4:	200005a0 	.word	0x200005a0
 80075d8:	08007549 	.word	0x08007549

080075dc <__sfp_lock_acquire>:
 80075dc:	4801      	ldr	r0, [pc, #4]	@ (80075e4 <__sfp_lock_acquire+0x8>)
 80075de:	f000 b920 	b.w	8007822 <__retarget_lock_acquire_recursive>
 80075e2:	bf00      	nop
 80075e4:	200006e1 	.word	0x200006e1

080075e8 <__sfp_lock_release>:
 80075e8:	4801      	ldr	r0, [pc, #4]	@ (80075f0 <__sfp_lock_release+0x8>)
 80075ea:	f000 b91b 	b.w	8007824 <__retarget_lock_release_recursive>
 80075ee:	bf00      	nop
 80075f0:	200006e1 	.word	0x200006e1

080075f4 <__sinit>:
 80075f4:	b510      	push	{r4, lr}
 80075f6:	4604      	mov	r4, r0
 80075f8:	f7ff fff0 	bl	80075dc <__sfp_lock_acquire>
 80075fc:	6a23      	ldr	r3, [r4, #32]
 80075fe:	b11b      	cbz	r3, 8007608 <__sinit+0x14>
 8007600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007604:	f7ff bff0 	b.w	80075e8 <__sfp_lock_release>
 8007608:	4b04      	ldr	r3, [pc, #16]	@ (800761c <__sinit+0x28>)
 800760a:	6223      	str	r3, [r4, #32]
 800760c:	4b04      	ldr	r3, [pc, #16]	@ (8007620 <__sinit+0x2c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1f5      	bne.n	8007600 <__sinit+0xc>
 8007614:	f7ff ffc4 	bl	80075a0 <global_stdio_init.part.0>
 8007618:	e7f2      	b.n	8007600 <__sinit+0xc>
 800761a:	bf00      	nop
 800761c:	08007561 	.word	0x08007561
 8007620:	200006d8 	.word	0x200006d8

08007624 <_fwalk_sglue>:
 8007624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007628:	4607      	mov	r7, r0
 800762a:	4688      	mov	r8, r1
 800762c:	4614      	mov	r4, r2
 800762e:	2600      	movs	r6, #0
 8007630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007634:	f1b9 0901 	subs.w	r9, r9, #1
 8007638:	d505      	bpl.n	8007646 <_fwalk_sglue+0x22>
 800763a:	6824      	ldr	r4, [r4, #0]
 800763c:	2c00      	cmp	r4, #0
 800763e:	d1f7      	bne.n	8007630 <_fwalk_sglue+0xc>
 8007640:	4630      	mov	r0, r6
 8007642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d907      	bls.n	800765c <_fwalk_sglue+0x38>
 800764c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007650:	3301      	adds	r3, #1
 8007652:	d003      	beq.n	800765c <_fwalk_sglue+0x38>
 8007654:	4629      	mov	r1, r5
 8007656:	4638      	mov	r0, r7
 8007658:	47c0      	blx	r8
 800765a:	4306      	orrs	r6, r0
 800765c:	3568      	adds	r5, #104	@ 0x68
 800765e:	e7e9      	b.n	8007634 <_fwalk_sglue+0x10>

08007660 <__sread>:
 8007660:	b510      	push	{r4, lr}
 8007662:	460c      	mov	r4, r1
 8007664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007668:	f000 f88c 	bl	8007784 <_read_r>
 800766c:	2800      	cmp	r0, #0
 800766e:	bfab      	itete	ge
 8007670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007672:	89a3      	ldrhlt	r3, [r4, #12]
 8007674:	181b      	addge	r3, r3, r0
 8007676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800767a:	bfac      	ite	ge
 800767c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800767e:	81a3      	strhlt	r3, [r4, #12]
 8007680:	bd10      	pop	{r4, pc}

08007682 <__swrite>:
 8007682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007686:	461f      	mov	r7, r3
 8007688:	898b      	ldrh	r3, [r1, #12]
 800768a:	4605      	mov	r5, r0
 800768c:	05db      	lsls	r3, r3, #23
 800768e:	460c      	mov	r4, r1
 8007690:	4616      	mov	r6, r2
 8007692:	d505      	bpl.n	80076a0 <__swrite+0x1e>
 8007694:	2302      	movs	r3, #2
 8007696:	2200      	movs	r2, #0
 8007698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800769c:	f000 f860 	bl	8007760 <_lseek_r>
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	4632      	mov	r2, r6
 80076a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	4628      	mov	r0, r5
 80076ac:	463b      	mov	r3, r7
 80076ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b6:	f000 b877 	b.w	80077a8 <_write_r>

080076ba <__sseek>:
 80076ba:	b510      	push	{r4, lr}
 80076bc:	460c      	mov	r4, r1
 80076be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c2:	f000 f84d 	bl	8007760 <_lseek_r>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	bf15      	itete	ne
 80076cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076d6:	81a3      	strheq	r3, [r4, #12]
 80076d8:	bf18      	it	ne
 80076da:	81a3      	strhne	r3, [r4, #12]
 80076dc:	bd10      	pop	{r4, pc}

080076de <__sclose>:
 80076de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e2:	f000 b82d 	b.w	8007740 <_close_r>
	...

080076e8 <_vsiprintf_r>:
 80076e8:	b500      	push	{lr}
 80076ea:	b09b      	sub	sp, #108	@ 0x6c
 80076ec:	9100      	str	r1, [sp, #0]
 80076ee:	9104      	str	r1, [sp, #16]
 80076f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076f4:	9105      	str	r1, [sp, #20]
 80076f6:	9102      	str	r1, [sp, #8]
 80076f8:	4905      	ldr	r1, [pc, #20]	@ (8007710 <_vsiprintf_r+0x28>)
 80076fa:	9103      	str	r1, [sp, #12]
 80076fc:	4669      	mov	r1, sp
 80076fe:	f001 fbcd 	bl	8008e9c <_svfiprintf_r>
 8007702:	2200      	movs	r2, #0
 8007704:	9b00      	ldr	r3, [sp, #0]
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	b01b      	add	sp, #108	@ 0x6c
 800770a:	f85d fb04 	ldr.w	pc, [sp], #4
 800770e:	bf00      	nop
 8007710:	ffff0208 	.word	0xffff0208

08007714 <vsiprintf>:
 8007714:	4613      	mov	r3, r2
 8007716:	460a      	mov	r2, r1
 8007718:	4601      	mov	r1, r0
 800771a:	4802      	ldr	r0, [pc, #8]	@ (8007724 <vsiprintf+0x10>)
 800771c:	6800      	ldr	r0, [r0, #0]
 800771e:	f7ff bfe3 	b.w	80076e8 <_vsiprintf_r>
 8007722:	bf00      	nop
 8007724:	200000d0 	.word	0x200000d0

08007728 <memset>:
 8007728:	4603      	mov	r3, r0
 800772a:	4402      	add	r2, r0
 800772c:	4293      	cmp	r3, r2
 800772e:	d100      	bne.n	8007732 <memset+0xa>
 8007730:	4770      	bx	lr
 8007732:	f803 1b01 	strb.w	r1, [r3], #1
 8007736:	e7f9      	b.n	800772c <memset+0x4>

08007738 <_localeconv_r>:
 8007738:	4800      	ldr	r0, [pc, #0]	@ (800773c <_localeconv_r+0x4>)
 800773a:	4770      	bx	lr
 800773c:	20000210 	.word	0x20000210

08007740 <_close_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	2300      	movs	r3, #0
 8007744:	4d05      	ldr	r5, [pc, #20]	@ (800775c <_close_r+0x1c>)
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	f7ff f9d9 	bl	8006b02 <_close>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_close_r+0x1a>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	b103      	cbz	r3, 800775a <_close_r+0x1a>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	200006dc 	.word	0x200006dc

08007760 <_lseek_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	4611      	mov	r1, r2
 8007768:	2200      	movs	r2, #0
 800776a:	4d05      	ldr	r5, [pc, #20]	@ (8007780 <_lseek_r+0x20>)
 800776c:	602a      	str	r2, [r5, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	f7ff f9eb 	bl	8006b4a <_lseek>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_lseek_r+0x1e>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_lseek_r+0x1e>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	200006dc 	.word	0x200006dc

08007784 <_read_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	2200      	movs	r2, #0
 800778e:	4d05      	ldr	r5, [pc, #20]	@ (80077a4 <_read_r+0x20>)
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f7ff f97c 	bl	8006a90 <_read>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_read_r+0x1e>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_read_r+0x1e>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	200006dc 	.word	0x200006dc

080077a8 <_write_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4604      	mov	r4, r0
 80077ac:	4608      	mov	r0, r1
 80077ae:	4611      	mov	r1, r2
 80077b0:	2200      	movs	r2, #0
 80077b2:	4d05      	ldr	r5, [pc, #20]	@ (80077c8 <_write_r+0x20>)
 80077b4:	602a      	str	r2, [r5, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f7ff f987 	bl	8006aca <_write>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_write_r+0x1e>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_write_r+0x1e>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	200006dc 	.word	0x200006dc

080077cc <__errno>:
 80077cc:	4b01      	ldr	r3, [pc, #4]	@ (80077d4 <__errno+0x8>)
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	200000d0 	.word	0x200000d0

080077d8 <__libc_init_array>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	2600      	movs	r6, #0
 80077dc:	4d0c      	ldr	r5, [pc, #48]	@ (8007810 <__libc_init_array+0x38>)
 80077de:	4c0d      	ldr	r4, [pc, #52]	@ (8007814 <__libc_init_array+0x3c>)
 80077e0:	1b64      	subs	r4, r4, r5
 80077e2:	10a4      	asrs	r4, r4, #2
 80077e4:	42a6      	cmp	r6, r4
 80077e6:	d109      	bne.n	80077fc <__libc_init_array+0x24>
 80077e8:	f002 f870 	bl	80098cc <_init>
 80077ec:	2600      	movs	r6, #0
 80077ee:	4d0a      	ldr	r5, [pc, #40]	@ (8007818 <__libc_init_array+0x40>)
 80077f0:	4c0a      	ldr	r4, [pc, #40]	@ (800781c <__libc_init_array+0x44>)
 80077f2:	1b64      	subs	r4, r4, r5
 80077f4:	10a4      	asrs	r4, r4, #2
 80077f6:	42a6      	cmp	r6, r4
 80077f8:	d105      	bne.n	8007806 <__libc_init_array+0x2e>
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007800:	4798      	blx	r3
 8007802:	3601      	adds	r6, #1
 8007804:	e7ee      	b.n	80077e4 <__libc_init_array+0xc>
 8007806:	f855 3b04 	ldr.w	r3, [r5], #4
 800780a:	4798      	blx	r3
 800780c:	3601      	adds	r6, #1
 800780e:	e7f2      	b.n	80077f6 <__libc_init_array+0x1e>
 8007810:	08009ca0 	.word	0x08009ca0
 8007814:	08009ca0 	.word	0x08009ca0
 8007818:	08009ca0 	.word	0x08009ca0
 800781c:	08009ca4 	.word	0x08009ca4

08007820 <__retarget_lock_init_recursive>:
 8007820:	4770      	bx	lr

08007822 <__retarget_lock_acquire_recursive>:
 8007822:	4770      	bx	lr

08007824 <__retarget_lock_release_recursive>:
 8007824:	4770      	bx	lr

08007826 <memchr>:
 8007826:	4603      	mov	r3, r0
 8007828:	b510      	push	{r4, lr}
 800782a:	b2c9      	uxtb	r1, r1
 800782c:	4402      	add	r2, r0
 800782e:	4293      	cmp	r3, r2
 8007830:	4618      	mov	r0, r3
 8007832:	d101      	bne.n	8007838 <memchr+0x12>
 8007834:	2000      	movs	r0, #0
 8007836:	e003      	b.n	8007840 <memchr+0x1a>
 8007838:	7804      	ldrb	r4, [r0, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	428c      	cmp	r4, r1
 800783e:	d1f6      	bne.n	800782e <memchr+0x8>
 8007840:	bd10      	pop	{r4, pc}

08007842 <quorem>:
 8007842:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007846:	6903      	ldr	r3, [r0, #16]
 8007848:	690c      	ldr	r4, [r1, #16]
 800784a:	4607      	mov	r7, r0
 800784c:	42a3      	cmp	r3, r4
 800784e:	db7e      	blt.n	800794e <quorem+0x10c>
 8007850:	3c01      	subs	r4, #1
 8007852:	00a3      	lsls	r3, r4, #2
 8007854:	f100 0514 	add.w	r5, r0, #20
 8007858:	f101 0814 	add.w	r8, r1, #20
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007862:	9301      	str	r3, [sp, #4]
 8007864:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800786c:	3301      	adds	r3, #1
 800786e:	429a      	cmp	r2, r3
 8007870:	fbb2 f6f3 	udiv	r6, r2, r3
 8007874:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007878:	d32e      	bcc.n	80078d8 <quorem+0x96>
 800787a:	f04f 0a00 	mov.w	sl, #0
 800787e:	46c4      	mov	ip, r8
 8007880:	46ae      	mov	lr, r5
 8007882:	46d3      	mov	fp, sl
 8007884:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007888:	b298      	uxth	r0, r3
 800788a:	fb06 a000 	mla	r0, r6, r0, sl
 800788e:	0c1b      	lsrs	r3, r3, #16
 8007890:	0c02      	lsrs	r2, r0, #16
 8007892:	fb06 2303 	mla	r3, r6, r3, r2
 8007896:	f8de 2000 	ldr.w	r2, [lr]
 800789a:	b280      	uxth	r0, r0
 800789c:	b292      	uxth	r2, r2
 800789e:	1a12      	subs	r2, r2, r0
 80078a0:	445a      	add	r2, fp
 80078a2:	f8de 0000 	ldr.w	r0, [lr]
 80078a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80078b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80078b4:	b292      	uxth	r2, r2
 80078b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80078ba:	45e1      	cmp	r9, ip
 80078bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80078c0:	f84e 2b04 	str.w	r2, [lr], #4
 80078c4:	d2de      	bcs.n	8007884 <quorem+0x42>
 80078c6:	9b00      	ldr	r3, [sp, #0]
 80078c8:	58eb      	ldr	r3, [r5, r3]
 80078ca:	b92b      	cbnz	r3, 80078d8 <quorem+0x96>
 80078cc:	9b01      	ldr	r3, [sp, #4]
 80078ce:	3b04      	subs	r3, #4
 80078d0:	429d      	cmp	r5, r3
 80078d2:	461a      	mov	r2, r3
 80078d4:	d32f      	bcc.n	8007936 <quorem+0xf4>
 80078d6:	613c      	str	r4, [r7, #16]
 80078d8:	4638      	mov	r0, r7
 80078da:	f001 f97b 	bl	8008bd4 <__mcmp>
 80078de:	2800      	cmp	r0, #0
 80078e0:	db25      	blt.n	800792e <quorem+0xec>
 80078e2:	4629      	mov	r1, r5
 80078e4:	2000      	movs	r0, #0
 80078e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80078ea:	f8d1 c000 	ldr.w	ip, [r1]
 80078ee:	fa1f fe82 	uxth.w	lr, r2
 80078f2:	fa1f f38c 	uxth.w	r3, ip
 80078f6:	eba3 030e 	sub.w	r3, r3, lr
 80078fa:	4403      	add	r3, r0
 80078fc:	0c12      	lsrs	r2, r2, #16
 80078fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007902:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007906:	b29b      	uxth	r3, r3
 8007908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800790c:	45c1      	cmp	r9, r8
 800790e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007912:	f841 3b04 	str.w	r3, [r1], #4
 8007916:	d2e6      	bcs.n	80078e6 <quorem+0xa4>
 8007918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800791c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007920:	b922      	cbnz	r2, 800792c <quorem+0xea>
 8007922:	3b04      	subs	r3, #4
 8007924:	429d      	cmp	r5, r3
 8007926:	461a      	mov	r2, r3
 8007928:	d30b      	bcc.n	8007942 <quorem+0x100>
 800792a:	613c      	str	r4, [r7, #16]
 800792c:	3601      	adds	r6, #1
 800792e:	4630      	mov	r0, r6
 8007930:	b003      	add	sp, #12
 8007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007936:	6812      	ldr	r2, [r2, #0]
 8007938:	3b04      	subs	r3, #4
 800793a:	2a00      	cmp	r2, #0
 800793c:	d1cb      	bne.n	80078d6 <quorem+0x94>
 800793e:	3c01      	subs	r4, #1
 8007940:	e7c6      	b.n	80078d0 <quorem+0x8e>
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	3b04      	subs	r3, #4
 8007946:	2a00      	cmp	r2, #0
 8007948:	d1ef      	bne.n	800792a <quorem+0xe8>
 800794a:	3c01      	subs	r4, #1
 800794c:	e7ea      	b.n	8007924 <quorem+0xe2>
 800794e:	2000      	movs	r0, #0
 8007950:	e7ee      	b.n	8007930 <quorem+0xee>
 8007952:	0000      	movs	r0, r0
 8007954:	0000      	movs	r0, r0
	...

08007958 <_dtoa_r>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	4614      	mov	r4, r2
 800795e:	461d      	mov	r5, r3
 8007960:	69c7      	ldr	r7, [r0, #28]
 8007962:	b097      	sub	sp, #92	@ 0x5c
 8007964:	4683      	mov	fp, r0
 8007966:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800796a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800796c:	b97f      	cbnz	r7, 800798e <_dtoa_r+0x36>
 800796e:	2010      	movs	r0, #16
 8007970:	f000 fe02 	bl	8008578 <malloc>
 8007974:	4602      	mov	r2, r0
 8007976:	f8cb 001c 	str.w	r0, [fp, #28]
 800797a:	b920      	cbnz	r0, 8007986 <_dtoa_r+0x2e>
 800797c:	21ef      	movs	r1, #239	@ 0xef
 800797e:	4ba8      	ldr	r3, [pc, #672]	@ (8007c20 <_dtoa_r+0x2c8>)
 8007980:	48a8      	ldr	r0, [pc, #672]	@ (8007c24 <_dtoa_r+0x2cc>)
 8007982:	f001 fc67 	bl	8009254 <__assert_func>
 8007986:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800798a:	6007      	str	r7, [r0, #0]
 800798c:	60c7      	str	r7, [r0, #12]
 800798e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	b159      	cbz	r1, 80079ae <_dtoa_r+0x56>
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	2301      	movs	r3, #1
 800799a:	4093      	lsls	r3, r2
 800799c:	604a      	str	r2, [r1, #4]
 800799e:	608b      	str	r3, [r1, #8]
 80079a0:	4658      	mov	r0, fp
 80079a2:	f000 fedf 	bl	8008764 <_Bfree>
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	1e2b      	subs	r3, r5, #0
 80079b0:	bfaf      	iteee	ge
 80079b2:	2300      	movge	r3, #0
 80079b4:	2201      	movlt	r2, #1
 80079b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80079ba:	9303      	strlt	r3, [sp, #12]
 80079bc:	bfa8      	it	ge
 80079be:	6033      	strge	r3, [r6, #0]
 80079c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80079c4:	4b98      	ldr	r3, [pc, #608]	@ (8007c28 <_dtoa_r+0x2d0>)
 80079c6:	bfb8      	it	lt
 80079c8:	6032      	strlt	r2, [r6, #0]
 80079ca:	ea33 0308 	bics.w	r3, r3, r8
 80079ce:	d112      	bne.n	80079f6 <_dtoa_r+0x9e>
 80079d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80079d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80079dc:	4323      	orrs	r3, r4
 80079de:	f000 8550 	beq.w	8008482 <_dtoa_r+0xb2a>
 80079e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80079e4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007c2c <_dtoa_r+0x2d4>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 8552 	beq.w	8008492 <_dtoa_r+0xb3a>
 80079ee:	f10a 0303 	add.w	r3, sl, #3
 80079f2:	f000 bd4c 	b.w	800848e <_dtoa_r+0xb36>
 80079f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80079fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a02:	2200      	movs	r2, #0
 8007a04:	2300      	movs	r3, #0
 8007a06:	f7fd f893 	bl	8004b30 <__aeabi_dcmpeq>
 8007a0a:	4607      	mov	r7, r0
 8007a0c:	b158      	cbz	r0, 8007a26 <_dtoa_r+0xce>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a16:	b113      	cbz	r3, 8007a1e <_dtoa_r+0xc6>
 8007a18:	4b85      	ldr	r3, [pc, #532]	@ (8007c30 <_dtoa_r+0x2d8>)
 8007a1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007c34 <_dtoa_r+0x2dc>
 8007a22:	f000 bd36 	b.w	8008492 <_dtoa_r+0xb3a>
 8007a26:	ab14      	add	r3, sp, #80	@ 0x50
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	ab15      	add	r3, sp, #84	@ 0x54
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	4658      	mov	r0, fp
 8007a30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007a34:	f001 f97e 	bl	8008d34 <__d2b>
 8007a38:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007a3c:	4681      	mov	r9, r0
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	d077      	beq.n	8007b32 <_dtoa_r+0x1da>
 8007a42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a48:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a50:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a54:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a58:	9712      	str	r7, [sp, #72]	@ 0x48
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4b76      	ldr	r3, [pc, #472]	@ (8007c38 <_dtoa_r+0x2e0>)
 8007a60:	f7fc fc46 	bl	80042f0 <__aeabi_dsub>
 8007a64:	a368      	add	r3, pc, #416	@ (adr r3, 8007c08 <_dtoa_r+0x2b0>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	f7fc fdf9 	bl	8004660 <__aeabi_dmul>
 8007a6e:	a368      	add	r3, pc, #416	@ (adr r3, 8007c10 <_dtoa_r+0x2b8>)
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	f7fc fc3e 	bl	80042f4 <__adddf3>
 8007a78:	4604      	mov	r4, r0
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	460d      	mov	r5, r1
 8007a7e:	f7fc fd85 	bl	800458c <__aeabi_i2d>
 8007a82:	a365      	add	r3, pc, #404	@ (adr r3, 8007c18 <_dtoa_r+0x2c0>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f7fc fdea 	bl	8004660 <__aeabi_dmul>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4620      	mov	r0, r4
 8007a92:	4629      	mov	r1, r5
 8007a94:	f7fc fc2e 	bl	80042f4 <__adddf3>
 8007a98:	4604      	mov	r4, r0
 8007a9a:	460d      	mov	r5, r1
 8007a9c:	f7fd f890 	bl	8004bc0 <__aeabi_d2iz>
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4607      	mov	r7, r0
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	f7fd f84b 	bl	8004b44 <__aeabi_dcmplt>
 8007aae:	b140      	cbz	r0, 8007ac2 <_dtoa_r+0x16a>
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f7fc fd6b 	bl	800458c <__aeabi_i2d>
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	462b      	mov	r3, r5
 8007aba:	f7fd f839 	bl	8004b30 <__aeabi_dcmpeq>
 8007abe:	b900      	cbnz	r0, 8007ac2 <_dtoa_r+0x16a>
 8007ac0:	3f01      	subs	r7, #1
 8007ac2:	2f16      	cmp	r7, #22
 8007ac4:	d853      	bhi.n	8007b6e <_dtoa_r+0x216>
 8007ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aca:	4b5c      	ldr	r3, [pc, #368]	@ (8007c3c <_dtoa_r+0x2e4>)
 8007acc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	f7fd f836 	bl	8004b44 <__aeabi_dcmplt>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d04a      	beq.n	8007b72 <_dtoa_r+0x21a>
 8007adc:	2300      	movs	r3, #0
 8007ade:	3f01      	subs	r7, #1
 8007ae0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ae2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ae4:	1b9b      	subs	r3, r3, r6
 8007ae6:	1e5a      	subs	r2, r3, #1
 8007ae8:	bf46      	itte	mi
 8007aea:	f1c3 0801 	rsbmi	r8, r3, #1
 8007aee:	2300      	movmi	r3, #0
 8007af0:	f04f 0800 	movpl.w	r8, #0
 8007af4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007af6:	bf48      	it	mi
 8007af8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007afa:	2f00      	cmp	r7, #0
 8007afc:	db3b      	blt.n	8007b76 <_dtoa_r+0x21e>
 8007afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b00:	970e      	str	r7, [sp, #56]	@ 0x38
 8007b02:	443b      	add	r3, r7
 8007b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b06:	2300      	movs	r3, #0
 8007b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b0c:	2b09      	cmp	r3, #9
 8007b0e:	d866      	bhi.n	8007bde <_dtoa_r+0x286>
 8007b10:	2b05      	cmp	r3, #5
 8007b12:	bfc4      	itt	gt
 8007b14:	3b04      	subgt	r3, #4
 8007b16:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007b18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b1a:	bfc8      	it	gt
 8007b1c:	2400      	movgt	r4, #0
 8007b1e:	f1a3 0302 	sub.w	r3, r3, #2
 8007b22:	bfd8      	it	le
 8007b24:	2401      	movle	r4, #1
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d864      	bhi.n	8007bf4 <_dtoa_r+0x29c>
 8007b2a:	e8df f003 	tbb	[pc, r3]
 8007b2e:	382b      	.short	0x382b
 8007b30:	5636      	.short	0x5636
 8007b32:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007b36:	441e      	add	r6, r3
 8007b38:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	bfc1      	itttt	gt
 8007b40:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b44:	fa08 f803 	lslgt.w	r8, r8, r3
 8007b48:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b4c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b50:	bfd6      	itet	le
 8007b52:	f1c3 0320 	rsble	r3, r3, #32
 8007b56:	ea48 0003 	orrgt.w	r0, r8, r3
 8007b5a:	fa04 f003 	lslle.w	r0, r4, r3
 8007b5e:	f7fc fd05 	bl	800456c <__aeabi_ui2d>
 8007b62:	2201      	movs	r2, #1
 8007b64:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b68:	3e01      	subs	r6, #1
 8007b6a:	9212      	str	r2, [sp, #72]	@ 0x48
 8007b6c:	e775      	b.n	8007a5a <_dtoa_r+0x102>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e7b6      	b.n	8007ae0 <_dtoa_r+0x188>
 8007b72:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007b74:	e7b5      	b.n	8007ae2 <_dtoa_r+0x18a>
 8007b76:	427b      	negs	r3, r7
 8007b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	eba8 0807 	sub.w	r8, r8, r7
 8007b80:	930e      	str	r3, [sp, #56]	@ 0x38
 8007b82:	e7c2      	b.n	8007b0a <_dtoa_r+0x1b2>
 8007b84:	2300      	movs	r3, #0
 8007b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	dc35      	bgt.n	8007bfa <_dtoa_r+0x2a2>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	461a      	mov	r2, r3
 8007b92:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007b96:	9221      	str	r2, [sp, #132]	@ 0x84
 8007b98:	e00b      	b.n	8007bb2 <_dtoa_r+0x25a>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e7f3      	b.n	8007b86 <_dtoa_r+0x22e>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ba2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ba4:	18fb      	adds	r3, r7, r3
 8007ba6:	9308      	str	r3, [sp, #32]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	9307      	str	r3, [sp, #28]
 8007bae:	bfb8      	it	lt
 8007bb0:	2301      	movlt	r3, #1
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007bba:	f102 0514 	add.w	r5, r2, #20
 8007bbe:	429d      	cmp	r5, r3
 8007bc0:	d91f      	bls.n	8007c02 <_dtoa_r+0x2aa>
 8007bc2:	6041      	str	r1, [r0, #4]
 8007bc4:	4658      	mov	r0, fp
 8007bc6:	f000 fd8d 	bl	80086e4 <_Balloc>
 8007bca:	4682      	mov	sl, r0
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d139      	bne.n	8007c44 <_dtoa_r+0x2ec>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8007c40 <_dtoa_r+0x2e8>)
 8007bd8:	e6d2      	b.n	8007980 <_dtoa_r+0x28>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e7e0      	b.n	8007ba0 <_dtoa_r+0x248>
 8007bde:	2401      	movs	r4, #1
 8007be0:	2300      	movs	r3, #0
 8007be2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007be4:	9320      	str	r3, [sp, #128]	@ 0x80
 8007be6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bea:	2200      	movs	r2, #0
 8007bec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007bf0:	2312      	movs	r3, #18
 8007bf2:	e7d0      	b.n	8007b96 <_dtoa_r+0x23e>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bf8:	e7f5      	b.n	8007be6 <_dtoa_r+0x28e>
 8007bfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bfc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c00:	e7d7      	b.n	8007bb2 <_dtoa_r+0x25a>
 8007c02:	3101      	adds	r1, #1
 8007c04:	0052      	lsls	r2, r2, #1
 8007c06:	e7d8      	b.n	8007bba <_dtoa_r+0x262>
 8007c08:	636f4361 	.word	0x636f4361
 8007c0c:	3fd287a7 	.word	0x3fd287a7
 8007c10:	8b60c8b3 	.word	0x8b60c8b3
 8007c14:	3fc68a28 	.word	0x3fc68a28
 8007c18:	509f79fb 	.word	0x509f79fb
 8007c1c:	3fd34413 	.word	0x3fd34413
 8007c20:	08009966 	.word	0x08009966
 8007c24:	0800997d 	.word	0x0800997d
 8007c28:	7ff00000 	.word	0x7ff00000
 8007c2c:	08009962 	.word	0x08009962
 8007c30:	08009936 	.word	0x08009936
 8007c34:	08009935 	.word	0x08009935
 8007c38:	3ff80000 	.word	0x3ff80000
 8007c3c:	08009a78 	.word	0x08009a78
 8007c40:	080099d5 	.word	0x080099d5
 8007c44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c48:	6018      	str	r0, [r3, #0]
 8007c4a:	9b07      	ldr	r3, [sp, #28]
 8007c4c:	2b0e      	cmp	r3, #14
 8007c4e:	f200 80a4 	bhi.w	8007d9a <_dtoa_r+0x442>
 8007c52:	2c00      	cmp	r4, #0
 8007c54:	f000 80a1 	beq.w	8007d9a <_dtoa_r+0x442>
 8007c58:	2f00      	cmp	r7, #0
 8007c5a:	dd33      	ble.n	8007cc4 <_dtoa_r+0x36c>
 8007c5c:	4b86      	ldr	r3, [pc, #536]	@ (8007e78 <_dtoa_r+0x520>)
 8007c5e:	f007 020f 	and.w	r2, r7, #15
 8007c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c66:	05f8      	lsls	r0, r7, #23
 8007c68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c6c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c74:	d516      	bpl.n	8007ca4 <_dtoa_r+0x34c>
 8007c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c7a:	4b80      	ldr	r3, [pc, #512]	@ (8007e7c <_dtoa_r+0x524>)
 8007c7c:	2603      	movs	r6, #3
 8007c7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c82:	f7fc fe17 	bl	80048b4 <__aeabi_ddiv>
 8007c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c8a:	f004 040f 	and.w	r4, r4, #15
 8007c8e:	4d7b      	ldr	r5, [pc, #492]	@ (8007e7c <_dtoa_r+0x524>)
 8007c90:	b954      	cbnz	r4, 8007ca8 <_dtoa_r+0x350>
 8007c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c9a:	f7fc fe0b 	bl	80048b4 <__aeabi_ddiv>
 8007c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ca2:	e028      	b.n	8007cf6 <_dtoa_r+0x39e>
 8007ca4:	2602      	movs	r6, #2
 8007ca6:	e7f2      	b.n	8007c8e <_dtoa_r+0x336>
 8007ca8:	07e1      	lsls	r1, r4, #31
 8007caa:	d508      	bpl.n	8007cbe <_dtoa_r+0x366>
 8007cac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cb4:	f7fc fcd4 	bl	8004660 <__aeabi_dmul>
 8007cb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cbc:	3601      	adds	r6, #1
 8007cbe:	1064      	asrs	r4, r4, #1
 8007cc0:	3508      	adds	r5, #8
 8007cc2:	e7e5      	b.n	8007c90 <_dtoa_r+0x338>
 8007cc4:	f000 80d2 	beq.w	8007e6c <_dtoa_r+0x514>
 8007cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ccc:	427c      	negs	r4, r7
 8007cce:	4b6a      	ldr	r3, [pc, #424]	@ (8007e78 <_dtoa_r+0x520>)
 8007cd0:	f004 020f 	and.w	r2, r4, #15
 8007cd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f7fc fcc0 	bl	8004660 <__aeabi_dmul>
 8007ce0:	2602      	movs	r6, #2
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ce8:	4d64      	ldr	r5, [pc, #400]	@ (8007e7c <_dtoa_r+0x524>)
 8007cea:	1124      	asrs	r4, r4, #4
 8007cec:	2c00      	cmp	r4, #0
 8007cee:	f040 80b2 	bne.w	8007e56 <_dtoa_r+0x4fe>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1d3      	bne.n	8007c9e <_dtoa_r+0x346>
 8007cf6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007cfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 80b7 	beq.w	8007e70 <_dtoa_r+0x518>
 8007d02:	2200      	movs	r2, #0
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	4b5d      	ldr	r3, [pc, #372]	@ (8007e80 <_dtoa_r+0x528>)
 8007d0a:	f7fc ff1b 	bl	8004b44 <__aeabi_dcmplt>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f000 80ae 	beq.w	8007e70 <_dtoa_r+0x518>
 8007d14:	9b07      	ldr	r3, [sp, #28]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 80aa 	beq.w	8007e70 <_dtoa_r+0x518>
 8007d1c:	9b08      	ldr	r3, [sp, #32]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	dd37      	ble.n	8007d92 <_dtoa_r+0x43a>
 8007d22:	1e7b      	subs	r3, r7, #1
 8007d24:	4620      	mov	r0, r4
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	4b55      	ldr	r3, [pc, #340]	@ (8007e84 <_dtoa_r+0x52c>)
 8007d2e:	f7fc fc97 	bl	8004660 <__aeabi_dmul>
 8007d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d36:	9c08      	ldr	r4, [sp, #32]
 8007d38:	3601      	adds	r6, #1
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7fc fc26 	bl	800458c <__aeabi_i2d>
 8007d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d44:	f7fc fc8c 	bl	8004660 <__aeabi_dmul>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007e88 <_dtoa_r+0x530>)
 8007d4c:	f7fc fad2 	bl	80042f4 <__adddf3>
 8007d50:	4605      	mov	r5, r0
 8007d52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d56:	2c00      	cmp	r4, #0
 8007d58:	f040 809a 	bne.w	8007e90 <_dtoa_r+0x538>
 8007d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d60:	2200      	movs	r2, #0
 8007d62:	4b4a      	ldr	r3, [pc, #296]	@ (8007e8c <_dtoa_r+0x534>)
 8007d64:	f7fc fac4 	bl	80042f0 <__aeabi_dsub>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d70:	462a      	mov	r2, r5
 8007d72:	4633      	mov	r3, r6
 8007d74:	f7fc ff04 	bl	8004b80 <__aeabi_dcmpgt>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	f040 828e 	bne.w	800829a <_dtoa_r+0x942>
 8007d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d82:	462a      	mov	r2, r5
 8007d84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d88:	f7fc fedc 	bl	8004b44 <__aeabi_dcmplt>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	f040 8127 	bne.w	8007fe0 <_dtoa_r+0x688>
 8007d92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f2c0 8163 	blt.w	8008068 <_dtoa_r+0x710>
 8007da2:	2f0e      	cmp	r7, #14
 8007da4:	f300 8160 	bgt.w	8008068 <_dtoa_r+0x710>
 8007da8:	4b33      	ldr	r3, [pc, #204]	@ (8007e78 <_dtoa_r+0x520>)
 8007daa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007dae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007db2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007db6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	da03      	bge.n	8007dc4 <_dtoa_r+0x46c>
 8007dbc:	9b07      	ldr	r3, [sp, #28]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f340 8100 	ble.w	8007fc4 <_dtoa_r+0x66c>
 8007dc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007dc8:	4656      	mov	r6, sl
 8007dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dce:	4620      	mov	r0, r4
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	f7fc fd6f 	bl	80048b4 <__aeabi_ddiv>
 8007dd6:	f7fc fef3 	bl	8004bc0 <__aeabi_d2iz>
 8007dda:	4680      	mov	r8, r0
 8007ddc:	f7fc fbd6 	bl	800458c <__aeabi_i2d>
 8007de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007de4:	f7fc fc3c 	bl	8004660 <__aeabi_dmul>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4620      	mov	r0, r4
 8007dee:	4629      	mov	r1, r5
 8007df0:	f7fc fa7e 	bl	80042f0 <__aeabi_dsub>
 8007df4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007df8:	9d07      	ldr	r5, [sp, #28]
 8007dfa:	f806 4b01 	strb.w	r4, [r6], #1
 8007dfe:	eba6 040a 	sub.w	r4, r6, sl
 8007e02:	42a5      	cmp	r5, r4
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	f040 8116 	bne.w	8008038 <_dtoa_r+0x6e0>
 8007e0c:	f7fc fa72 	bl	80042f4 <__adddf3>
 8007e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e14:	4604      	mov	r4, r0
 8007e16:	460d      	mov	r5, r1
 8007e18:	f7fc feb2 	bl	8004b80 <__aeabi_dcmpgt>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f040 80f8 	bne.w	8008012 <_dtoa_r+0x6ba>
 8007e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e26:	4620      	mov	r0, r4
 8007e28:	4629      	mov	r1, r5
 8007e2a:	f7fc fe81 	bl	8004b30 <__aeabi_dcmpeq>
 8007e2e:	b118      	cbz	r0, 8007e38 <_dtoa_r+0x4e0>
 8007e30:	f018 0f01 	tst.w	r8, #1
 8007e34:	f040 80ed 	bne.w	8008012 <_dtoa_r+0x6ba>
 8007e38:	4649      	mov	r1, r9
 8007e3a:	4658      	mov	r0, fp
 8007e3c:	f000 fc92 	bl	8008764 <_Bfree>
 8007e40:	2300      	movs	r3, #0
 8007e42:	7033      	strb	r3, [r6, #0]
 8007e44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007e46:	3701      	adds	r7, #1
 8007e48:	601f      	str	r7, [r3, #0]
 8007e4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 8320 	beq.w	8008492 <_dtoa_r+0xb3a>
 8007e52:	601e      	str	r6, [r3, #0]
 8007e54:	e31d      	b.n	8008492 <_dtoa_r+0xb3a>
 8007e56:	07e2      	lsls	r2, r4, #31
 8007e58:	d505      	bpl.n	8007e66 <_dtoa_r+0x50e>
 8007e5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e5e:	f7fc fbff 	bl	8004660 <__aeabi_dmul>
 8007e62:	2301      	movs	r3, #1
 8007e64:	3601      	adds	r6, #1
 8007e66:	1064      	asrs	r4, r4, #1
 8007e68:	3508      	adds	r5, #8
 8007e6a:	e73f      	b.n	8007cec <_dtoa_r+0x394>
 8007e6c:	2602      	movs	r6, #2
 8007e6e:	e742      	b.n	8007cf6 <_dtoa_r+0x39e>
 8007e70:	9c07      	ldr	r4, [sp, #28]
 8007e72:	9704      	str	r7, [sp, #16]
 8007e74:	e761      	b.n	8007d3a <_dtoa_r+0x3e2>
 8007e76:	bf00      	nop
 8007e78:	08009a78 	.word	0x08009a78
 8007e7c:	08009a50 	.word	0x08009a50
 8007e80:	3ff00000 	.word	0x3ff00000
 8007e84:	40240000 	.word	0x40240000
 8007e88:	401c0000 	.word	0x401c0000
 8007e8c:	40140000 	.word	0x40140000
 8007e90:	4b70      	ldr	r3, [pc, #448]	@ (8008054 <_dtoa_r+0x6fc>)
 8007e92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e9c:	4454      	add	r4, sl
 8007e9e:	2900      	cmp	r1, #0
 8007ea0:	d045      	beq.n	8007f2e <_dtoa_r+0x5d6>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	496c      	ldr	r1, [pc, #432]	@ (8008058 <_dtoa_r+0x700>)
 8007ea6:	f7fc fd05 	bl	80048b4 <__aeabi_ddiv>
 8007eaa:	4633      	mov	r3, r6
 8007eac:	462a      	mov	r2, r5
 8007eae:	f7fc fa1f 	bl	80042f0 <__aeabi_dsub>
 8007eb2:	4656      	mov	r6, sl
 8007eb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ebc:	f7fc fe80 	bl	8004bc0 <__aeabi_d2iz>
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	f7fc fb63 	bl	800458c <__aeabi_i2d>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ece:	f7fc fa0f 	bl	80042f0 <__aeabi_dsub>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	3530      	adds	r5, #48	@ 0x30
 8007ed8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007edc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ee0:	f806 5b01 	strb.w	r5, [r6], #1
 8007ee4:	f7fc fe2e 	bl	8004b44 <__aeabi_dcmplt>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d163      	bne.n	8007fb4 <_dtoa_r+0x65c>
 8007eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	495a      	ldr	r1, [pc, #360]	@ (800805c <_dtoa_r+0x704>)
 8007ef4:	f7fc f9fc 	bl	80042f0 <__aeabi_dsub>
 8007ef8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007efc:	f7fc fe22 	bl	8004b44 <__aeabi_dcmplt>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f040 8087 	bne.w	8008014 <_dtoa_r+0x6bc>
 8007f06:	42a6      	cmp	r6, r4
 8007f08:	f43f af43 	beq.w	8007d92 <_dtoa_r+0x43a>
 8007f0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f10:	2200      	movs	r2, #0
 8007f12:	4b53      	ldr	r3, [pc, #332]	@ (8008060 <_dtoa_r+0x708>)
 8007f14:	f7fc fba4 	bl	8004660 <__aeabi_dmul>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f22:	4b4f      	ldr	r3, [pc, #316]	@ (8008060 <_dtoa_r+0x708>)
 8007f24:	f7fc fb9c 	bl	8004660 <__aeabi_dmul>
 8007f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f2c:	e7c4      	b.n	8007eb8 <_dtoa_r+0x560>
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	f7fc fb95 	bl	8004660 <__aeabi_dmul>
 8007f36:	4656      	mov	r6, sl
 8007f38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f3c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f42:	f7fc fe3d 	bl	8004bc0 <__aeabi_d2iz>
 8007f46:	4605      	mov	r5, r0
 8007f48:	f7fc fb20 	bl	800458c <__aeabi_i2d>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f54:	f7fc f9cc 	bl	80042f0 <__aeabi_dsub>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	3530      	adds	r5, #48	@ 0x30
 8007f5e:	f806 5b01 	strb.w	r5, [r6], #1
 8007f62:	42a6      	cmp	r6, r4
 8007f64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	d124      	bne.n	8007fb8 <_dtoa_r+0x660>
 8007f6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f72:	4b39      	ldr	r3, [pc, #228]	@ (8008058 <_dtoa_r+0x700>)
 8007f74:	f7fc f9be 	bl	80042f4 <__adddf3>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f80:	f7fc fdfe 	bl	8004b80 <__aeabi_dcmpgt>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d145      	bne.n	8008014 <_dtoa_r+0x6bc>
 8007f88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	4932      	ldr	r1, [pc, #200]	@ (8008058 <_dtoa_r+0x700>)
 8007f90:	f7fc f9ae 	bl	80042f0 <__aeabi_dsub>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f9c:	f7fc fdd2 	bl	8004b44 <__aeabi_dcmplt>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f43f aef6 	beq.w	8007d92 <_dtoa_r+0x43a>
 8007fa6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007fa8:	1e73      	subs	r3, r6, #1
 8007faa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fb0:	2b30      	cmp	r3, #48	@ 0x30
 8007fb2:	d0f8      	beq.n	8007fa6 <_dtoa_r+0x64e>
 8007fb4:	9f04      	ldr	r7, [sp, #16]
 8007fb6:	e73f      	b.n	8007e38 <_dtoa_r+0x4e0>
 8007fb8:	4b29      	ldr	r3, [pc, #164]	@ (8008060 <_dtoa_r+0x708>)
 8007fba:	f7fc fb51 	bl	8004660 <__aeabi_dmul>
 8007fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fc2:	e7bc      	b.n	8007f3e <_dtoa_r+0x5e6>
 8007fc4:	d10c      	bne.n	8007fe0 <_dtoa_r+0x688>
 8007fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	4b25      	ldr	r3, [pc, #148]	@ (8008064 <_dtoa_r+0x70c>)
 8007fce:	f7fc fb47 	bl	8004660 <__aeabi_dmul>
 8007fd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fd6:	f7fc fdc9 	bl	8004b6c <__aeabi_dcmpge>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f000 815b 	beq.w	8008296 <_dtoa_r+0x93e>
 8007fe0:	2400      	movs	r4, #0
 8007fe2:	4625      	mov	r5, r4
 8007fe4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fe6:	4656      	mov	r6, sl
 8007fe8:	43db      	mvns	r3, r3
 8007fea:	9304      	str	r3, [sp, #16]
 8007fec:	2700      	movs	r7, #0
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4658      	mov	r0, fp
 8007ff2:	f000 fbb7 	bl	8008764 <_Bfree>
 8007ff6:	2d00      	cmp	r5, #0
 8007ff8:	d0dc      	beq.n	8007fb4 <_dtoa_r+0x65c>
 8007ffa:	b12f      	cbz	r7, 8008008 <_dtoa_r+0x6b0>
 8007ffc:	42af      	cmp	r7, r5
 8007ffe:	d003      	beq.n	8008008 <_dtoa_r+0x6b0>
 8008000:	4639      	mov	r1, r7
 8008002:	4658      	mov	r0, fp
 8008004:	f000 fbae 	bl	8008764 <_Bfree>
 8008008:	4629      	mov	r1, r5
 800800a:	4658      	mov	r0, fp
 800800c:	f000 fbaa 	bl	8008764 <_Bfree>
 8008010:	e7d0      	b.n	8007fb4 <_dtoa_r+0x65c>
 8008012:	9704      	str	r7, [sp, #16]
 8008014:	4633      	mov	r3, r6
 8008016:	461e      	mov	r6, r3
 8008018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800801c:	2a39      	cmp	r2, #57	@ 0x39
 800801e:	d107      	bne.n	8008030 <_dtoa_r+0x6d8>
 8008020:	459a      	cmp	sl, r3
 8008022:	d1f8      	bne.n	8008016 <_dtoa_r+0x6be>
 8008024:	9a04      	ldr	r2, [sp, #16]
 8008026:	3201      	adds	r2, #1
 8008028:	9204      	str	r2, [sp, #16]
 800802a:	2230      	movs	r2, #48	@ 0x30
 800802c:	f88a 2000 	strb.w	r2, [sl]
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	3201      	adds	r2, #1
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	e7bd      	b.n	8007fb4 <_dtoa_r+0x65c>
 8008038:	2200      	movs	r2, #0
 800803a:	4b09      	ldr	r3, [pc, #36]	@ (8008060 <_dtoa_r+0x708>)
 800803c:	f7fc fb10 	bl	8004660 <__aeabi_dmul>
 8008040:	2200      	movs	r2, #0
 8008042:	2300      	movs	r3, #0
 8008044:	4604      	mov	r4, r0
 8008046:	460d      	mov	r5, r1
 8008048:	f7fc fd72 	bl	8004b30 <__aeabi_dcmpeq>
 800804c:	2800      	cmp	r0, #0
 800804e:	f43f aebc 	beq.w	8007dca <_dtoa_r+0x472>
 8008052:	e6f1      	b.n	8007e38 <_dtoa_r+0x4e0>
 8008054:	08009a78 	.word	0x08009a78
 8008058:	3fe00000 	.word	0x3fe00000
 800805c:	3ff00000 	.word	0x3ff00000
 8008060:	40240000 	.word	0x40240000
 8008064:	40140000 	.word	0x40140000
 8008068:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800806a:	2a00      	cmp	r2, #0
 800806c:	f000 80db 	beq.w	8008226 <_dtoa_r+0x8ce>
 8008070:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008072:	2a01      	cmp	r2, #1
 8008074:	f300 80bf 	bgt.w	80081f6 <_dtoa_r+0x89e>
 8008078:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800807a:	2a00      	cmp	r2, #0
 800807c:	f000 80b7 	beq.w	80081ee <_dtoa_r+0x896>
 8008080:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008084:	4646      	mov	r6, r8
 8008086:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800808a:	2101      	movs	r1, #1
 800808c:	441a      	add	r2, r3
 800808e:	4658      	mov	r0, fp
 8008090:	4498      	add	r8, r3
 8008092:	9209      	str	r2, [sp, #36]	@ 0x24
 8008094:	f000 fc1a 	bl	80088cc <__i2b>
 8008098:	4605      	mov	r5, r0
 800809a:	b15e      	cbz	r6, 80080b4 <_dtoa_r+0x75c>
 800809c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dd08      	ble.n	80080b4 <_dtoa_r+0x75c>
 80080a2:	42b3      	cmp	r3, r6
 80080a4:	bfa8      	it	ge
 80080a6:	4633      	movge	r3, r6
 80080a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080aa:	eba8 0803 	sub.w	r8, r8, r3
 80080ae:	1af6      	subs	r6, r6, r3
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080b6:	b1f3      	cbz	r3, 80080f6 <_dtoa_r+0x79e>
 80080b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 80b7 	beq.w	800822e <_dtoa_r+0x8d6>
 80080c0:	b18c      	cbz	r4, 80080e6 <_dtoa_r+0x78e>
 80080c2:	4629      	mov	r1, r5
 80080c4:	4622      	mov	r2, r4
 80080c6:	4658      	mov	r0, fp
 80080c8:	f000 fcbe 	bl	8008a48 <__pow5mult>
 80080cc:	464a      	mov	r2, r9
 80080ce:	4601      	mov	r1, r0
 80080d0:	4605      	mov	r5, r0
 80080d2:	4658      	mov	r0, fp
 80080d4:	f000 fc10 	bl	80088f8 <__multiply>
 80080d8:	4649      	mov	r1, r9
 80080da:	9004      	str	r0, [sp, #16]
 80080dc:	4658      	mov	r0, fp
 80080de:	f000 fb41 	bl	8008764 <_Bfree>
 80080e2:	9b04      	ldr	r3, [sp, #16]
 80080e4:	4699      	mov	r9, r3
 80080e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080e8:	1b1a      	subs	r2, r3, r4
 80080ea:	d004      	beq.n	80080f6 <_dtoa_r+0x79e>
 80080ec:	4649      	mov	r1, r9
 80080ee:	4658      	mov	r0, fp
 80080f0:	f000 fcaa 	bl	8008a48 <__pow5mult>
 80080f4:	4681      	mov	r9, r0
 80080f6:	2101      	movs	r1, #1
 80080f8:	4658      	mov	r0, fp
 80080fa:	f000 fbe7 	bl	80088cc <__i2b>
 80080fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008100:	4604      	mov	r4, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 81c9 	beq.w	800849a <_dtoa_r+0xb42>
 8008108:	461a      	mov	r2, r3
 800810a:	4601      	mov	r1, r0
 800810c:	4658      	mov	r0, fp
 800810e:	f000 fc9b 	bl	8008a48 <__pow5mult>
 8008112:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008114:	4604      	mov	r4, r0
 8008116:	2b01      	cmp	r3, #1
 8008118:	f300 808f 	bgt.w	800823a <_dtoa_r+0x8e2>
 800811c:	9b02      	ldr	r3, [sp, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	f040 8087 	bne.w	8008232 <_dtoa_r+0x8da>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800812a:	2b00      	cmp	r3, #0
 800812c:	f040 8083 	bne.w	8008236 <_dtoa_r+0x8de>
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008136:	0d1b      	lsrs	r3, r3, #20
 8008138:	051b      	lsls	r3, r3, #20
 800813a:	b12b      	cbz	r3, 8008148 <_dtoa_r+0x7f0>
 800813c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800813e:	f108 0801 	add.w	r8, r8, #1
 8008142:	3301      	adds	r3, #1
 8008144:	9309      	str	r3, [sp, #36]	@ 0x24
 8008146:	2301      	movs	r3, #1
 8008148:	930a      	str	r3, [sp, #40]	@ 0x28
 800814a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 81aa 	beq.w	80084a6 <_dtoa_r+0xb4e>
 8008152:	6923      	ldr	r3, [r4, #16]
 8008154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008158:	6918      	ldr	r0, [r3, #16]
 800815a:	f000 fb6b 	bl	8008834 <__hi0bits>
 800815e:	f1c0 0020 	rsb	r0, r0, #32
 8008162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008164:	4418      	add	r0, r3
 8008166:	f010 001f 	ands.w	r0, r0, #31
 800816a:	d071      	beq.n	8008250 <_dtoa_r+0x8f8>
 800816c:	f1c0 0320 	rsb	r3, r0, #32
 8008170:	2b04      	cmp	r3, #4
 8008172:	dd65      	ble.n	8008240 <_dtoa_r+0x8e8>
 8008174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008176:	f1c0 001c 	rsb	r0, r0, #28
 800817a:	4403      	add	r3, r0
 800817c:	4480      	add	r8, r0
 800817e:	4406      	add	r6, r0
 8008180:	9309      	str	r3, [sp, #36]	@ 0x24
 8008182:	f1b8 0f00 	cmp.w	r8, #0
 8008186:	dd05      	ble.n	8008194 <_dtoa_r+0x83c>
 8008188:	4649      	mov	r1, r9
 800818a:	4642      	mov	r2, r8
 800818c:	4658      	mov	r0, fp
 800818e:	f000 fcb5 	bl	8008afc <__lshift>
 8008192:	4681      	mov	r9, r0
 8008194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd05      	ble.n	80081a6 <_dtoa_r+0x84e>
 800819a:	4621      	mov	r1, r4
 800819c:	461a      	mov	r2, r3
 800819e:	4658      	mov	r0, fp
 80081a0:	f000 fcac 	bl	8008afc <__lshift>
 80081a4:	4604      	mov	r4, r0
 80081a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d053      	beq.n	8008254 <_dtoa_r+0x8fc>
 80081ac:	4621      	mov	r1, r4
 80081ae:	4648      	mov	r0, r9
 80081b0:	f000 fd10 	bl	8008bd4 <__mcmp>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	da4d      	bge.n	8008254 <_dtoa_r+0x8fc>
 80081b8:	1e7b      	subs	r3, r7, #1
 80081ba:	4649      	mov	r1, r9
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	220a      	movs	r2, #10
 80081c0:	2300      	movs	r3, #0
 80081c2:	4658      	mov	r0, fp
 80081c4:	f000 faf0 	bl	80087a8 <__multadd>
 80081c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081ca:	4681      	mov	r9, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 816c 	beq.w	80084aa <_dtoa_r+0xb52>
 80081d2:	2300      	movs	r3, #0
 80081d4:	4629      	mov	r1, r5
 80081d6:	220a      	movs	r2, #10
 80081d8:	4658      	mov	r0, fp
 80081da:	f000 fae5 	bl	80087a8 <__multadd>
 80081de:	9b08      	ldr	r3, [sp, #32]
 80081e0:	4605      	mov	r5, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dc61      	bgt.n	80082aa <_dtoa_r+0x952>
 80081e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	dc3b      	bgt.n	8008264 <_dtoa_r+0x90c>
 80081ec:	e05d      	b.n	80082aa <_dtoa_r+0x952>
 80081ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081f0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081f4:	e746      	b.n	8008084 <_dtoa_r+0x72c>
 80081f6:	9b07      	ldr	r3, [sp, #28]
 80081f8:	1e5c      	subs	r4, r3, #1
 80081fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	bfbf      	itttt	lt
 8008200:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008202:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008204:	1ae3      	sublt	r3, r4, r3
 8008206:	18d2      	addlt	r2, r2, r3
 8008208:	bfa8      	it	ge
 800820a:	1b1c      	subge	r4, r3, r4
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	bfbe      	ittt	lt
 8008210:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008212:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008214:	2400      	movlt	r4, #0
 8008216:	2b00      	cmp	r3, #0
 8008218:	bfb5      	itete	lt
 800821a:	eba8 0603 	sublt.w	r6, r8, r3
 800821e:	4646      	movge	r6, r8
 8008220:	2300      	movlt	r3, #0
 8008222:	9b07      	ldrge	r3, [sp, #28]
 8008224:	e730      	b.n	8008088 <_dtoa_r+0x730>
 8008226:	4646      	mov	r6, r8
 8008228:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800822a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800822c:	e735      	b.n	800809a <_dtoa_r+0x742>
 800822e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008230:	e75c      	b.n	80080ec <_dtoa_r+0x794>
 8008232:	2300      	movs	r3, #0
 8008234:	e788      	b.n	8008148 <_dtoa_r+0x7f0>
 8008236:	9b02      	ldr	r3, [sp, #8]
 8008238:	e786      	b.n	8008148 <_dtoa_r+0x7f0>
 800823a:	2300      	movs	r3, #0
 800823c:	930a      	str	r3, [sp, #40]	@ 0x28
 800823e:	e788      	b.n	8008152 <_dtoa_r+0x7fa>
 8008240:	d09f      	beq.n	8008182 <_dtoa_r+0x82a>
 8008242:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008244:	331c      	adds	r3, #28
 8008246:	441a      	add	r2, r3
 8008248:	4498      	add	r8, r3
 800824a:	441e      	add	r6, r3
 800824c:	9209      	str	r2, [sp, #36]	@ 0x24
 800824e:	e798      	b.n	8008182 <_dtoa_r+0x82a>
 8008250:	4603      	mov	r3, r0
 8008252:	e7f6      	b.n	8008242 <_dtoa_r+0x8ea>
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	9704      	str	r7, [sp, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	dc20      	bgt.n	800829e <_dtoa_r+0x946>
 800825c:	9308      	str	r3, [sp, #32]
 800825e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008260:	2b02      	cmp	r3, #2
 8008262:	dd1e      	ble.n	80082a2 <_dtoa_r+0x94a>
 8008264:	9b08      	ldr	r3, [sp, #32]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f47f aebc 	bne.w	8007fe4 <_dtoa_r+0x68c>
 800826c:	4621      	mov	r1, r4
 800826e:	2205      	movs	r2, #5
 8008270:	4658      	mov	r0, fp
 8008272:	f000 fa99 	bl	80087a8 <__multadd>
 8008276:	4601      	mov	r1, r0
 8008278:	4604      	mov	r4, r0
 800827a:	4648      	mov	r0, r9
 800827c:	f000 fcaa 	bl	8008bd4 <__mcmp>
 8008280:	2800      	cmp	r0, #0
 8008282:	f77f aeaf 	ble.w	8007fe4 <_dtoa_r+0x68c>
 8008286:	2331      	movs	r3, #49	@ 0x31
 8008288:	4656      	mov	r6, sl
 800828a:	f806 3b01 	strb.w	r3, [r6], #1
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	3301      	adds	r3, #1
 8008292:	9304      	str	r3, [sp, #16]
 8008294:	e6aa      	b.n	8007fec <_dtoa_r+0x694>
 8008296:	9c07      	ldr	r4, [sp, #28]
 8008298:	9704      	str	r7, [sp, #16]
 800829a:	4625      	mov	r5, r4
 800829c:	e7f3      	b.n	8008286 <_dtoa_r+0x92e>
 800829e:	9b07      	ldr	r3, [sp, #28]
 80082a0:	9308      	str	r3, [sp, #32]
 80082a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8104 	beq.w	80084b2 <_dtoa_r+0xb5a>
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	dd05      	ble.n	80082ba <_dtoa_r+0x962>
 80082ae:	4629      	mov	r1, r5
 80082b0:	4632      	mov	r2, r6
 80082b2:	4658      	mov	r0, fp
 80082b4:	f000 fc22 	bl	8008afc <__lshift>
 80082b8:	4605      	mov	r5, r0
 80082ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d05a      	beq.n	8008376 <_dtoa_r+0xa1e>
 80082c0:	4658      	mov	r0, fp
 80082c2:	6869      	ldr	r1, [r5, #4]
 80082c4:	f000 fa0e 	bl	80086e4 <_Balloc>
 80082c8:	4606      	mov	r6, r0
 80082ca:	b928      	cbnz	r0, 80082d8 <_dtoa_r+0x980>
 80082cc:	4602      	mov	r2, r0
 80082ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082d2:	4b83      	ldr	r3, [pc, #524]	@ (80084e0 <_dtoa_r+0xb88>)
 80082d4:	f7ff bb54 	b.w	8007980 <_dtoa_r+0x28>
 80082d8:	692a      	ldr	r2, [r5, #16]
 80082da:	f105 010c 	add.w	r1, r5, #12
 80082de:	3202      	adds	r2, #2
 80082e0:	0092      	lsls	r2, r2, #2
 80082e2:	300c      	adds	r0, #12
 80082e4:	f000 ffa8 	bl	8009238 <memcpy>
 80082e8:	2201      	movs	r2, #1
 80082ea:	4631      	mov	r1, r6
 80082ec:	4658      	mov	r0, fp
 80082ee:	f000 fc05 	bl	8008afc <__lshift>
 80082f2:	462f      	mov	r7, r5
 80082f4:	4605      	mov	r5, r0
 80082f6:	f10a 0301 	add.w	r3, sl, #1
 80082fa:	9307      	str	r3, [sp, #28]
 80082fc:	9b08      	ldr	r3, [sp, #32]
 80082fe:	4453      	add	r3, sl
 8008300:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	930a      	str	r3, [sp, #40]	@ 0x28
 800830a:	9b07      	ldr	r3, [sp, #28]
 800830c:	4621      	mov	r1, r4
 800830e:	3b01      	subs	r3, #1
 8008310:	4648      	mov	r0, r9
 8008312:	9302      	str	r3, [sp, #8]
 8008314:	f7ff fa95 	bl	8007842 <quorem>
 8008318:	4639      	mov	r1, r7
 800831a:	9008      	str	r0, [sp, #32]
 800831c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008320:	4648      	mov	r0, r9
 8008322:	f000 fc57 	bl	8008bd4 <__mcmp>
 8008326:	462a      	mov	r2, r5
 8008328:	9009      	str	r0, [sp, #36]	@ 0x24
 800832a:	4621      	mov	r1, r4
 800832c:	4658      	mov	r0, fp
 800832e:	f000 fc6d 	bl	8008c0c <__mdiff>
 8008332:	68c2      	ldr	r2, [r0, #12]
 8008334:	4606      	mov	r6, r0
 8008336:	bb02      	cbnz	r2, 800837a <_dtoa_r+0xa22>
 8008338:	4601      	mov	r1, r0
 800833a:	4648      	mov	r0, r9
 800833c:	f000 fc4a 	bl	8008bd4 <__mcmp>
 8008340:	4602      	mov	r2, r0
 8008342:	4631      	mov	r1, r6
 8008344:	4658      	mov	r0, fp
 8008346:	920c      	str	r2, [sp, #48]	@ 0x30
 8008348:	f000 fa0c 	bl	8008764 <_Bfree>
 800834c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800834e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008350:	9e07      	ldr	r6, [sp, #28]
 8008352:	ea43 0102 	orr.w	r1, r3, r2
 8008356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008358:	4319      	orrs	r1, r3
 800835a:	d110      	bne.n	800837e <_dtoa_r+0xa26>
 800835c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008360:	d029      	beq.n	80083b6 <_dtoa_r+0xa5e>
 8008362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	dd02      	ble.n	800836e <_dtoa_r+0xa16>
 8008368:	9b08      	ldr	r3, [sp, #32]
 800836a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800836e:	9b02      	ldr	r3, [sp, #8]
 8008370:	f883 8000 	strb.w	r8, [r3]
 8008374:	e63b      	b.n	8007fee <_dtoa_r+0x696>
 8008376:	4628      	mov	r0, r5
 8008378:	e7bb      	b.n	80082f2 <_dtoa_r+0x99a>
 800837a:	2201      	movs	r2, #1
 800837c:	e7e1      	b.n	8008342 <_dtoa_r+0x9ea>
 800837e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008380:	2b00      	cmp	r3, #0
 8008382:	db04      	blt.n	800838e <_dtoa_r+0xa36>
 8008384:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008386:	430b      	orrs	r3, r1
 8008388:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800838a:	430b      	orrs	r3, r1
 800838c:	d120      	bne.n	80083d0 <_dtoa_r+0xa78>
 800838e:	2a00      	cmp	r2, #0
 8008390:	dded      	ble.n	800836e <_dtoa_r+0xa16>
 8008392:	4649      	mov	r1, r9
 8008394:	2201      	movs	r2, #1
 8008396:	4658      	mov	r0, fp
 8008398:	f000 fbb0 	bl	8008afc <__lshift>
 800839c:	4621      	mov	r1, r4
 800839e:	4681      	mov	r9, r0
 80083a0:	f000 fc18 	bl	8008bd4 <__mcmp>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	dc03      	bgt.n	80083b0 <_dtoa_r+0xa58>
 80083a8:	d1e1      	bne.n	800836e <_dtoa_r+0xa16>
 80083aa:	f018 0f01 	tst.w	r8, #1
 80083ae:	d0de      	beq.n	800836e <_dtoa_r+0xa16>
 80083b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083b4:	d1d8      	bne.n	8008368 <_dtoa_r+0xa10>
 80083b6:	2339      	movs	r3, #57	@ 0x39
 80083b8:	9a02      	ldr	r2, [sp, #8]
 80083ba:	7013      	strb	r3, [r2, #0]
 80083bc:	4633      	mov	r3, r6
 80083be:	461e      	mov	r6, r3
 80083c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	2a39      	cmp	r2, #57	@ 0x39
 80083c8:	d052      	beq.n	8008470 <_dtoa_r+0xb18>
 80083ca:	3201      	adds	r2, #1
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	e60e      	b.n	8007fee <_dtoa_r+0x696>
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	dd07      	ble.n	80083e4 <_dtoa_r+0xa8c>
 80083d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083d8:	d0ed      	beq.n	80083b6 <_dtoa_r+0xa5e>
 80083da:	9a02      	ldr	r2, [sp, #8]
 80083dc:	f108 0301 	add.w	r3, r8, #1
 80083e0:	7013      	strb	r3, [r2, #0]
 80083e2:	e604      	b.n	8007fee <_dtoa_r+0x696>
 80083e4:	9b07      	ldr	r3, [sp, #28]
 80083e6:	9a07      	ldr	r2, [sp, #28]
 80083e8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80083ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d028      	beq.n	8008444 <_dtoa_r+0xaec>
 80083f2:	4649      	mov	r1, r9
 80083f4:	2300      	movs	r3, #0
 80083f6:	220a      	movs	r2, #10
 80083f8:	4658      	mov	r0, fp
 80083fa:	f000 f9d5 	bl	80087a8 <__multadd>
 80083fe:	42af      	cmp	r7, r5
 8008400:	4681      	mov	r9, r0
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	f04f 020a 	mov.w	r2, #10
 800840a:	4639      	mov	r1, r7
 800840c:	4658      	mov	r0, fp
 800840e:	d107      	bne.n	8008420 <_dtoa_r+0xac8>
 8008410:	f000 f9ca 	bl	80087a8 <__multadd>
 8008414:	4607      	mov	r7, r0
 8008416:	4605      	mov	r5, r0
 8008418:	9b07      	ldr	r3, [sp, #28]
 800841a:	3301      	adds	r3, #1
 800841c:	9307      	str	r3, [sp, #28]
 800841e:	e774      	b.n	800830a <_dtoa_r+0x9b2>
 8008420:	f000 f9c2 	bl	80087a8 <__multadd>
 8008424:	4629      	mov	r1, r5
 8008426:	4607      	mov	r7, r0
 8008428:	2300      	movs	r3, #0
 800842a:	220a      	movs	r2, #10
 800842c:	4658      	mov	r0, fp
 800842e:	f000 f9bb 	bl	80087a8 <__multadd>
 8008432:	4605      	mov	r5, r0
 8008434:	e7f0      	b.n	8008418 <_dtoa_r+0xac0>
 8008436:	9b08      	ldr	r3, [sp, #32]
 8008438:	2700      	movs	r7, #0
 800843a:	2b00      	cmp	r3, #0
 800843c:	bfcc      	ite	gt
 800843e:	461e      	movgt	r6, r3
 8008440:	2601      	movle	r6, #1
 8008442:	4456      	add	r6, sl
 8008444:	4649      	mov	r1, r9
 8008446:	2201      	movs	r2, #1
 8008448:	4658      	mov	r0, fp
 800844a:	f000 fb57 	bl	8008afc <__lshift>
 800844e:	4621      	mov	r1, r4
 8008450:	4681      	mov	r9, r0
 8008452:	f000 fbbf 	bl	8008bd4 <__mcmp>
 8008456:	2800      	cmp	r0, #0
 8008458:	dcb0      	bgt.n	80083bc <_dtoa_r+0xa64>
 800845a:	d102      	bne.n	8008462 <_dtoa_r+0xb0a>
 800845c:	f018 0f01 	tst.w	r8, #1
 8008460:	d1ac      	bne.n	80083bc <_dtoa_r+0xa64>
 8008462:	4633      	mov	r3, r6
 8008464:	461e      	mov	r6, r3
 8008466:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800846a:	2a30      	cmp	r2, #48	@ 0x30
 800846c:	d0fa      	beq.n	8008464 <_dtoa_r+0xb0c>
 800846e:	e5be      	b.n	8007fee <_dtoa_r+0x696>
 8008470:	459a      	cmp	sl, r3
 8008472:	d1a4      	bne.n	80083be <_dtoa_r+0xa66>
 8008474:	9b04      	ldr	r3, [sp, #16]
 8008476:	3301      	adds	r3, #1
 8008478:	9304      	str	r3, [sp, #16]
 800847a:	2331      	movs	r3, #49	@ 0x31
 800847c:	f88a 3000 	strb.w	r3, [sl]
 8008480:	e5b5      	b.n	8007fee <_dtoa_r+0x696>
 8008482:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008484:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80084e4 <_dtoa_r+0xb8c>
 8008488:	b11b      	cbz	r3, 8008492 <_dtoa_r+0xb3a>
 800848a:	f10a 0308 	add.w	r3, sl, #8
 800848e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008490:	6013      	str	r3, [r2, #0]
 8008492:	4650      	mov	r0, sl
 8008494:	b017      	add	sp, #92	@ 0x5c
 8008496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800849c:	2b01      	cmp	r3, #1
 800849e:	f77f ae3d 	ble.w	800811c <_dtoa_r+0x7c4>
 80084a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80084a6:	2001      	movs	r0, #1
 80084a8:	e65b      	b.n	8008162 <_dtoa_r+0x80a>
 80084aa:	9b08      	ldr	r3, [sp, #32]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f77f aed6 	ble.w	800825e <_dtoa_r+0x906>
 80084b2:	4656      	mov	r6, sl
 80084b4:	4621      	mov	r1, r4
 80084b6:	4648      	mov	r0, r9
 80084b8:	f7ff f9c3 	bl	8007842 <quorem>
 80084bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084c0:	9b08      	ldr	r3, [sp, #32]
 80084c2:	f806 8b01 	strb.w	r8, [r6], #1
 80084c6:	eba6 020a 	sub.w	r2, r6, sl
 80084ca:	4293      	cmp	r3, r2
 80084cc:	ddb3      	ble.n	8008436 <_dtoa_r+0xade>
 80084ce:	4649      	mov	r1, r9
 80084d0:	2300      	movs	r3, #0
 80084d2:	220a      	movs	r2, #10
 80084d4:	4658      	mov	r0, fp
 80084d6:	f000 f967 	bl	80087a8 <__multadd>
 80084da:	4681      	mov	r9, r0
 80084dc:	e7ea      	b.n	80084b4 <_dtoa_r+0xb5c>
 80084de:	bf00      	nop
 80084e0:	080099d5 	.word	0x080099d5
 80084e4:	08009959 	.word	0x08009959

080084e8 <_free_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4605      	mov	r5, r0
 80084ec:	2900      	cmp	r1, #0
 80084ee:	d040      	beq.n	8008572 <_free_r+0x8a>
 80084f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f4:	1f0c      	subs	r4, r1, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bfb8      	it	lt
 80084fa:	18e4      	addlt	r4, r4, r3
 80084fc:	f000 f8e6 	bl	80086cc <__malloc_lock>
 8008500:	4a1c      	ldr	r2, [pc, #112]	@ (8008574 <_free_r+0x8c>)
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	b933      	cbnz	r3, 8008514 <_free_r+0x2c>
 8008506:	6063      	str	r3, [r4, #4]
 8008508:	6014      	str	r4, [r2, #0]
 800850a:	4628      	mov	r0, r5
 800850c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008510:	f000 b8e2 	b.w	80086d8 <__malloc_unlock>
 8008514:	42a3      	cmp	r3, r4
 8008516:	d908      	bls.n	800852a <_free_r+0x42>
 8008518:	6820      	ldr	r0, [r4, #0]
 800851a:	1821      	adds	r1, r4, r0
 800851c:	428b      	cmp	r3, r1
 800851e:	bf01      	itttt	eq
 8008520:	6819      	ldreq	r1, [r3, #0]
 8008522:	685b      	ldreq	r3, [r3, #4]
 8008524:	1809      	addeq	r1, r1, r0
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	e7ed      	b.n	8008506 <_free_r+0x1e>
 800852a:	461a      	mov	r2, r3
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	b10b      	cbz	r3, 8008534 <_free_r+0x4c>
 8008530:	42a3      	cmp	r3, r4
 8008532:	d9fa      	bls.n	800852a <_free_r+0x42>
 8008534:	6811      	ldr	r1, [r2, #0]
 8008536:	1850      	adds	r0, r2, r1
 8008538:	42a0      	cmp	r0, r4
 800853a:	d10b      	bne.n	8008554 <_free_r+0x6c>
 800853c:	6820      	ldr	r0, [r4, #0]
 800853e:	4401      	add	r1, r0
 8008540:	1850      	adds	r0, r2, r1
 8008542:	4283      	cmp	r3, r0
 8008544:	6011      	str	r1, [r2, #0]
 8008546:	d1e0      	bne.n	800850a <_free_r+0x22>
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	4408      	add	r0, r1
 800854e:	6010      	str	r0, [r2, #0]
 8008550:	6053      	str	r3, [r2, #4]
 8008552:	e7da      	b.n	800850a <_free_r+0x22>
 8008554:	d902      	bls.n	800855c <_free_r+0x74>
 8008556:	230c      	movs	r3, #12
 8008558:	602b      	str	r3, [r5, #0]
 800855a:	e7d6      	b.n	800850a <_free_r+0x22>
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	1821      	adds	r1, r4, r0
 8008560:	428b      	cmp	r3, r1
 8008562:	bf01      	itttt	eq
 8008564:	6819      	ldreq	r1, [r3, #0]
 8008566:	685b      	ldreq	r3, [r3, #4]
 8008568:	1809      	addeq	r1, r1, r0
 800856a:	6021      	streq	r1, [r4, #0]
 800856c:	6063      	str	r3, [r4, #4]
 800856e:	6054      	str	r4, [r2, #4]
 8008570:	e7cb      	b.n	800850a <_free_r+0x22>
 8008572:	bd38      	pop	{r3, r4, r5, pc}
 8008574:	200006e8 	.word	0x200006e8

08008578 <malloc>:
 8008578:	4b02      	ldr	r3, [pc, #8]	@ (8008584 <malloc+0xc>)
 800857a:	4601      	mov	r1, r0
 800857c:	6818      	ldr	r0, [r3, #0]
 800857e:	f000 b825 	b.w	80085cc <_malloc_r>
 8008582:	bf00      	nop
 8008584:	200000d0 	.word	0x200000d0

08008588 <sbrk_aligned>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4e0f      	ldr	r6, [pc, #60]	@ (80085c8 <sbrk_aligned+0x40>)
 800858c:	460c      	mov	r4, r1
 800858e:	6831      	ldr	r1, [r6, #0]
 8008590:	4605      	mov	r5, r0
 8008592:	b911      	cbnz	r1, 800859a <sbrk_aligned+0x12>
 8008594:	f000 fe40 	bl	8009218 <_sbrk_r>
 8008598:	6030      	str	r0, [r6, #0]
 800859a:	4621      	mov	r1, r4
 800859c:	4628      	mov	r0, r5
 800859e:	f000 fe3b 	bl	8009218 <_sbrk_r>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	d103      	bne.n	80085ae <sbrk_aligned+0x26>
 80085a6:	f04f 34ff 	mov.w	r4, #4294967295
 80085aa:	4620      	mov	r0, r4
 80085ac:	bd70      	pop	{r4, r5, r6, pc}
 80085ae:	1cc4      	adds	r4, r0, #3
 80085b0:	f024 0403 	bic.w	r4, r4, #3
 80085b4:	42a0      	cmp	r0, r4
 80085b6:	d0f8      	beq.n	80085aa <sbrk_aligned+0x22>
 80085b8:	1a21      	subs	r1, r4, r0
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 fe2c 	bl	8009218 <_sbrk_r>
 80085c0:	3001      	adds	r0, #1
 80085c2:	d1f2      	bne.n	80085aa <sbrk_aligned+0x22>
 80085c4:	e7ef      	b.n	80085a6 <sbrk_aligned+0x1e>
 80085c6:	bf00      	nop
 80085c8:	200006e4 	.word	0x200006e4

080085cc <_malloc_r>:
 80085cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d0:	1ccd      	adds	r5, r1, #3
 80085d2:	f025 0503 	bic.w	r5, r5, #3
 80085d6:	3508      	adds	r5, #8
 80085d8:	2d0c      	cmp	r5, #12
 80085da:	bf38      	it	cc
 80085dc:	250c      	movcc	r5, #12
 80085de:	2d00      	cmp	r5, #0
 80085e0:	4606      	mov	r6, r0
 80085e2:	db01      	blt.n	80085e8 <_malloc_r+0x1c>
 80085e4:	42a9      	cmp	r1, r5
 80085e6:	d904      	bls.n	80085f2 <_malloc_r+0x26>
 80085e8:	230c      	movs	r3, #12
 80085ea:	6033      	str	r3, [r6, #0]
 80085ec:	2000      	movs	r0, #0
 80085ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086c8 <_malloc_r+0xfc>
 80085f6:	f000 f869 	bl	80086cc <__malloc_lock>
 80085fa:	f8d8 3000 	ldr.w	r3, [r8]
 80085fe:	461c      	mov	r4, r3
 8008600:	bb44      	cbnz	r4, 8008654 <_malloc_r+0x88>
 8008602:	4629      	mov	r1, r5
 8008604:	4630      	mov	r0, r6
 8008606:	f7ff ffbf 	bl	8008588 <sbrk_aligned>
 800860a:	1c43      	adds	r3, r0, #1
 800860c:	4604      	mov	r4, r0
 800860e:	d158      	bne.n	80086c2 <_malloc_r+0xf6>
 8008610:	f8d8 4000 	ldr.w	r4, [r8]
 8008614:	4627      	mov	r7, r4
 8008616:	2f00      	cmp	r7, #0
 8008618:	d143      	bne.n	80086a2 <_malloc_r+0xd6>
 800861a:	2c00      	cmp	r4, #0
 800861c:	d04b      	beq.n	80086b6 <_malloc_r+0xea>
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	4639      	mov	r1, r7
 8008622:	4630      	mov	r0, r6
 8008624:	eb04 0903 	add.w	r9, r4, r3
 8008628:	f000 fdf6 	bl	8009218 <_sbrk_r>
 800862c:	4581      	cmp	r9, r0
 800862e:	d142      	bne.n	80086b6 <_malloc_r+0xea>
 8008630:	6821      	ldr	r1, [r4, #0]
 8008632:	4630      	mov	r0, r6
 8008634:	1a6d      	subs	r5, r5, r1
 8008636:	4629      	mov	r1, r5
 8008638:	f7ff ffa6 	bl	8008588 <sbrk_aligned>
 800863c:	3001      	adds	r0, #1
 800863e:	d03a      	beq.n	80086b6 <_malloc_r+0xea>
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	442b      	add	r3, r5
 8008644:	6023      	str	r3, [r4, #0]
 8008646:	f8d8 3000 	ldr.w	r3, [r8]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	bb62      	cbnz	r2, 80086a8 <_malloc_r+0xdc>
 800864e:	f8c8 7000 	str.w	r7, [r8]
 8008652:	e00f      	b.n	8008674 <_malloc_r+0xa8>
 8008654:	6822      	ldr	r2, [r4, #0]
 8008656:	1b52      	subs	r2, r2, r5
 8008658:	d420      	bmi.n	800869c <_malloc_r+0xd0>
 800865a:	2a0b      	cmp	r2, #11
 800865c:	d917      	bls.n	800868e <_malloc_r+0xc2>
 800865e:	1961      	adds	r1, r4, r5
 8008660:	42a3      	cmp	r3, r4
 8008662:	6025      	str	r5, [r4, #0]
 8008664:	bf18      	it	ne
 8008666:	6059      	strne	r1, [r3, #4]
 8008668:	6863      	ldr	r3, [r4, #4]
 800866a:	bf08      	it	eq
 800866c:	f8c8 1000 	streq.w	r1, [r8]
 8008670:	5162      	str	r2, [r4, r5]
 8008672:	604b      	str	r3, [r1, #4]
 8008674:	4630      	mov	r0, r6
 8008676:	f000 f82f 	bl	80086d8 <__malloc_unlock>
 800867a:	f104 000b 	add.w	r0, r4, #11
 800867e:	1d23      	adds	r3, r4, #4
 8008680:	f020 0007 	bic.w	r0, r0, #7
 8008684:	1ac2      	subs	r2, r0, r3
 8008686:	bf1c      	itt	ne
 8008688:	1a1b      	subne	r3, r3, r0
 800868a:	50a3      	strne	r3, [r4, r2]
 800868c:	e7af      	b.n	80085ee <_malloc_r+0x22>
 800868e:	6862      	ldr	r2, [r4, #4]
 8008690:	42a3      	cmp	r3, r4
 8008692:	bf0c      	ite	eq
 8008694:	f8c8 2000 	streq.w	r2, [r8]
 8008698:	605a      	strne	r2, [r3, #4]
 800869a:	e7eb      	b.n	8008674 <_malloc_r+0xa8>
 800869c:	4623      	mov	r3, r4
 800869e:	6864      	ldr	r4, [r4, #4]
 80086a0:	e7ae      	b.n	8008600 <_malloc_r+0x34>
 80086a2:	463c      	mov	r4, r7
 80086a4:	687f      	ldr	r7, [r7, #4]
 80086a6:	e7b6      	b.n	8008616 <_malloc_r+0x4a>
 80086a8:	461a      	mov	r2, r3
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d1fb      	bne.n	80086a8 <_malloc_r+0xdc>
 80086b0:	2300      	movs	r3, #0
 80086b2:	6053      	str	r3, [r2, #4]
 80086b4:	e7de      	b.n	8008674 <_malloc_r+0xa8>
 80086b6:	230c      	movs	r3, #12
 80086b8:	4630      	mov	r0, r6
 80086ba:	6033      	str	r3, [r6, #0]
 80086bc:	f000 f80c 	bl	80086d8 <__malloc_unlock>
 80086c0:	e794      	b.n	80085ec <_malloc_r+0x20>
 80086c2:	6005      	str	r5, [r0, #0]
 80086c4:	e7d6      	b.n	8008674 <_malloc_r+0xa8>
 80086c6:	bf00      	nop
 80086c8:	200006e8 	.word	0x200006e8

080086cc <__malloc_lock>:
 80086cc:	4801      	ldr	r0, [pc, #4]	@ (80086d4 <__malloc_lock+0x8>)
 80086ce:	f7ff b8a8 	b.w	8007822 <__retarget_lock_acquire_recursive>
 80086d2:	bf00      	nop
 80086d4:	200006e0 	.word	0x200006e0

080086d8 <__malloc_unlock>:
 80086d8:	4801      	ldr	r0, [pc, #4]	@ (80086e0 <__malloc_unlock+0x8>)
 80086da:	f7ff b8a3 	b.w	8007824 <__retarget_lock_release_recursive>
 80086de:	bf00      	nop
 80086e0:	200006e0 	.word	0x200006e0

080086e4 <_Balloc>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	69c6      	ldr	r6, [r0, #28]
 80086e8:	4604      	mov	r4, r0
 80086ea:	460d      	mov	r5, r1
 80086ec:	b976      	cbnz	r6, 800870c <_Balloc+0x28>
 80086ee:	2010      	movs	r0, #16
 80086f0:	f7ff ff42 	bl	8008578 <malloc>
 80086f4:	4602      	mov	r2, r0
 80086f6:	61e0      	str	r0, [r4, #28]
 80086f8:	b920      	cbnz	r0, 8008704 <_Balloc+0x20>
 80086fa:	216b      	movs	r1, #107	@ 0x6b
 80086fc:	4b17      	ldr	r3, [pc, #92]	@ (800875c <_Balloc+0x78>)
 80086fe:	4818      	ldr	r0, [pc, #96]	@ (8008760 <_Balloc+0x7c>)
 8008700:	f000 fda8 	bl	8009254 <__assert_func>
 8008704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008708:	6006      	str	r6, [r0, #0]
 800870a:	60c6      	str	r6, [r0, #12]
 800870c:	69e6      	ldr	r6, [r4, #28]
 800870e:	68f3      	ldr	r3, [r6, #12]
 8008710:	b183      	cbz	r3, 8008734 <_Balloc+0x50>
 8008712:	69e3      	ldr	r3, [r4, #28]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800871a:	b9b8      	cbnz	r0, 800874c <_Balloc+0x68>
 800871c:	2101      	movs	r1, #1
 800871e:	fa01 f605 	lsl.w	r6, r1, r5
 8008722:	1d72      	adds	r2, r6, #5
 8008724:	4620      	mov	r0, r4
 8008726:	0092      	lsls	r2, r2, #2
 8008728:	f000 fdb2 	bl	8009290 <_calloc_r>
 800872c:	b160      	cbz	r0, 8008748 <_Balloc+0x64>
 800872e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008732:	e00e      	b.n	8008752 <_Balloc+0x6e>
 8008734:	2221      	movs	r2, #33	@ 0x21
 8008736:	2104      	movs	r1, #4
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fda9 	bl	8009290 <_calloc_r>
 800873e:	69e3      	ldr	r3, [r4, #28]
 8008740:	60f0      	str	r0, [r6, #12]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e4      	bne.n	8008712 <_Balloc+0x2e>
 8008748:	2000      	movs	r0, #0
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	6802      	ldr	r2, [r0, #0]
 800874e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008752:	2300      	movs	r3, #0
 8008754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008758:	e7f7      	b.n	800874a <_Balloc+0x66>
 800875a:	bf00      	nop
 800875c:	08009966 	.word	0x08009966
 8008760:	080099e6 	.word	0x080099e6

08008764 <_Bfree>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	69c6      	ldr	r6, [r0, #28]
 8008768:	4605      	mov	r5, r0
 800876a:	460c      	mov	r4, r1
 800876c:	b976      	cbnz	r6, 800878c <_Bfree+0x28>
 800876e:	2010      	movs	r0, #16
 8008770:	f7ff ff02 	bl	8008578 <malloc>
 8008774:	4602      	mov	r2, r0
 8008776:	61e8      	str	r0, [r5, #28]
 8008778:	b920      	cbnz	r0, 8008784 <_Bfree+0x20>
 800877a:	218f      	movs	r1, #143	@ 0x8f
 800877c:	4b08      	ldr	r3, [pc, #32]	@ (80087a0 <_Bfree+0x3c>)
 800877e:	4809      	ldr	r0, [pc, #36]	@ (80087a4 <_Bfree+0x40>)
 8008780:	f000 fd68 	bl	8009254 <__assert_func>
 8008784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008788:	6006      	str	r6, [r0, #0]
 800878a:	60c6      	str	r6, [r0, #12]
 800878c:	b13c      	cbz	r4, 800879e <_Bfree+0x3a>
 800878e:	69eb      	ldr	r3, [r5, #28]
 8008790:	6862      	ldr	r2, [r4, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008798:	6021      	str	r1, [r4, #0]
 800879a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	08009966 	.word	0x08009966
 80087a4:	080099e6 	.word	0x080099e6

080087a8 <__multadd>:
 80087a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ac:	4607      	mov	r7, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	461e      	mov	r6, r3
 80087b2:	2000      	movs	r0, #0
 80087b4:	690d      	ldr	r5, [r1, #16]
 80087b6:	f101 0c14 	add.w	ip, r1, #20
 80087ba:	f8dc 3000 	ldr.w	r3, [ip]
 80087be:	3001      	adds	r0, #1
 80087c0:	b299      	uxth	r1, r3
 80087c2:	fb02 6101 	mla	r1, r2, r1, r6
 80087c6:	0c1e      	lsrs	r6, r3, #16
 80087c8:	0c0b      	lsrs	r3, r1, #16
 80087ca:	fb02 3306 	mla	r3, r2, r6, r3
 80087ce:	b289      	uxth	r1, r1
 80087d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087d4:	4285      	cmp	r5, r0
 80087d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087da:	f84c 1b04 	str.w	r1, [ip], #4
 80087de:	dcec      	bgt.n	80087ba <__multadd+0x12>
 80087e0:	b30e      	cbz	r6, 8008826 <__multadd+0x7e>
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	42ab      	cmp	r3, r5
 80087e6:	dc19      	bgt.n	800881c <__multadd+0x74>
 80087e8:	6861      	ldr	r1, [r4, #4]
 80087ea:	4638      	mov	r0, r7
 80087ec:	3101      	adds	r1, #1
 80087ee:	f7ff ff79 	bl	80086e4 <_Balloc>
 80087f2:	4680      	mov	r8, r0
 80087f4:	b928      	cbnz	r0, 8008802 <__multadd+0x5a>
 80087f6:	4602      	mov	r2, r0
 80087f8:	21ba      	movs	r1, #186	@ 0xba
 80087fa:	4b0c      	ldr	r3, [pc, #48]	@ (800882c <__multadd+0x84>)
 80087fc:	480c      	ldr	r0, [pc, #48]	@ (8008830 <__multadd+0x88>)
 80087fe:	f000 fd29 	bl	8009254 <__assert_func>
 8008802:	6922      	ldr	r2, [r4, #16]
 8008804:	f104 010c 	add.w	r1, r4, #12
 8008808:	3202      	adds	r2, #2
 800880a:	0092      	lsls	r2, r2, #2
 800880c:	300c      	adds	r0, #12
 800880e:	f000 fd13 	bl	8009238 <memcpy>
 8008812:	4621      	mov	r1, r4
 8008814:	4638      	mov	r0, r7
 8008816:	f7ff ffa5 	bl	8008764 <_Bfree>
 800881a:	4644      	mov	r4, r8
 800881c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008820:	3501      	adds	r5, #1
 8008822:	615e      	str	r6, [r3, #20]
 8008824:	6125      	str	r5, [r4, #16]
 8008826:	4620      	mov	r0, r4
 8008828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800882c:	080099d5 	.word	0x080099d5
 8008830:	080099e6 	.word	0x080099e6

08008834 <__hi0bits>:
 8008834:	4603      	mov	r3, r0
 8008836:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800883a:	bf3a      	itte	cc
 800883c:	0403      	lslcc	r3, r0, #16
 800883e:	2010      	movcc	r0, #16
 8008840:	2000      	movcs	r0, #0
 8008842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008846:	bf3c      	itt	cc
 8008848:	021b      	lslcc	r3, r3, #8
 800884a:	3008      	addcc	r0, #8
 800884c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008850:	bf3c      	itt	cc
 8008852:	011b      	lslcc	r3, r3, #4
 8008854:	3004      	addcc	r0, #4
 8008856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800885a:	bf3c      	itt	cc
 800885c:	009b      	lslcc	r3, r3, #2
 800885e:	3002      	addcc	r0, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	db05      	blt.n	8008870 <__hi0bits+0x3c>
 8008864:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008868:	f100 0001 	add.w	r0, r0, #1
 800886c:	bf08      	it	eq
 800886e:	2020      	moveq	r0, #32
 8008870:	4770      	bx	lr

08008872 <__lo0bits>:
 8008872:	6803      	ldr	r3, [r0, #0]
 8008874:	4602      	mov	r2, r0
 8008876:	f013 0007 	ands.w	r0, r3, #7
 800887a:	d00b      	beq.n	8008894 <__lo0bits+0x22>
 800887c:	07d9      	lsls	r1, r3, #31
 800887e:	d421      	bmi.n	80088c4 <__lo0bits+0x52>
 8008880:	0798      	lsls	r0, r3, #30
 8008882:	bf49      	itett	mi
 8008884:	085b      	lsrmi	r3, r3, #1
 8008886:	089b      	lsrpl	r3, r3, #2
 8008888:	2001      	movmi	r0, #1
 800888a:	6013      	strmi	r3, [r2, #0]
 800888c:	bf5c      	itt	pl
 800888e:	2002      	movpl	r0, #2
 8008890:	6013      	strpl	r3, [r2, #0]
 8008892:	4770      	bx	lr
 8008894:	b299      	uxth	r1, r3
 8008896:	b909      	cbnz	r1, 800889c <__lo0bits+0x2a>
 8008898:	2010      	movs	r0, #16
 800889a:	0c1b      	lsrs	r3, r3, #16
 800889c:	b2d9      	uxtb	r1, r3
 800889e:	b909      	cbnz	r1, 80088a4 <__lo0bits+0x32>
 80088a0:	3008      	adds	r0, #8
 80088a2:	0a1b      	lsrs	r3, r3, #8
 80088a4:	0719      	lsls	r1, r3, #28
 80088a6:	bf04      	itt	eq
 80088a8:	091b      	lsreq	r3, r3, #4
 80088aa:	3004      	addeq	r0, #4
 80088ac:	0799      	lsls	r1, r3, #30
 80088ae:	bf04      	itt	eq
 80088b0:	089b      	lsreq	r3, r3, #2
 80088b2:	3002      	addeq	r0, #2
 80088b4:	07d9      	lsls	r1, r3, #31
 80088b6:	d403      	bmi.n	80088c0 <__lo0bits+0x4e>
 80088b8:	085b      	lsrs	r3, r3, #1
 80088ba:	f100 0001 	add.w	r0, r0, #1
 80088be:	d003      	beq.n	80088c8 <__lo0bits+0x56>
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	4770      	bx	lr
 80088c4:	2000      	movs	r0, #0
 80088c6:	4770      	bx	lr
 80088c8:	2020      	movs	r0, #32
 80088ca:	4770      	bx	lr

080088cc <__i2b>:
 80088cc:	b510      	push	{r4, lr}
 80088ce:	460c      	mov	r4, r1
 80088d0:	2101      	movs	r1, #1
 80088d2:	f7ff ff07 	bl	80086e4 <_Balloc>
 80088d6:	4602      	mov	r2, r0
 80088d8:	b928      	cbnz	r0, 80088e6 <__i2b+0x1a>
 80088da:	f240 1145 	movw	r1, #325	@ 0x145
 80088de:	4b04      	ldr	r3, [pc, #16]	@ (80088f0 <__i2b+0x24>)
 80088e0:	4804      	ldr	r0, [pc, #16]	@ (80088f4 <__i2b+0x28>)
 80088e2:	f000 fcb7 	bl	8009254 <__assert_func>
 80088e6:	2301      	movs	r3, #1
 80088e8:	6144      	str	r4, [r0, #20]
 80088ea:	6103      	str	r3, [r0, #16]
 80088ec:	bd10      	pop	{r4, pc}
 80088ee:	bf00      	nop
 80088f0:	080099d5 	.word	0x080099d5
 80088f4:	080099e6 	.word	0x080099e6

080088f8 <__multiply>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	4614      	mov	r4, r2
 80088fe:	690a      	ldr	r2, [r1, #16]
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	460f      	mov	r7, r1
 8008904:	429a      	cmp	r2, r3
 8008906:	bfa2      	ittt	ge
 8008908:	4623      	movge	r3, r4
 800890a:	460c      	movge	r4, r1
 800890c:	461f      	movge	r7, r3
 800890e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008912:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008916:	68a3      	ldr	r3, [r4, #8]
 8008918:	6861      	ldr	r1, [r4, #4]
 800891a:	eb0a 0609 	add.w	r6, sl, r9
 800891e:	42b3      	cmp	r3, r6
 8008920:	b085      	sub	sp, #20
 8008922:	bfb8      	it	lt
 8008924:	3101      	addlt	r1, #1
 8008926:	f7ff fedd 	bl	80086e4 <_Balloc>
 800892a:	b930      	cbnz	r0, 800893a <__multiply+0x42>
 800892c:	4602      	mov	r2, r0
 800892e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008932:	4b43      	ldr	r3, [pc, #268]	@ (8008a40 <__multiply+0x148>)
 8008934:	4843      	ldr	r0, [pc, #268]	@ (8008a44 <__multiply+0x14c>)
 8008936:	f000 fc8d 	bl	8009254 <__assert_func>
 800893a:	f100 0514 	add.w	r5, r0, #20
 800893e:	462b      	mov	r3, r5
 8008940:	2200      	movs	r2, #0
 8008942:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008946:	4543      	cmp	r3, r8
 8008948:	d321      	bcc.n	800898e <__multiply+0x96>
 800894a:	f107 0114 	add.w	r1, r7, #20
 800894e:	f104 0214 	add.w	r2, r4, #20
 8008952:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008956:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800895a:	9302      	str	r3, [sp, #8]
 800895c:	1b13      	subs	r3, r2, r4
 800895e:	3b15      	subs	r3, #21
 8008960:	f023 0303 	bic.w	r3, r3, #3
 8008964:	3304      	adds	r3, #4
 8008966:	f104 0715 	add.w	r7, r4, #21
 800896a:	42ba      	cmp	r2, r7
 800896c:	bf38      	it	cc
 800896e:	2304      	movcc	r3, #4
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	9b02      	ldr	r3, [sp, #8]
 8008974:	9103      	str	r1, [sp, #12]
 8008976:	428b      	cmp	r3, r1
 8008978:	d80c      	bhi.n	8008994 <__multiply+0x9c>
 800897a:	2e00      	cmp	r6, #0
 800897c:	dd03      	ble.n	8008986 <__multiply+0x8e>
 800897e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008982:	2b00      	cmp	r3, #0
 8008984:	d05a      	beq.n	8008a3c <__multiply+0x144>
 8008986:	6106      	str	r6, [r0, #16]
 8008988:	b005      	add	sp, #20
 800898a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898e:	f843 2b04 	str.w	r2, [r3], #4
 8008992:	e7d8      	b.n	8008946 <__multiply+0x4e>
 8008994:	f8b1 a000 	ldrh.w	sl, [r1]
 8008998:	f1ba 0f00 	cmp.w	sl, #0
 800899c:	d023      	beq.n	80089e6 <__multiply+0xee>
 800899e:	46a9      	mov	r9, r5
 80089a0:	f04f 0c00 	mov.w	ip, #0
 80089a4:	f104 0e14 	add.w	lr, r4, #20
 80089a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089ac:	f8d9 3000 	ldr.w	r3, [r9]
 80089b0:	fa1f fb87 	uxth.w	fp, r7
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	fb0a 330b 	mla	r3, sl, fp, r3
 80089ba:	4463      	add	r3, ip
 80089bc:	f8d9 c000 	ldr.w	ip, [r9]
 80089c0:	0c3f      	lsrs	r7, r7, #16
 80089c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80089c6:	fb0a c707 	mla	r7, sl, r7, ip
 80089ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80089d4:	4572      	cmp	r2, lr
 80089d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089da:	f849 3b04 	str.w	r3, [r9], #4
 80089de:	d8e3      	bhi.n	80089a8 <__multiply+0xb0>
 80089e0:	9b01      	ldr	r3, [sp, #4]
 80089e2:	f845 c003 	str.w	ip, [r5, r3]
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	3104      	adds	r1, #4
 80089ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80089ee:	f1b9 0f00 	cmp.w	r9, #0
 80089f2:	d021      	beq.n	8008a38 <__multiply+0x140>
 80089f4:	46ae      	mov	lr, r5
 80089f6:	f04f 0a00 	mov.w	sl, #0
 80089fa:	682b      	ldr	r3, [r5, #0]
 80089fc:	f104 0c14 	add.w	ip, r4, #20
 8008a00:	f8bc b000 	ldrh.w	fp, [ip]
 8008a04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	fb09 770b 	mla	r7, r9, fp, r7
 8008a0e:	4457      	add	r7, sl
 8008a10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a14:	f84e 3b04 	str.w	r3, [lr], #4
 8008a18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a20:	f8be 3000 	ldrh.w	r3, [lr]
 8008a24:	4562      	cmp	r2, ip
 8008a26:	fb09 330a 	mla	r3, r9, sl, r3
 8008a2a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008a2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a32:	d8e5      	bhi.n	8008a00 <__multiply+0x108>
 8008a34:	9f01      	ldr	r7, [sp, #4]
 8008a36:	51eb      	str	r3, [r5, r7]
 8008a38:	3504      	adds	r5, #4
 8008a3a:	e79a      	b.n	8008972 <__multiply+0x7a>
 8008a3c:	3e01      	subs	r6, #1
 8008a3e:	e79c      	b.n	800897a <__multiply+0x82>
 8008a40:	080099d5 	.word	0x080099d5
 8008a44:	080099e6 	.word	0x080099e6

08008a48 <__pow5mult>:
 8008a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a4c:	4615      	mov	r5, r2
 8008a4e:	f012 0203 	ands.w	r2, r2, #3
 8008a52:	4607      	mov	r7, r0
 8008a54:	460e      	mov	r6, r1
 8008a56:	d007      	beq.n	8008a68 <__pow5mult+0x20>
 8008a58:	4c25      	ldr	r4, [pc, #148]	@ (8008af0 <__pow5mult+0xa8>)
 8008a5a:	3a01      	subs	r2, #1
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a62:	f7ff fea1 	bl	80087a8 <__multadd>
 8008a66:	4606      	mov	r6, r0
 8008a68:	10ad      	asrs	r5, r5, #2
 8008a6a:	d03d      	beq.n	8008ae8 <__pow5mult+0xa0>
 8008a6c:	69fc      	ldr	r4, [r7, #28]
 8008a6e:	b97c      	cbnz	r4, 8008a90 <__pow5mult+0x48>
 8008a70:	2010      	movs	r0, #16
 8008a72:	f7ff fd81 	bl	8008578 <malloc>
 8008a76:	4602      	mov	r2, r0
 8008a78:	61f8      	str	r0, [r7, #28]
 8008a7a:	b928      	cbnz	r0, 8008a88 <__pow5mult+0x40>
 8008a7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a80:	4b1c      	ldr	r3, [pc, #112]	@ (8008af4 <__pow5mult+0xac>)
 8008a82:	481d      	ldr	r0, [pc, #116]	@ (8008af8 <__pow5mult+0xb0>)
 8008a84:	f000 fbe6 	bl	8009254 <__assert_func>
 8008a88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a8c:	6004      	str	r4, [r0, #0]
 8008a8e:	60c4      	str	r4, [r0, #12]
 8008a90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a98:	b94c      	cbnz	r4, 8008aae <__pow5mult+0x66>
 8008a9a:	f240 2171 	movw	r1, #625	@ 0x271
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f7ff ff14 	bl	80088cc <__i2b>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	f8c8 0008 	str.w	r0, [r8, #8]
 8008aac:	6003      	str	r3, [r0, #0]
 8008aae:	f04f 0900 	mov.w	r9, #0
 8008ab2:	07eb      	lsls	r3, r5, #31
 8008ab4:	d50a      	bpl.n	8008acc <__pow5mult+0x84>
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4622      	mov	r2, r4
 8008aba:	4638      	mov	r0, r7
 8008abc:	f7ff ff1c 	bl	80088f8 <__multiply>
 8008ac0:	4680      	mov	r8, r0
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f7ff fe4d 	bl	8008764 <_Bfree>
 8008aca:	4646      	mov	r6, r8
 8008acc:	106d      	asrs	r5, r5, #1
 8008ace:	d00b      	beq.n	8008ae8 <__pow5mult+0xa0>
 8008ad0:	6820      	ldr	r0, [r4, #0]
 8008ad2:	b938      	cbnz	r0, 8008ae4 <__pow5mult+0x9c>
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4638      	mov	r0, r7
 8008ada:	f7ff ff0d 	bl	80088f8 <__multiply>
 8008ade:	6020      	str	r0, [r4, #0]
 8008ae0:	f8c0 9000 	str.w	r9, [r0]
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	e7e4      	b.n	8008ab2 <__pow5mult+0x6a>
 8008ae8:	4630      	mov	r0, r6
 8008aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aee:	bf00      	nop
 8008af0:	08009a40 	.word	0x08009a40
 8008af4:	08009966 	.word	0x08009966
 8008af8:	080099e6 	.word	0x080099e6

08008afc <__lshift>:
 8008afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b00:	460c      	mov	r4, r1
 8008b02:	4607      	mov	r7, r0
 8008b04:	4691      	mov	r9, r2
 8008b06:	6923      	ldr	r3, [r4, #16]
 8008b08:	6849      	ldr	r1, [r1, #4]
 8008b0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b0e:	68a3      	ldr	r3, [r4, #8]
 8008b10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b14:	f108 0601 	add.w	r6, r8, #1
 8008b18:	42b3      	cmp	r3, r6
 8008b1a:	db0b      	blt.n	8008b34 <__lshift+0x38>
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	f7ff fde1 	bl	80086e4 <_Balloc>
 8008b22:	4605      	mov	r5, r0
 8008b24:	b948      	cbnz	r0, 8008b3a <__lshift+0x3e>
 8008b26:	4602      	mov	r2, r0
 8008b28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b2c:	4b27      	ldr	r3, [pc, #156]	@ (8008bcc <__lshift+0xd0>)
 8008b2e:	4828      	ldr	r0, [pc, #160]	@ (8008bd0 <__lshift+0xd4>)
 8008b30:	f000 fb90 	bl	8009254 <__assert_func>
 8008b34:	3101      	adds	r1, #1
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	e7ee      	b.n	8008b18 <__lshift+0x1c>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f100 0114 	add.w	r1, r0, #20
 8008b40:	f100 0210 	add.w	r2, r0, #16
 8008b44:	4618      	mov	r0, r3
 8008b46:	4553      	cmp	r3, sl
 8008b48:	db33      	blt.n	8008bb2 <__lshift+0xb6>
 8008b4a:	6920      	ldr	r0, [r4, #16]
 8008b4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b50:	f104 0314 	add.w	r3, r4, #20
 8008b54:	f019 091f 	ands.w	r9, r9, #31
 8008b58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b60:	d02b      	beq.n	8008bba <__lshift+0xbe>
 8008b62:	468a      	mov	sl, r1
 8008b64:	2200      	movs	r2, #0
 8008b66:	f1c9 0e20 	rsb	lr, r9, #32
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	fa00 f009 	lsl.w	r0, r0, r9
 8008b70:	4310      	orrs	r0, r2
 8008b72:	f84a 0b04 	str.w	r0, [sl], #4
 8008b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7a:	459c      	cmp	ip, r3
 8008b7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b80:	d8f3      	bhi.n	8008b6a <__lshift+0x6e>
 8008b82:	ebac 0304 	sub.w	r3, ip, r4
 8008b86:	3b15      	subs	r3, #21
 8008b88:	f023 0303 	bic.w	r3, r3, #3
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	f104 0015 	add.w	r0, r4, #21
 8008b92:	4584      	cmp	ip, r0
 8008b94:	bf38      	it	cc
 8008b96:	2304      	movcc	r3, #4
 8008b98:	50ca      	str	r2, [r1, r3]
 8008b9a:	b10a      	cbz	r2, 8008ba0 <__lshift+0xa4>
 8008b9c:	f108 0602 	add.w	r6, r8, #2
 8008ba0:	3e01      	subs	r6, #1
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	612e      	str	r6, [r5, #16]
 8008ba8:	f7ff fddc 	bl	8008764 <_Bfree>
 8008bac:	4628      	mov	r0, r5
 8008bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	e7c5      	b.n	8008b46 <__lshift+0x4a>
 8008bba:	3904      	subs	r1, #4
 8008bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bc0:	459c      	cmp	ip, r3
 8008bc2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bc6:	d8f9      	bhi.n	8008bbc <__lshift+0xc0>
 8008bc8:	e7ea      	b.n	8008ba0 <__lshift+0xa4>
 8008bca:	bf00      	nop
 8008bcc:	080099d5 	.word	0x080099d5
 8008bd0:	080099e6 	.word	0x080099e6

08008bd4 <__mcmp>:
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	690a      	ldr	r2, [r1, #16]
 8008bd8:	6900      	ldr	r0, [r0, #16]
 8008bda:	b530      	push	{r4, r5, lr}
 8008bdc:	1a80      	subs	r0, r0, r2
 8008bde:	d10e      	bne.n	8008bfe <__mcmp+0x2a>
 8008be0:	3314      	adds	r3, #20
 8008be2:	3114      	adds	r1, #20
 8008be4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008be8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008bf4:	4295      	cmp	r5, r2
 8008bf6:	d003      	beq.n	8008c00 <__mcmp+0x2c>
 8008bf8:	d205      	bcs.n	8008c06 <__mcmp+0x32>
 8008bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfe:	bd30      	pop	{r4, r5, pc}
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	d3f3      	bcc.n	8008bec <__mcmp+0x18>
 8008c04:	e7fb      	b.n	8008bfe <__mcmp+0x2a>
 8008c06:	2001      	movs	r0, #1
 8008c08:	e7f9      	b.n	8008bfe <__mcmp+0x2a>
	...

08008c0c <__mdiff>:
 8008c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	4689      	mov	r9, r1
 8008c12:	4606      	mov	r6, r0
 8008c14:	4611      	mov	r1, r2
 8008c16:	4648      	mov	r0, r9
 8008c18:	4614      	mov	r4, r2
 8008c1a:	f7ff ffdb 	bl	8008bd4 <__mcmp>
 8008c1e:	1e05      	subs	r5, r0, #0
 8008c20:	d112      	bne.n	8008c48 <__mdiff+0x3c>
 8008c22:	4629      	mov	r1, r5
 8008c24:	4630      	mov	r0, r6
 8008c26:	f7ff fd5d 	bl	80086e4 <_Balloc>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	b928      	cbnz	r0, 8008c3a <__mdiff+0x2e>
 8008c2e:	f240 2137 	movw	r1, #567	@ 0x237
 8008c32:	4b3e      	ldr	r3, [pc, #248]	@ (8008d2c <__mdiff+0x120>)
 8008c34:	483e      	ldr	r0, [pc, #248]	@ (8008d30 <__mdiff+0x124>)
 8008c36:	f000 fb0d 	bl	8009254 <__assert_func>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c40:	4610      	mov	r0, r2
 8008c42:	b003      	add	sp, #12
 8008c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c48:	bfbc      	itt	lt
 8008c4a:	464b      	movlt	r3, r9
 8008c4c:	46a1      	movlt	r9, r4
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c54:	bfba      	itte	lt
 8008c56:	461c      	movlt	r4, r3
 8008c58:	2501      	movlt	r5, #1
 8008c5a:	2500      	movge	r5, #0
 8008c5c:	f7ff fd42 	bl	80086e4 <_Balloc>
 8008c60:	4602      	mov	r2, r0
 8008c62:	b918      	cbnz	r0, 8008c6c <__mdiff+0x60>
 8008c64:	f240 2145 	movw	r1, #581	@ 0x245
 8008c68:	4b30      	ldr	r3, [pc, #192]	@ (8008d2c <__mdiff+0x120>)
 8008c6a:	e7e3      	b.n	8008c34 <__mdiff+0x28>
 8008c6c:	f100 0b14 	add.w	fp, r0, #20
 8008c70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c74:	f109 0310 	add.w	r3, r9, #16
 8008c78:	60c5      	str	r5, [r0, #12]
 8008c7a:	f04f 0c00 	mov.w	ip, #0
 8008c7e:	f109 0514 	add.w	r5, r9, #20
 8008c82:	46d9      	mov	r9, fp
 8008c84:	6926      	ldr	r6, [r4, #16]
 8008c86:	f104 0e14 	add.w	lr, r4, #20
 8008c8a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c8e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	9b01      	ldr	r3, [sp, #4]
 8008c96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c9e:	b281      	uxth	r1, r0
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	fa1f f38a 	uxth.w	r3, sl
 8008ca6:	1a5b      	subs	r3, r3, r1
 8008ca8:	0c00      	lsrs	r0, r0, #16
 8008caa:	4463      	add	r3, ip
 8008cac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008cb0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008cba:	4576      	cmp	r6, lr
 8008cbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cc0:	f849 3b04 	str.w	r3, [r9], #4
 8008cc4:	d8e6      	bhi.n	8008c94 <__mdiff+0x88>
 8008cc6:	1b33      	subs	r3, r6, r4
 8008cc8:	3b15      	subs	r3, #21
 8008cca:	f023 0303 	bic.w	r3, r3, #3
 8008cce:	3415      	adds	r4, #21
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	42a6      	cmp	r6, r4
 8008cd4:	bf38      	it	cc
 8008cd6:	2304      	movcc	r3, #4
 8008cd8:	441d      	add	r5, r3
 8008cda:	445b      	add	r3, fp
 8008cdc:	461e      	mov	r6, r3
 8008cde:	462c      	mov	r4, r5
 8008ce0:	4544      	cmp	r4, r8
 8008ce2:	d30e      	bcc.n	8008d02 <__mdiff+0xf6>
 8008ce4:	f108 0103 	add.w	r1, r8, #3
 8008ce8:	1b49      	subs	r1, r1, r5
 8008cea:	f021 0103 	bic.w	r1, r1, #3
 8008cee:	3d03      	subs	r5, #3
 8008cf0:	45a8      	cmp	r8, r5
 8008cf2:	bf38      	it	cc
 8008cf4:	2100      	movcc	r1, #0
 8008cf6:	440b      	add	r3, r1
 8008cf8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cfc:	b199      	cbz	r1, 8008d26 <__mdiff+0x11a>
 8008cfe:	6117      	str	r7, [r2, #16]
 8008d00:	e79e      	b.n	8008c40 <__mdiff+0x34>
 8008d02:	46e6      	mov	lr, ip
 8008d04:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d08:	fa1f fc81 	uxth.w	ip, r1
 8008d0c:	44f4      	add	ip, lr
 8008d0e:	0c08      	lsrs	r0, r1, #16
 8008d10:	4471      	add	r1, lr
 8008d12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d16:	b289      	uxth	r1, r1
 8008d18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d20:	f846 1b04 	str.w	r1, [r6], #4
 8008d24:	e7dc      	b.n	8008ce0 <__mdiff+0xd4>
 8008d26:	3f01      	subs	r7, #1
 8008d28:	e7e6      	b.n	8008cf8 <__mdiff+0xec>
 8008d2a:	bf00      	nop
 8008d2c:	080099d5 	.word	0x080099d5
 8008d30:	080099e6 	.word	0x080099e6

08008d34 <__d2b>:
 8008d34:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008d38:	2101      	movs	r1, #1
 8008d3a:	4690      	mov	r8, r2
 8008d3c:	4699      	mov	r9, r3
 8008d3e:	9e08      	ldr	r6, [sp, #32]
 8008d40:	f7ff fcd0 	bl	80086e4 <_Balloc>
 8008d44:	4604      	mov	r4, r0
 8008d46:	b930      	cbnz	r0, 8008d56 <__d2b+0x22>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d4e:	4b23      	ldr	r3, [pc, #140]	@ (8008ddc <__d2b+0xa8>)
 8008d50:	4823      	ldr	r0, [pc, #140]	@ (8008de0 <__d2b+0xac>)
 8008d52:	f000 fa7f 	bl	8009254 <__assert_func>
 8008d56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d5e:	b10d      	cbz	r5, 8008d64 <__d2b+0x30>
 8008d60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	f1b8 0300 	subs.w	r3, r8, #0
 8008d6a:	d024      	beq.n	8008db6 <__d2b+0x82>
 8008d6c:	4668      	mov	r0, sp
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	f7ff fd7f 	bl	8008872 <__lo0bits>
 8008d74:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d78:	b1d8      	cbz	r0, 8008db2 <__d2b+0x7e>
 8008d7a:	f1c0 0320 	rsb	r3, r0, #32
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	430b      	orrs	r3, r1
 8008d84:	40c2      	lsrs	r2, r0
 8008d86:	6163      	str	r3, [r4, #20]
 8008d88:	9201      	str	r2, [sp, #4]
 8008d8a:	9b01      	ldr	r3, [sp, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	bf0c      	ite	eq
 8008d90:	2201      	moveq	r2, #1
 8008d92:	2202      	movne	r2, #2
 8008d94:	61a3      	str	r3, [r4, #24]
 8008d96:	6122      	str	r2, [r4, #16]
 8008d98:	b1ad      	cbz	r5, 8008dc6 <__d2b+0x92>
 8008d9a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d9e:	4405      	add	r5, r0
 8008da0:	6035      	str	r5, [r6, #0]
 8008da2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008da8:	6018      	str	r0, [r3, #0]
 8008daa:	4620      	mov	r0, r4
 8008dac:	b002      	add	sp, #8
 8008dae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008db2:	6161      	str	r1, [r4, #20]
 8008db4:	e7e9      	b.n	8008d8a <__d2b+0x56>
 8008db6:	a801      	add	r0, sp, #4
 8008db8:	f7ff fd5b 	bl	8008872 <__lo0bits>
 8008dbc:	9b01      	ldr	r3, [sp, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	6163      	str	r3, [r4, #20]
 8008dc2:	3020      	adds	r0, #32
 8008dc4:	e7e7      	b.n	8008d96 <__d2b+0x62>
 8008dc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008dca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dce:	6030      	str	r0, [r6, #0]
 8008dd0:	6918      	ldr	r0, [r3, #16]
 8008dd2:	f7ff fd2f 	bl	8008834 <__hi0bits>
 8008dd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dda:	e7e4      	b.n	8008da6 <__d2b+0x72>
 8008ddc:	080099d5 	.word	0x080099d5
 8008de0:	080099e6 	.word	0x080099e6

08008de4 <__ssputs_r>:
 8008de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de8:	461f      	mov	r7, r3
 8008dea:	688e      	ldr	r6, [r1, #8]
 8008dec:	4682      	mov	sl, r0
 8008dee:	42be      	cmp	r6, r7
 8008df0:	460c      	mov	r4, r1
 8008df2:	4690      	mov	r8, r2
 8008df4:	680b      	ldr	r3, [r1, #0]
 8008df6:	d82d      	bhi.n	8008e54 <__ssputs_r+0x70>
 8008df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e00:	d026      	beq.n	8008e50 <__ssputs_r+0x6c>
 8008e02:	6965      	ldr	r5, [r4, #20]
 8008e04:	6909      	ldr	r1, [r1, #16]
 8008e06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e0a:	eba3 0901 	sub.w	r9, r3, r1
 8008e0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e12:	1c7b      	adds	r3, r7, #1
 8008e14:	444b      	add	r3, r9
 8008e16:	106d      	asrs	r5, r5, #1
 8008e18:	429d      	cmp	r5, r3
 8008e1a:	bf38      	it	cc
 8008e1c:	461d      	movcc	r5, r3
 8008e1e:	0553      	lsls	r3, r2, #21
 8008e20:	d527      	bpl.n	8008e72 <__ssputs_r+0x8e>
 8008e22:	4629      	mov	r1, r5
 8008e24:	f7ff fbd2 	bl	80085cc <_malloc_r>
 8008e28:	4606      	mov	r6, r0
 8008e2a:	b360      	cbz	r0, 8008e86 <__ssputs_r+0xa2>
 8008e2c:	464a      	mov	r2, r9
 8008e2e:	6921      	ldr	r1, [r4, #16]
 8008e30:	f000 fa02 	bl	8009238 <memcpy>
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e3e:	81a3      	strh	r3, [r4, #12]
 8008e40:	6126      	str	r6, [r4, #16]
 8008e42:	444e      	add	r6, r9
 8008e44:	6026      	str	r6, [r4, #0]
 8008e46:	463e      	mov	r6, r7
 8008e48:	6165      	str	r5, [r4, #20]
 8008e4a:	eba5 0509 	sub.w	r5, r5, r9
 8008e4e:	60a5      	str	r5, [r4, #8]
 8008e50:	42be      	cmp	r6, r7
 8008e52:	d900      	bls.n	8008e56 <__ssputs_r+0x72>
 8008e54:	463e      	mov	r6, r7
 8008e56:	4632      	mov	r2, r6
 8008e58:	4641      	mov	r1, r8
 8008e5a:	6820      	ldr	r0, [r4, #0]
 8008e5c:	f000 f9c2 	bl	80091e4 <memmove>
 8008e60:	2000      	movs	r0, #0
 8008e62:	68a3      	ldr	r3, [r4, #8]
 8008e64:	1b9b      	subs	r3, r3, r6
 8008e66:	60a3      	str	r3, [r4, #8]
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	4433      	add	r3, r6
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e72:	462a      	mov	r2, r5
 8008e74:	f000 fa32 	bl	80092dc <_realloc_r>
 8008e78:	4606      	mov	r6, r0
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d1e0      	bne.n	8008e40 <__ssputs_r+0x5c>
 8008e7e:	4650      	mov	r0, sl
 8008e80:	6921      	ldr	r1, [r4, #16]
 8008e82:	f7ff fb31 	bl	80084e8 <_free_r>
 8008e86:	230c      	movs	r3, #12
 8008e88:	f8ca 3000 	str.w	r3, [sl]
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e96:	81a3      	strh	r3, [r4, #12]
 8008e98:	e7e9      	b.n	8008e6e <__ssputs_r+0x8a>
	...

08008e9c <_svfiprintf_r>:
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	4698      	mov	r8, r3
 8008ea2:	898b      	ldrh	r3, [r1, #12]
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	061b      	lsls	r3, r3, #24
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	4614      	mov	r4, r2
 8008eac:	b09d      	sub	sp, #116	@ 0x74
 8008eae:	d510      	bpl.n	8008ed2 <_svfiprintf_r+0x36>
 8008eb0:	690b      	ldr	r3, [r1, #16]
 8008eb2:	b973      	cbnz	r3, 8008ed2 <_svfiprintf_r+0x36>
 8008eb4:	2140      	movs	r1, #64	@ 0x40
 8008eb6:	f7ff fb89 	bl	80085cc <_malloc_r>
 8008eba:	6028      	str	r0, [r5, #0]
 8008ebc:	6128      	str	r0, [r5, #16]
 8008ebe:	b930      	cbnz	r0, 8008ece <_svfiprintf_r+0x32>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec8:	b01d      	add	sp, #116	@ 0x74
 8008eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ece:	2340      	movs	r3, #64	@ 0x40
 8008ed0:	616b      	str	r3, [r5, #20]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ed6:	2320      	movs	r3, #32
 8008ed8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008edc:	2330      	movs	r3, #48	@ 0x30
 8008ede:	f04f 0901 	mov.w	r9, #1
 8008ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ee6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009080 <_svfiprintf_r+0x1e4>
 8008eea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eee:	4623      	mov	r3, r4
 8008ef0:	469a      	mov	sl, r3
 8008ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ef6:	b10a      	cbz	r2, 8008efc <_svfiprintf_r+0x60>
 8008ef8:	2a25      	cmp	r2, #37	@ 0x25
 8008efa:	d1f9      	bne.n	8008ef0 <_svfiprintf_r+0x54>
 8008efc:	ebba 0b04 	subs.w	fp, sl, r4
 8008f00:	d00b      	beq.n	8008f1a <_svfiprintf_r+0x7e>
 8008f02:	465b      	mov	r3, fp
 8008f04:	4622      	mov	r2, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff ff6b 	bl	8008de4 <__ssputs_r>
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f000 80a7 	beq.w	8009062 <_svfiprintf_r+0x1c6>
 8008f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f16:	445a      	add	r2, fp
 8008f18:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 809f 	beq.w	8009062 <_svfiprintf_r+0x1c6>
 8008f24:	2300      	movs	r3, #0
 8008f26:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f2e:	f10a 0a01 	add.w	sl, sl, #1
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	9307      	str	r3, [sp, #28]
 8008f36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f3c:	4654      	mov	r4, sl
 8008f3e:	2205      	movs	r2, #5
 8008f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f44:	484e      	ldr	r0, [pc, #312]	@ (8009080 <_svfiprintf_r+0x1e4>)
 8008f46:	f7fe fc6e 	bl	8007826 <memchr>
 8008f4a:	9a04      	ldr	r2, [sp, #16]
 8008f4c:	b9d8      	cbnz	r0, 8008f86 <_svfiprintf_r+0xea>
 8008f4e:	06d0      	lsls	r0, r2, #27
 8008f50:	bf44      	itt	mi
 8008f52:	2320      	movmi	r3, #32
 8008f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f58:	0711      	lsls	r1, r2, #28
 8008f5a:	bf44      	itt	mi
 8008f5c:	232b      	movmi	r3, #43	@ 0x2b
 8008f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f62:	f89a 3000 	ldrb.w	r3, [sl]
 8008f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f68:	d015      	beq.n	8008f96 <_svfiprintf_r+0xfa>
 8008f6a:	4654      	mov	r4, sl
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f04f 0c0a 	mov.w	ip, #10
 8008f72:	9a07      	ldr	r2, [sp, #28]
 8008f74:	4621      	mov	r1, r4
 8008f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f7a:	3b30      	subs	r3, #48	@ 0x30
 8008f7c:	2b09      	cmp	r3, #9
 8008f7e:	d94b      	bls.n	8009018 <_svfiprintf_r+0x17c>
 8008f80:	b1b0      	cbz	r0, 8008fb0 <_svfiprintf_r+0x114>
 8008f82:	9207      	str	r2, [sp, #28]
 8008f84:	e014      	b.n	8008fb0 <_svfiprintf_r+0x114>
 8008f86:	eba0 0308 	sub.w	r3, r0, r8
 8008f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	46a2      	mov	sl, r4
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	e7d2      	b.n	8008f3c <_svfiprintf_r+0xa0>
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	1d19      	adds	r1, r3, #4
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	9103      	str	r1, [sp, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bfbb      	ittet	lt
 8008fa2:	425b      	neglt	r3, r3
 8008fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8008fa8:	9307      	strge	r3, [sp, #28]
 8008faa:	9307      	strlt	r3, [sp, #28]
 8008fac:	bfb8      	it	lt
 8008fae:	9204      	strlt	r2, [sp, #16]
 8008fb0:	7823      	ldrb	r3, [r4, #0]
 8008fb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fb4:	d10a      	bne.n	8008fcc <_svfiprintf_r+0x130>
 8008fb6:	7863      	ldrb	r3, [r4, #1]
 8008fb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fba:	d132      	bne.n	8009022 <_svfiprintf_r+0x186>
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	3402      	adds	r4, #2
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	9203      	str	r2, [sp, #12]
 8008fc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fca:	9305      	str	r3, [sp, #20]
 8008fcc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009084 <_svfiprintf_r+0x1e8>
 8008fd0:	2203      	movs	r2, #3
 8008fd2:	4650      	mov	r0, sl
 8008fd4:	7821      	ldrb	r1, [r4, #0]
 8008fd6:	f7fe fc26 	bl	8007826 <memchr>
 8008fda:	b138      	cbz	r0, 8008fec <_svfiprintf_r+0x150>
 8008fdc:	2240      	movs	r2, #64	@ 0x40
 8008fde:	9b04      	ldr	r3, [sp, #16]
 8008fe0:	eba0 000a 	sub.w	r0, r0, sl
 8008fe4:	4082      	lsls	r2, r0
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	3401      	adds	r4, #1
 8008fea:	9304      	str	r3, [sp, #16]
 8008fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff0:	2206      	movs	r2, #6
 8008ff2:	4825      	ldr	r0, [pc, #148]	@ (8009088 <_svfiprintf_r+0x1ec>)
 8008ff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ff8:	f7fe fc15 	bl	8007826 <memchr>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d036      	beq.n	800906e <_svfiprintf_r+0x1d2>
 8009000:	4b22      	ldr	r3, [pc, #136]	@ (800908c <_svfiprintf_r+0x1f0>)
 8009002:	bb1b      	cbnz	r3, 800904c <_svfiprintf_r+0x1b0>
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	3307      	adds	r3, #7
 8009008:	f023 0307 	bic.w	r3, r3, #7
 800900c:	3308      	adds	r3, #8
 800900e:	9303      	str	r3, [sp, #12]
 8009010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009012:	4433      	add	r3, r6
 8009014:	9309      	str	r3, [sp, #36]	@ 0x24
 8009016:	e76a      	b.n	8008eee <_svfiprintf_r+0x52>
 8009018:	460c      	mov	r4, r1
 800901a:	2001      	movs	r0, #1
 800901c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009020:	e7a8      	b.n	8008f74 <_svfiprintf_r+0xd8>
 8009022:	2300      	movs	r3, #0
 8009024:	f04f 0c0a 	mov.w	ip, #10
 8009028:	4619      	mov	r1, r3
 800902a:	3401      	adds	r4, #1
 800902c:	9305      	str	r3, [sp, #20]
 800902e:	4620      	mov	r0, r4
 8009030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009034:	3a30      	subs	r2, #48	@ 0x30
 8009036:	2a09      	cmp	r2, #9
 8009038:	d903      	bls.n	8009042 <_svfiprintf_r+0x1a6>
 800903a:	2b00      	cmp	r3, #0
 800903c:	d0c6      	beq.n	8008fcc <_svfiprintf_r+0x130>
 800903e:	9105      	str	r1, [sp, #20]
 8009040:	e7c4      	b.n	8008fcc <_svfiprintf_r+0x130>
 8009042:	4604      	mov	r4, r0
 8009044:	2301      	movs	r3, #1
 8009046:	fb0c 2101 	mla	r1, ip, r1, r2
 800904a:	e7f0      	b.n	800902e <_svfiprintf_r+0x192>
 800904c:	ab03      	add	r3, sp, #12
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	462a      	mov	r2, r5
 8009052:	4638      	mov	r0, r7
 8009054:	4b0e      	ldr	r3, [pc, #56]	@ (8009090 <_svfiprintf_r+0x1f4>)
 8009056:	a904      	add	r1, sp, #16
 8009058:	f7fd fe82 	bl	8006d60 <_printf_float>
 800905c:	1c42      	adds	r2, r0, #1
 800905e:	4606      	mov	r6, r0
 8009060:	d1d6      	bne.n	8009010 <_svfiprintf_r+0x174>
 8009062:	89ab      	ldrh	r3, [r5, #12]
 8009064:	065b      	lsls	r3, r3, #25
 8009066:	f53f af2d 	bmi.w	8008ec4 <_svfiprintf_r+0x28>
 800906a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800906c:	e72c      	b.n	8008ec8 <_svfiprintf_r+0x2c>
 800906e:	ab03      	add	r3, sp, #12
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	462a      	mov	r2, r5
 8009074:	4638      	mov	r0, r7
 8009076:	4b06      	ldr	r3, [pc, #24]	@ (8009090 <_svfiprintf_r+0x1f4>)
 8009078:	a904      	add	r1, sp, #16
 800907a:	f7fe f90f 	bl	800729c <_printf_i>
 800907e:	e7ed      	b.n	800905c <_svfiprintf_r+0x1c0>
 8009080:	08009b40 	.word	0x08009b40
 8009084:	08009b46 	.word	0x08009b46
 8009088:	08009b4a 	.word	0x08009b4a
 800908c:	08006d61 	.word	0x08006d61
 8009090:	08008de5 	.word	0x08008de5

08009094 <__sflush_r>:
 8009094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	0716      	lsls	r6, r2, #28
 800909c:	4605      	mov	r5, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	d454      	bmi.n	800914c <__sflush_r+0xb8>
 80090a2:	684b      	ldr	r3, [r1, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dc02      	bgt.n	80090ae <__sflush_r+0x1a>
 80090a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dd48      	ble.n	8009140 <__sflush_r+0xac>
 80090ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090b0:	2e00      	cmp	r6, #0
 80090b2:	d045      	beq.n	8009140 <__sflush_r+0xac>
 80090b4:	2300      	movs	r3, #0
 80090b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090ba:	682f      	ldr	r7, [r5, #0]
 80090bc:	6a21      	ldr	r1, [r4, #32]
 80090be:	602b      	str	r3, [r5, #0]
 80090c0:	d030      	beq.n	8009124 <__sflush_r+0x90>
 80090c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	0759      	lsls	r1, r3, #29
 80090c8:	d505      	bpl.n	80090d6 <__sflush_r+0x42>
 80090ca:	6863      	ldr	r3, [r4, #4]
 80090cc:	1ad2      	subs	r2, r2, r3
 80090ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090d0:	b10b      	cbz	r3, 80090d6 <__sflush_r+0x42>
 80090d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090d4:	1ad2      	subs	r2, r2, r3
 80090d6:	2300      	movs	r3, #0
 80090d8:	4628      	mov	r0, r5
 80090da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090dc:	6a21      	ldr	r1, [r4, #32]
 80090de:	47b0      	blx	r6
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	d106      	bne.n	80090f4 <__sflush_r+0x60>
 80090e6:	6829      	ldr	r1, [r5, #0]
 80090e8:	291d      	cmp	r1, #29
 80090ea:	d82b      	bhi.n	8009144 <__sflush_r+0xb0>
 80090ec:	4a28      	ldr	r2, [pc, #160]	@ (8009190 <__sflush_r+0xfc>)
 80090ee:	410a      	asrs	r2, r1
 80090f0:	07d6      	lsls	r6, r2, #31
 80090f2:	d427      	bmi.n	8009144 <__sflush_r+0xb0>
 80090f4:	2200      	movs	r2, #0
 80090f6:	6062      	str	r2, [r4, #4]
 80090f8:	6922      	ldr	r2, [r4, #16]
 80090fa:	04d9      	lsls	r1, r3, #19
 80090fc:	6022      	str	r2, [r4, #0]
 80090fe:	d504      	bpl.n	800910a <__sflush_r+0x76>
 8009100:	1c42      	adds	r2, r0, #1
 8009102:	d101      	bne.n	8009108 <__sflush_r+0x74>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b903      	cbnz	r3, 800910a <__sflush_r+0x76>
 8009108:	6560      	str	r0, [r4, #84]	@ 0x54
 800910a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800910c:	602f      	str	r7, [r5, #0]
 800910e:	b1b9      	cbz	r1, 8009140 <__sflush_r+0xac>
 8009110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009114:	4299      	cmp	r1, r3
 8009116:	d002      	beq.n	800911e <__sflush_r+0x8a>
 8009118:	4628      	mov	r0, r5
 800911a:	f7ff f9e5 	bl	80084e8 <_free_r>
 800911e:	2300      	movs	r3, #0
 8009120:	6363      	str	r3, [r4, #52]	@ 0x34
 8009122:	e00d      	b.n	8009140 <__sflush_r+0xac>
 8009124:	2301      	movs	r3, #1
 8009126:	4628      	mov	r0, r5
 8009128:	47b0      	blx	r6
 800912a:	4602      	mov	r2, r0
 800912c:	1c50      	adds	r0, r2, #1
 800912e:	d1c9      	bne.n	80090c4 <__sflush_r+0x30>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0c6      	beq.n	80090c4 <__sflush_r+0x30>
 8009136:	2b1d      	cmp	r3, #29
 8009138:	d001      	beq.n	800913e <__sflush_r+0xaa>
 800913a:	2b16      	cmp	r3, #22
 800913c:	d11d      	bne.n	800917a <__sflush_r+0xe6>
 800913e:	602f      	str	r7, [r5, #0]
 8009140:	2000      	movs	r0, #0
 8009142:	e021      	b.n	8009188 <__sflush_r+0xf4>
 8009144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009148:	b21b      	sxth	r3, r3
 800914a:	e01a      	b.n	8009182 <__sflush_r+0xee>
 800914c:	690f      	ldr	r7, [r1, #16]
 800914e:	2f00      	cmp	r7, #0
 8009150:	d0f6      	beq.n	8009140 <__sflush_r+0xac>
 8009152:	0793      	lsls	r3, r2, #30
 8009154:	bf18      	it	ne
 8009156:	2300      	movne	r3, #0
 8009158:	680e      	ldr	r6, [r1, #0]
 800915a:	bf08      	it	eq
 800915c:	694b      	ldreq	r3, [r1, #20]
 800915e:	1bf6      	subs	r6, r6, r7
 8009160:	600f      	str	r7, [r1, #0]
 8009162:	608b      	str	r3, [r1, #8]
 8009164:	2e00      	cmp	r6, #0
 8009166:	ddeb      	ble.n	8009140 <__sflush_r+0xac>
 8009168:	4633      	mov	r3, r6
 800916a:	463a      	mov	r2, r7
 800916c:	4628      	mov	r0, r5
 800916e:	6a21      	ldr	r1, [r4, #32]
 8009170:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009174:	47e0      	blx	ip
 8009176:	2800      	cmp	r0, #0
 8009178:	dc07      	bgt.n	800918a <__sflush_r+0xf6>
 800917a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800917e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009182:	f04f 30ff 	mov.w	r0, #4294967295
 8009186:	81a3      	strh	r3, [r4, #12]
 8009188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918a:	4407      	add	r7, r0
 800918c:	1a36      	subs	r6, r6, r0
 800918e:	e7e9      	b.n	8009164 <__sflush_r+0xd0>
 8009190:	dfbffffe 	.word	0xdfbffffe

08009194 <_fflush_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	690b      	ldr	r3, [r1, #16]
 8009198:	4605      	mov	r5, r0
 800919a:	460c      	mov	r4, r1
 800919c:	b913      	cbnz	r3, 80091a4 <_fflush_r+0x10>
 800919e:	2500      	movs	r5, #0
 80091a0:	4628      	mov	r0, r5
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	b118      	cbz	r0, 80091ae <_fflush_r+0x1a>
 80091a6:	6a03      	ldr	r3, [r0, #32]
 80091a8:	b90b      	cbnz	r3, 80091ae <_fflush_r+0x1a>
 80091aa:	f7fe fa23 	bl	80075f4 <__sinit>
 80091ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f3      	beq.n	800919e <_fflush_r+0xa>
 80091b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091b8:	07d0      	lsls	r0, r2, #31
 80091ba:	d404      	bmi.n	80091c6 <_fflush_r+0x32>
 80091bc:	0599      	lsls	r1, r3, #22
 80091be:	d402      	bmi.n	80091c6 <_fflush_r+0x32>
 80091c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091c2:	f7fe fb2e 	bl	8007822 <__retarget_lock_acquire_recursive>
 80091c6:	4628      	mov	r0, r5
 80091c8:	4621      	mov	r1, r4
 80091ca:	f7ff ff63 	bl	8009094 <__sflush_r>
 80091ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091d0:	4605      	mov	r5, r0
 80091d2:	07da      	lsls	r2, r3, #31
 80091d4:	d4e4      	bmi.n	80091a0 <_fflush_r+0xc>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	059b      	lsls	r3, r3, #22
 80091da:	d4e1      	bmi.n	80091a0 <_fflush_r+0xc>
 80091dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091de:	f7fe fb21 	bl	8007824 <__retarget_lock_release_recursive>
 80091e2:	e7dd      	b.n	80091a0 <_fflush_r+0xc>

080091e4 <memmove>:
 80091e4:	4288      	cmp	r0, r1
 80091e6:	b510      	push	{r4, lr}
 80091e8:	eb01 0402 	add.w	r4, r1, r2
 80091ec:	d902      	bls.n	80091f4 <memmove+0x10>
 80091ee:	4284      	cmp	r4, r0
 80091f0:	4623      	mov	r3, r4
 80091f2:	d807      	bhi.n	8009204 <memmove+0x20>
 80091f4:	1e43      	subs	r3, r0, #1
 80091f6:	42a1      	cmp	r1, r4
 80091f8:	d008      	beq.n	800920c <memmove+0x28>
 80091fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009202:	e7f8      	b.n	80091f6 <memmove+0x12>
 8009204:	4601      	mov	r1, r0
 8009206:	4402      	add	r2, r0
 8009208:	428a      	cmp	r2, r1
 800920a:	d100      	bne.n	800920e <memmove+0x2a>
 800920c:	bd10      	pop	{r4, pc}
 800920e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009216:	e7f7      	b.n	8009208 <memmove+0x24>

08009218 <_sbrk_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	2300      	movs	r3, #0
 800921c:	4d05      	ldr	r5, [pc, #20]	@ (8009234 <_sbrk_r+0x1c>)
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	f7fd fc9e 	bl	8006b64 <_sbrk>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_sbrk_r+0x1a>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	b103      	cbz	r3, 8009232 <_sbrk_r+0x1a>
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	200006dc 	.word	0x200006dc

08009238 <memcpy>:
 8009238:	440a      	add	r2, r1
 800923a:	4291      	cmp	r1, r2
 800923c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009240:	d100      	bne.n	8009244 <memcpy+0xc>
 8009242:	4770      	bx	lr
 8009244:	b510      	push	{r4, lr}
 8009246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800924a:	4291      	cmp	r1, r2
 800924c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009250:	d1f9      	bne.n	8009246 <memcpy+0xe>
 8009252:	bd10      	pop	{r4, pc}

08009254 <__assert_func>:
 8009254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009256:	4614      	mov	r4, r2
 8009258:	461a      	mov	r2, r3
 800925a:	4b09      	ldr	r3, [pc, #36]	@ (8009280 <__assert_func+0x2c>)
 800925c:	4605      	mov	r5, r0
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68d8      	ldr	r0, [r3, #12]
 8009262:	b954      	cbnz	r4, 800927a <__assert_func+0x26>
 8009264:	4b07      	ldr	r3, [pc, #28]	@ (8009284 <__assert_func+0x30>)
 8009266:	461c      	mov	r4, r3
 8009268:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800926c:	9100      	str	r1, [sp, #0]
 800926e:	462b      	mov	r3, r5
 8009270:	4905      	ldr	r1, [pc, #20]	@ (8009288 <__assert_func+0x34>)
 8009272:	f000 f86f 	bl	8009354 <fiprintf>
 8009276:	f000 f87f 	bl	8009378 <abort>
 800927a:	4b04      	ldr	r3, [pc, #16]	@ (800928c <__assert_func+0x38>)
 800927c:	e7f4      	b.n	8009268 <__assert_func+0x14>
 800927e:	bf00      	nop
 8009280:	200000d0 	.word	0x200000d0
 8009284:	08009b96 	.word	0x08009b96
 8009288:	08009b68 	.word	0x08009b68
 800928c:	08009b5b 	.word	0x08009b5b

08009290 <_calloc_r>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	fba1 5402 	umull	r5, r4, r1, r2
 8009296:	b93c      	cbnz	r4, 80092a8 <_calloc_r+0x18>
 8009298:	4629      	mov	r1, r5
 800929a:	f7ff f997 	bl	80085cc <_malloc_r>
 800929e:	4606      	mov	r6, r0
 80092a0:	b928      	cbnz	r0, 80092ae <_calloc_r+0x1e>
 80092a2:	2600      	movs	r6, #0
 80092a4:	4630      	mov	r0, r6
 80092a6:	bd70      	pop	{r4, r5, r6, pc}
 80092a8:	220c      	movs	r2, #12
 80092aa:	6002      	str	r2, [r0, #0]
 80092ac:	e7f9      	b.n	80092a2 <_calloc_r+0x12>
 80092ae:	462a      	mov	r2, r5
 80092b0:	4621      	mov	r1, r4
 80092b2:	f7fe fa39 	bl	8007728 <memset>
 80092b6:	e7f5      	b.n	80092a4 <_calloc_r+0x14>

080092b8 <__ascii_mbtowc>:
 80092b8:	b082      	sub	sp, #8
 80092ba:	b901      	cbnz	r1, 80092be <__ascii_mbtowc+0x6>
 80092bc:	a901      	add	r1, sp, #4
 80092be:	b142      	cbz	r2, 80092d2 <__ascii_mbtowc+0x1a>
 80092c0:	b14b      	cbz	r3, 80092d6 <__ascii_mbtowc+0x1e>
 80092c2:	7813      	ldrb	r3, [r2, #0]
 80092c4:	600b      	str	r3, [r1, #0]
 80092c6:	7812      	ldrb	r2, [r2, #0]
 80092c8:	1e10      	subs	r0, r2, #0
 80092ca:	bf18      	it	ne
 80092cc:	2001      	movne	r0, #1
 80092ce:	b002      	add	sp, #8
 80092d0:	4770      	bx	lr
 80092d2:	4610      	mov	r0, r2
 80092d4:	e7fb      	b.n	80092ce <__ascii_mbtowc+0x16>
 80092d6:	f06f 0001 	mvn.w	r0, #1
 80092da:	e7f8      	b.n	80092ce <__ascii_mbtowc+0x16>

080092dc <_realloc_r>:
 80092dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e0:	4680      	mov	r8, r0
 80092e2:	4615      	mov	r5, r2
 80092e4:	460c      	mov	r4, r1
 80092e6:	b921      	cbnz	r1, 80092f2 <_realloc_r+0x16>
 80092e8:	4611      	mov	r1, r2
 80092ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ee:	f7ff b96d 	b.w	80085cc <_malloc_r>
 80092f2:	b92a      	cbnz	r2, 8009300 <_realloc_r+0x24>
 80092f4:	f7ff f8f8 	bl	80084e8 <_free_r>
 80092f8:	2400      	movs	r4, #0
 80092fa:	4620      	mov	r0, r4
 80092fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009300:	f000 f841 	bl	8009386 <_malloc_usable_size_r>
 8009304:	4285      	cmp	r5, r0
 8009306:	4606      	mov	r6, r0
 8009308:	d802      	bhi.n	8009310 <_realloc_r+0x34>
 800930a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800930e:	d8f4      	bhi.n	80092fa <_realloc_r+0x1e>
 8009310:	4629      	mov	r1, r5
 8009312:	4640      	mov	r0, r8
 8009314:	f7ff f95a 	bl	80085cc <_malloc_r>
 8009318:	4607      	mov	r7, r0
 800931a:	2800      	cmp	r0, #0
 800931c:	d0ec      	beq.n	80092f8 <_realloc_r+0x1c>
 800931e:	42b5      	cmp	r5, r6
 8009320:	462a      	mov	r2, r5
 8009322:	4621      	mov	r1, r4
 8009324:	bf28      	it	cs
 8009326:	4632      	movcs	r2, r6
 8009328:	f7ff ff86 	bl	8009238 <memcpy>
 800932c:	4621      	mov	r1, r4
 800932e:	4640      	mov	r0, r8
 8009330:	f7ff f8da 	bl	80084e8 <_free_r>
 8009334:	463c      	mov	r4, r7
 8009336:	e7e0      	b.n	80092fa <_realloc_r+0x1e>

08009338 <__ascii_wctomb>:
 8009338:	4603      	mov	r3, r0
 800933a:	4608      	mov	r0, r1
 800933c:	b141      	cbz	r1, 8009350 <__ascii_wctomb+0x18>
 800933e:	2aff      	cmp	r2, #255	@ 0xff
 8009340:	d904      	bls.n	800934c <__ascii_wctomb+0x14>
 8009342:	228a      	movs	r2, #138	@ 0x8a
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	4770      	bx	lr
 800934c:	2001      	movs	r0, #1
 800934e:	700a      	strb	r2, [r1, #0]
 8009350:	4770      	bx	lr
	...

08009354 <fiprintf>:
 8009354:	b40e      	push	{r1, r2, r3}
 8009356:	b503      	push	{r0, r1, lr}
 8009358:	4601      	mov	r1, r0
 800935a:	ab03      	add	r3, sp, #12
 800935c:	4805      	ldr	r0, [pc, #20]	@ (8009374 <fiprintf+0x20>)
 800935e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009362:	6800      	ldr	r0, [r0, #0]
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	f000 f83d 	bl	80093e4 <_vfiprintf_r>
 800936a:	b002      	add	sp, #8
 800936c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009370:	b003      	add	sp, #12
 8009372:	4770      	bx	lr
 8009374:	200000d0 	.word	0x200000d0

08009378 <abort>:
 8009378:	2006      	movs	r0, #6
 800937a:	b508      	push	{r3, lr}
 800937c:	f000 fa06 	bl	800978c <raise>
 8009380:	2001      	movs	r0, #1
 8009382:	f7fd fb7a 	bl	8006a7a <_exit>

08009386 <_malloc_usable_size_r>:
 8009386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800938a:	1f18      	subs	r0, r3, #4
 800938c:	2b00      	cmp	r3, #0
 800938e:	bfbc      	itt	lt
 8009390:	580b      	ldrlt	r3, [r1, r0]
 8009392:	18c0      	addlt	r0, r0, r3
 8009394:	4770      	bx	lr

08009396 <__sfputc_r>:
 8009396:	6893      	ldr	r3, [r2, #8]
 8009398:	b410      	push	{r4}
 800939a:	3b01      	subs	r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	6093      	str	r3, [r2, #8]
 80093a0:	da07      	bge.n	80093b2 <__sfputc_r+0x1c>
 80093a2:	6994      	ldr	r4, [r2, #24]
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	db01      	blt.n	80093ac <__sfputc_r+0x16>
 80093a8:	290a      	cmp	r1, #10
 80093aa:	d102      	bne.n	80093b2 <__sfputc_r+0x1c>
 80093ac:	bc10      	pop	{r4}
 80093ae:	f000 b931 	b.w	8009614 <__swbuf_r>
 80093b2:	6813      	ldr	r3, [r2, #0]
 80093b4:	1c58      	adds	r0, r3, #1
 80093b6:	6010      	str	r0, [r2, #0]
 80093b8:	7019      	strb	r1, [r3, #0]
 80093ba:	4608      	mov	r0, r1
 80093bc:	bc10      	pop	{r4}
 80093be:	4770      	bx	lr

080093c0 <__sfputs_r>:
 80093c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c2:	4606      	mov	r6, r0
 80093c4:	460f      	mov	r7, r1
 80093c6:	4614      	mov	r4, r2
 80093c8:	18d5      	adds	r5, r2, r3
 80093ca:	42ac      	cmp	r4, r5
 80093cc:	d101      	bne.n	80093d2 <__sfputs_r+0x12>
 80093ce:	2000      	movs	r0, #0
 80093d0:	e007      	b.n	80093e2 <__sfputs_r+0x22>
 80093d2:	463a      	mov	r2, r7
 80093d4:	4630      	mov	r0, r6
 80093d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093da:	f7ff ffdc 	bl	8009396 <__sfputc_r>
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	d1f3      	bne.n	80093ca <__sfputs_r+0xa>
 80093e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093e4 <_vfiprintf_r>:
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e8:	460d      	mov	r5, r1
 80093ea:	4614      	mov	r4, r2
 80093ec:	4698      	mov	r8, r3
 80093ee:	4606      	mov	r6, r0
 80093f0:	b09d      	sub	sp, #116	@ 0x74
 80093f2:	b118      	cbz	r0, 80093fc <_vfiprintf_r+0x18>
 80093f4:	6a03      	ldr	r3, [r0, #32]
 80093f6:	b90b      	cbnz	r3, 80093fc <_vfiprintf_r+0x18>
 80093f8:	f7fe f8fc 	bl	80075f4 <__sinit>
 80093fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093fe:	07d9      	lsls	r1, r3, #31
 8009400:	d405      	bmi.n	800940e <_vfiprintf_r+0x2a>
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	059a      	lsls	r2, r3, #22
 8009406:	d402      	bmi.n	800940e <_vfiprintf_r+0x2a>
 8009408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800940a:	f7fe fa0a 	bl	8007822 <__retarget_lock_acquire_recursive>
 800940e:	89ab      	ldrh	r3, [r5, #12]
 8009410:	071b      	lsls	r3, r3, #28
 8009412:	d501      	bpl.n	8009418 <_vfiprintf_r+0x34>
 8009414:	692b      	ldr	r3, [r5, #16]
 8009416:	b99b      	cbnz	r3, 8009440 <_vfiprintf_r+0x5c>
 8009418:	4629      	mov	r1, r5
 800941a:	4630      	mov	r0, r6
 800941c:	f000 f938 	bl	8009690 <__swsetup_r>
 8009420:	b170      	cbz	r0, 8009440 <_vfiprintf_r+0x5c>
 8009422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009424:	07dc      	lsls	r4, r3, #31
 8009426:	d504      	bpl.n	8009432 <_vfiprintf_r+0x4e>
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	b01d      	add	sp, #116	@ 0x74
 800942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009432:	89ab      	ldrh	r3, [r5, #12]
 8009434:	0598      	lsls	r0, r3, #22
 8009436:	d4f7      	bmi.n	8009428 <_vfiprintf_r+0x44>
 8009438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800943a:	f7fe f9f3 	bl	8007824 <__retarget_lock_release_recursive>
 800943e:	e7f3      	b.n	8009428 <_vfiprintf_r+0x44>
 8009440:	2300      	movs	r3, #0
 8009442:	9309      	str	r3, [sp, #36]	@ 0x24
 8009444:	2320      	movs	r3, #32
 8009446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800944a:	2330      	movs	r3, #48	@ 0x30
 800944c:	f04f 0901 	mov.w	r9, #1
 8009450:	f8cd 800c 	str.w	r8, [sp, #12]
 8009454:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009600 <_vfiprintf_r+0x21c>
 8009458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800945c:	4623      	mov	r3, r4
 800945e:	469a      	mov	sl, r3
 8009460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009464:	b10a      	cbz	r2, 800946a <_vfiprintf_r+0x86>
 8009466:	2a25      	cmp	r2, #37	@ 0x25
 8009468:	d1f9      	bne.n	800945e <_vfiprintf_r+0x7a>
 800946a:	ebba 0b04 	subs.w	fp, sl, r4
 800946e:	d00b      	beq.n	8009488 <_vfiprintf_r+0xa4>
 8009470:	465b      	mov	r3, fp
 8009472:	4622      	mov	r2, r4
 8009474:	4629      	mov	r1, r5
 8009476:	4630      	mov	r0, r6
 8009478:	f7ff ffa2 	bl	80093c0 <__sfputs_r>
 800947c:	3001      	adds	r0, #1
 800947e:	f000 80a7 	beq.w	80095d0 <_vfiprintf_r+0x1ec>
 8009482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009484:	445a      	add	r2, fp
 8009486:	9209      	str	r2, [sp, #36]	@ 0x24
 8009488:	f89a 3000 	ldrb.w	r3, [sl]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 809f 	beq.w	80095d0 <_vfiprintf_r+0x1ec>
 8009492:	2300      	movs	r3, #0
 8009494:	f04f 32ff 	mov.w	r2, #4294967295
 8009498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800949c:	f10a 0a01 	add.w	sl, sl, #1
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	9307      	str	r3, [sp, #28]
 80094a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80094aa:	4654      	mov	r4, sl
 80094ac:	2205      	movs	r2, #5
 80094ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b2:	4853      	ldr	r0, [pc, #332]	@ (8009600 <_vfiprintf_r+0x21c>)
 80094b4:	f7fe f9b7 	bl	8007826 <memchr>
 80094b8:	9a04      	ldr	r2, [sp, #16]
 80094ba:	b9d8      	cbnz	r0, 80094f4 <_vfiprintf_r+0x110>
 80094bc:	06d1      	lsls	r1, r2, #27
 80094be:	bf44      	itt	mi
 80094c0:	2320      	movmi	r3, #32
 80094c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094c6:	0713      	lsls	r3, r2, #28
 80094c8:	bf44      	itt	mi
 80094ca:	232b      	movmi	r3, #43	@ 0x2b
 80094cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094d0:	f89a 3000 	ldrb.w	r3, [sl]
 80094d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80094d6:	d015      	beq.n	8009504 <_vfiprintf_r+0x120>
 80094d8:	4654      	mov	r4, sl
 80094da:	2000      	movs	r0, #0
 80094dc:	f04f 0c0a 	mov.w	ip, #10
 80094e0:	9a07      	ldr	r2, [sp, #28]
 80094e2:	4621      	mov	r1, r4
 80094e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094e8:	3b30      	subs	r3, #48	@ 0x30
 80094ea:	2b09      	cmp	r3, #9
 80094ec:	d94b      	bls.n	8009586 <_vfiprintf_r+0x1a2>
 80094ee:	b1b0      	cbz	r0, 800951e <_vfiprintf_r+0x13a>
 80094f0:	9207      	str	r2, [sp, #28]
 80094f2:	e014      	b.n	800951e <_vfiprintf_r+0x13a>
 80094f4:	eba0 0308 	sub.w	r3, r0, r8
 80094f8:	fa09 f303 	lsl.w	r3, r9, r3
 80094fc:	4313      	orrs	r3, r2
 80094fe:	46a2      	mov	sl, r4
 8009500:	9304      	str	r3, [sp, #16]
 8009502:	e7d2      	b.n	80094aa <_vfiprintf_r+0xc6>
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	1d19      	adds	r1, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	9103      	str	r1, [sp, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	bfbb      	ittet	lt
 8009510:	425b      	neglt	r3, r3
 8009512:	f042 0202 	orrlt.w	r2, r2, #2
 8009516:	9307      	strge	r3, [sp, #28]
 8009518:	9307      	strlt	r3, [sp, #28]
 800951a:	bfb8      	it	lt
 800951c:	9204      	strlt	r2, [sp, #16]
 800951e:	7823      	ldrb	r3, [r4, #0]
 8009520:	2b2e      	cmp	r3, #46	@ 0x2e
 8009522:	d10a      	bne.n	800953a <_vfiprintf_r+0x156>
 8009524:	7863      	ldrb	r3, [r4, #1]
 8009526:	2b2a      	cmp	r3, #42	@ 0x2a
 8009528:	d132      	bne.n	8009590 <_vfiprintf_r+0x1ac>
 800952a:	9b03      	ldr	r3, [sp, #12]
 800952c:	3402      	adds	r4, #2
 800952e:	1d1a      	adds	r2, r3, #4
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	9203      	str	r2, [sp, #12]
 8009534:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009604 <_vfiprintf_r+0x220>
 800953e:	2203      	movs	r2, #3
 8009540:	4650      	mov	r0, sl
 8009542:	7821      	ldrb	r1, [r4, #0]
 8009544:	f7fe f96f 	bl	8007826 <memchr>
 8009548:	b138      	cbz	r0, 800955a <_vfiprintf_r+0x176>
 800954a:	2240      	movs	r2, #64	@ 0x40
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	eba0 000a 	sub.w	r0, r0, sl
 8009552:	4082      	lsls	r2, r0
 8009554:	4313      	orrs	r3, r2
 8009556:	3401      	adds	r4, #1
 8009558:	9304      	str	r3, [sp, #16]
 800955a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955e:	2206      	movs	r2, #6
 8009560:	4829      	ldr	r0, [pc, #164]	@ (8009608 <_vfiprintf_r+0x224>)
 8009562:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009566:	f7fe f95e 	bl	8007826 <memchr>
 800956a:	2800      	cmp	r0, #0
 800956c:	d03f      	beq.n	80095ee <_vfiprintf_r+0x20a>
 800956e:	4b27      	ldr	r3, [pc, #156]	@ (800960c <_vfiprintf_r+0x228>)
 8009570:	bb1b      	cbnz	r3, 80095ba <_vfiprintf_r+0x1d6>
 8009572:	9b03      	ldr	r3, [sp, #12]
 8009574:	3307      	adds	r3, #7
 8009576:	f023 0307 	bic.w	r3, r3, #7
 800957a:	3308      	adds	r3, #8
 800957c:	9303      	str	r3, [sp, #12]
 800957e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009580:	443b      	add	r3, r7
 8009582:	9309      	str	r3, [sp, #36]	@ 0x24
 8009584:	e76a      	b.n	800945c <_vfiprintf_r+0x78>
 8009586:	460c      	mov	r4, r1
 8009588:	2001      	movs	r0, #1
 800958a:	fb0c 3202 	mla	r2, ip, r2, r3
 800958e:	e7a8      	b.n	80094e2 <_vfiprintf_r+0xfe>
 8009590:	2300      	movs	r3, #0
 8009592:	f04f 0c0a 	mov.w	ip, #10
 8009596:	4619      	mov	r1, r3
 8009598:	3401      	adds	r4, #1
 800959a:	9305      	str	r3, [sp, #20]
 800959c:	4620      	mov	r0, r4
 800959e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095a2:	3a30      	subs	r2, #48	@ 0x30
 80095a4:	2a09      	cmp	r2, #9
 80095a6:	d903      	bls.n	80095b0 <_vfiprintf_r+0x1cc>
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0c6      	beq.n	800953a <_vfiprintf_r+0x156>
 80095ac:	9105      	str	r1, [sp, #20]
 80095ae:	e7c4      	b.n	800953a <_vfiprintf_r+0x156>
 80095b0:	4604      	mov	r4, r0
 80095b2:	2301      	movs	r3, #1
 80095b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80095b8:	e7f0      	b.n	800959c <_vfiprintf_r+0x1b8>
 80095ba:	ab03      	add	r3, sp, #12
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	462a      	mov	r2, r5
 80095c0:	4630      	mov	r0, r6
 80095c2:	4b13      	ldr	r3, [pc, #76]	@ (8009610 <_vfiprintf_r+0x22c>)
 80095c4:	a904      	add	r1, sp, #16
 80095c6:	f7fd fbcb 	bl	8006d60 <_printf_float>
 80095ca:	4607      	mov	r7, r0
 80095cc:	1c78      	adds	r0, r7, #1
 80095ce:	d1d6      	bne.n	800957e <_vfiprintf_r+0x19a>
 80095d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	d405      	bmi.n	80095e2 <_vfiprintf_r+0x1fe>
 80095d6:	89ab      	ldrh	r3, [r5, #12]
 80095d8:	059a      	lsls	r2, r3, #22
 80095da:	d402      	bmi.n	80095e2 <_vfiprintf_r+0x1fe>
 80095dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095de:	f7fe f921 	bl	8007824 <__retarget_lock_release_recursive>
 80095e2:	89ab      	ldrh	r3, [r5, #12]
 80095e4:	065b      	lsls	r3, r3, #25
 80095e6:	f53f af1f 	bmi.w	8009428 <_vfiprintf_r+0x44>
 80095ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095ec:	e71e      	b.n	800942c <_vfiprintf_r+0x48>
 80095ee:	ab03      	add	r3, sp, #12
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	462a      	mov	r2, r5
 80095f4:	4630      	mov	r0, r6
 80095f6:	4b06      	ldr	r3, [pc, #24]	@ (8009610 <_vfiprintf_r+0x22c>)
 80095f8:	a904      	add	r1, sp, #16
 80095fa:	f7fd fe4f 	bl	800729c <_printf_i>
 80095fe:	e7e4      	b.n	80095ca <_vfiprintf_r+0x1e6>
 8009600:	08009b40 	.word	0x08009b40
 8009604:	08009b46 	.word	0x08009b46
 8009608:	08009b4a 	.word	0x08009b4a
 800960c:	08006d61 	.word	0x08006d61
 8009610:	080093c1 	.word	0x080093c1

08009614 <__swbuf_r>:
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	460e      	mov	r6, r1
 8009618:	4614      	mov	r4, r2
 800961a:	4605      	mov	r5, r0
 800961c:	b118      	cbz	r0, 8009626 <__swbuf_r+0x12>
 800961e:	6a03      	ldr	r3, [r0, #32]
 8009620:	b90b      	cbnz	r3, 8009626 <__swbuf_r+0x12>
 8009622:	f7fd ffe7 	bl	80075f4 <__sinit>
 8009626:	69a3      	ldr	r3, [r4, #24]
 8009628:	60a3      	str	r3, [r4, #8]
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	071a      	lsls	r2, r3, #28
 800962e:	d501      	bpl.n	8009634 <__swbuf_r+0x20>
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	b943      	cbnz	r3, 8009646 <__swbuf_r+0x32>
 8009634:	4621      	mov	r1, r4
 8009636:	4628      	mov	r0, r5
 8009638:	f000 f82a 	bl	8009690 <__swsetup_r>
 800963c:	b118      	cbz	r0, 8009646 <__swbuf_r+0x32>
 800963e:	f04f 37ff 	mov.w	r7, #4294967295
 8009642:	4638      	mov	r0, r7
 8009644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	6922      	ldr	r2, [r4, #16]
 800964a:	b2f6      	uxtb	r6, r6
 800964c:	1a98      	subs	r0, r3, r2
 800964e:	6963      	ldr	r3, [r4, #20]
 8009650:	4637      	mov	r7, r6
 8009652:	4283      	cmp	r3, r0
 8009654:	dc05      	bgt.n	8009662 <__swbuf_r+0x4e>
 8009656:	4621      	mov	r1, r4
 8009658:	4628      	mov	r0, r5
 800965a:	f7ff fd9b 	bl	8009194 <_fflush_r>
 800965e:	2800      	cmp	r0, #0
 8009660:	d1ed      	bne.n	800963e <__swbuf_r+0x2a>
 8009662:	68a3      	ldr	r3, [r4, #8]
 8009664:	3b01      	subs	r3, #1
 8009666:	60a3      	str	r3, [r4, #8]
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	6022      	str	r2, [r4, #0]
 800966e:	701e      	strb	r6, [r3, #0]
 8009670:	6962      	ldr	r2, [r4, #20]
 8009672:	1c43      	adds	r3, r0, #1
 8009674:	429a      	cmp	r2, r3
 8009676:	d004      	beq.n	8009682 <__swbuf_r+0x6e>
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	07db      	lsls	r3, r3, #31
 800967c:	d5e1      	bpl.n	8009642 <__swbuf_r+0x2e>
 800967e:	2e0a      	cmp	r6, #10
 8009680:	d1df      	bne.n	8009642 <__swbuf_r+0x2e>
 8009682:	4621      	mov	r1, r4
 8009684:	4628      	mov	r0, r5
 8009686:	f7ff fd85 	bl	8009194 <_fflush_r>
 800968a:	2800      	cmp	r0, #0
 800968c:	d0d9      	beq.n	8009642 <__swbuf_r+0x2e>
 800968e:	e7d6      	b.n	800963e <__swbuf_r+0x2a>

08009690 <__swsetup_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4b29      	ldr	r3, [pc, #164]	@ (8009738 <__swsetup_r+0xa8>)
 8009694:	4605      	mov	r5, r0
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	460c      	mov	r4, r1
 800969a:	b118      	cbz	r0, 80096a4 <__swsetup_r+0x14>
 800969c:	6a03      	ldr	r3, [r0, #32]
 800969e:	b90b      	cbnz	r3, 80096a4 <__swsetup_r+0x14>
 80096a0:	f7fd ffa8 	bl	80075f4 <__sinit>
 80096a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a8:	0719      	lsls	r1, r3, #28
 80096aa:	d422      	bmi.n	80096f2 <__swsetup_r+0x62>
 80096ac:	06da      	lsls	r2, r3, #27
 80096ae:	d407      	bmi.n	80096c0 <__swsetup_r+0x30>
 80096b0:	2209      	movs	r2, #9
 80096b2:	602a      	str	r2, [r5, #0]
 80096b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096b8:	f04f 30ff 	mov.w	r0, #4294967295
 80096bc:	81a3      	strh	r3, [r4, #12]
 80096be:	e033      	b.n	8009728 <__swsetup_r+0x98>
 80096c0:	0758      	lsls	r0, r3, #29
 80096c2:	d512      	bpl.n	80096ea <__swsetup_r+0x5a>
 80096c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096c6:	b141      	cbz	r1, 80096da <__swsetup_r+0x4a>
 80096c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096cc:	4299      	cmp	r1, r3
 80096ce:	d002      	beq.n	80096d6 <__swsetup_r+0x46>
 80096d0:	4628      	mov	r0, r5
 80096d2:	f7fe ff09 	bl	80084e8 <_free_r>
 80096d6:	2300      	movs	r3, #0
 80096d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80096e0:	81a3      	strh	r3, [r4, #12]
 80096e2:	2300      	movs	r3, #0
 80096e4:	6063      	str	r3, [r4, #4]
 80096e6:	6923      	ldr	r3, [r4, #16]
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	f043 0308 	orr.w	r3, r3, #8
 80096f0:	81a3      	strh	r3, [r4, #12]
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	b94b      	cbnz	r3, 800970a <__swsetup_r+0x7a>
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80096fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009700:	d003      	beq.n	800970a <__swsetup_r+0x7a>
 8009702:	4621      	mov	r1, r4
 8009704:	4628      	mov	r0, r5
 8009706:	f000 f882 	bl	800980e <__smakebuf_r>
 800970a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800970e:	f013 0201 	ands.w	r2, r3, #1
 8009712:	d00a      	beq.n	800972a <__swsetup_r+0x9a>
 8009714:	2200      	movs	r2, #0
 8009716:	60a2      	str	r2, [r4, #8]
 8009718:	6962      	ldr	r2, [r4, #20]
 800971a:	4252      	negs	r2, r2
 800971c:	61a2      	str	r2, [r4, #24]
 800971e:	6922      	ldr	r2, [r4, #16]
 8009720:	b942      	cbnz	r2, 8009734 <__swsetup_r+0xa4>
 8009722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009726:	d1c5      	bne.n	80096b4 <__swsetup_r+0x24>
 8009728:	bd38      	pop	{r3, r4, r5, pc}
 800972a:	0799      	lsls	r1, r3, #30
 800972c:	bf58      	it	pl
 800972e:	6962      	ldrpl	r2, [r4, #20]
 8009730:	60a2      	str	r2, [r4, #8]
 8009732:	e7f4      	b.n	800971e <__swsetup_r+0x8e>
 8009734:	2000      	movs	r0, #0
 8009736:	e7f7      	b.n	8009728 <__swsetup_r+0x98>
 8009738:	200000d0 	.word	0x200000d0

0800973c <_raise_r>:
 800973c:	291f      	cmp	r1, #31
 800973e:	b538      	push	{r3, r4, r5, lr}
 8009740:	4605      	mov	r5, r0
 8009742:	460c      	mov	r4, r1
 8009744:	d904      	bls.n	8009750 <_raise_r+0x14>
 8009746:	2316      	movs	r3, #22
 8009748:	6003      	str	r3, [r0, #0]
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009752:	b112      	cbz	r2, 800975a <_raise_r+0x1e>
 8009754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009758:	b94b      	cbnz	r3, 800976e <_raise_r+0x32>
 800975a:	4628      	mov	r0, r5
 800975c:	f000 f830 	bl	80097c0 <_getpid_r>
 8009760:	4622      	mov	r2, r4
 8009762:	4601      	mov	r1, r0
 8009764:	4628      	mov	r0, r5
 8009766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800976a:	f000 b817 	b.w	800979c <_kill_r>
 800976e:	2b01      	cmp	r3, #1
 8009770:	d00a      	beq.n	8009788 <_raise_r+0x4c>
 8009772:	1c59      	adds	r1, r3, #1
 8009774:	d103      	bne.n	800977e <_raise_r+0x42>
 8009776:	2316      	movs	r3, #22
 8009778:	6003      	str	r3, [r0, #0]
 800977a:	2001      	movs	r0, #1
 800977c:	e7e7      	b.n	800974e <_raise_r+0x12>
 800977e:	2100      	movs	r1, #0
 8009780:	4620      	mov	r0, r4
 8009782:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009786:	4798      	blx	r3
 8009788:	2000      	movs	r0, #0
 800978a:	e7e0      	b.n	800974e <_raise_r+0x12>

0800978c <raise>:
 800978c:	4b02      	ldr	r3, [pc, #8]	@ (8009798 <raise+0xc>)
 800978e:	4601      	mov	r1, r0
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	f7ff bfd3 	b.w	800973c <_raise_r>
 8009796:	bf00      	nop
 8009798:	200000d0 	.word	0x200000d0

0800979c <_kill_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	2300      	movs	r3, #0
 80097a0:	4d06      	ldr	r5, [pc, #24]	@ (80097bc <_kill_r+0x20>)
 80097a2:	4604      	mov	r4, r0
 80097a4:	4608      	mov	r0, r1
 80097a6:	4611      	mov	r1, r2
 80097a8:	602b      	str	r3, [r5, #0]
 80097aa:	f7fd f956 	bl	8006a5a <_kill>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d102      	bne.n	80097b8 <_kill_r+0x1c>
 80097b2:	682b      	ldr	r3, [r5, #0]
 80097b4:	b103      	cbz	r3, 80097b8 <_kill_r+0x1c>
 80097b6:	6023      	str	r3, [r4, #0]
 80097b8:	bd38      	pop	{r3, r4, r5, pc}
 80097ba:	bf00      	nop
 80097bc:	200006dc 	.word	0x200006dc

080097c0 <_getpid_r>:
 80097c0:	f7fd b944 	b.w	8006a4c <_getpid>

080097c4 <__swhatbuf_r>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	460c      	mov	r4, r1
 80097c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097cc:	4615      	mov	r5, r2
 80097ce:	2900      	cmp	r1, #0
 80097d0:	461e      	mov	r6, r3
 80097d2:	b096      	sub	sp, #88	@ 0x58
 80097d4:	da0c      	bge.n	80097f0 <__swhatbuf_r+0x2c>
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	2100      	movs	r1, #0
 80097da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097de:	bf14      	ite	ne
 80097e0:	2340      	movne	r3, #64	@ 0x40
 80097e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80097e6:	2000      	movs	r0, #0
 80097e8:	6031      	str	r1, [r6, #0]
 80097ea:	602b      	str	r3, [r5, #0]
 80097ec:	b016      	add	sp, #88	@ 0x58
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	466a      	mov	r2, sp
 80097f2:	f000 f849 	bl	8009888 <_fstat_r>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	dbed      	blt.n	80097d6 <__swhatbuf_r+0x12>
 80097fa:	9901      	ldr	r1, [sp, #4]
 80097fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009800:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009804:	4259      	negs	r1, r3
 8009806:	4159      	adcs	r1, r3
 8009808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800980c:	e7eb      	b.n	80097e6 <__swhatbuf_r+0x22>

0800980e <__smakebuf_r>:
 800980e:	898b      	ldrh	r3, [r1, #12]
 8009810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009812:	079d      	lsls	r5, r3, #30
 8009814:	4606      	mov	r6, r0
 8009816:	460c      	mov	r4, r1
 8009818:	d507      	bpl.n	800982a <__smakebuf_r+0x1c>
 800981a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800981e:	6023      	str	r3, [r4, #0]
 8009820:	6123      	str	r3, [r4, #16]
 8009822:	2301      	movs	r3, #1
 8009824:	6163      	str	r3, [r4, #20]
 8009826:	b003      	add	sp, #12
 8009828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800982a:	466a      	mov	r2, sp
 800982c:	ab01      	add	r3, sp, #4
 800982e:	f7ff ffc9 	bl	80097c4 <__swhatbuf_r>
 8009832:	9f00      	ldr	r7, [sp, #0]
 8009834:	4605      	mov	r5, r0
 8009836:	4639      	mov	r1, r7
 8009838:	4630      	mov	r0, r6
 800983a:	f7fe fec7 	bl	80085cc <_malloc_r>
 800983e:	b948      	cbnz	r0, 8009854 <__smakebuf_r+0x46>
 8009840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009844:	059a      	lsls	r2, r3, #22
 8009846:	d4ee      	bmi.n	8009826 <__smakebuf_r+0x18>
 8009848:	f023 0303 	bic.w	r3, r3, #3
 800984c:	f043 0302 	orr.w	r3, r3, #2
 8009850:	81a3      	strh	r3, [r4, #12]
 8009852:	e7e2      	b.n	800981a <__smakebuf_r+0xc>
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800985a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985e:	81a3      	strh	r3, [r4, #12]
 8009860:	9b01      	ldr	r3, [sp, #4]
 8009862:	6020      	str	r0, [r4, #0]
 8009864:	b15b      	cbz	r3, 800987e <__smakebuf_r+0x70>
 8009866:	4630      	mov	r0, r6
 8009868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800986c:	f000 f81e 	bl	80098ac <_isatty_r>
 8009870:	b128      	cbz	r0, 800987e <__smakebuf_r+0x70>
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f023 0303 	bic.w	r3, r3, #3
 8009878:	f043 0301 	orr.w	r3, r3, #1
 800987c:	81a3      	strh	r3, [r4, #12]
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	431d      	orrs	r5, r3
 8009882:	81a5      	strh	r5, [r4, #12]
 8009884:	e7cf      	b.n	8009826 <__smakebuf_r+0x18>
	...

08009888 <_fstat_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	2300      	movs	r3, #0
 800988c:	4d06      	ldr	r5, [pc, #24]	@ (80098a8 <_fstat_r+0x20>)
 800988e:	4604      	mov	r4, r0
 8009890:	4608      	mov	r0, r1
 8009892:	4611      	mov	r1, r2
 8009894:	602b      	str	r3, [r5, #0]
 8009896:	f7fd f93f 	bl	8006b18 <_fstat>
 800989a:	1c43      	adds	r3, r0, #1
 800989c:	d102      	bne.n	80098a4 <_fstat_r+0x1c>
 800989e:	682b      	ldr	r3, [r5, #0]
 80098a0:	b103      	cbz	r3, 80098a4 <_fstat_r+0x1c>
 80098a2:	6023      	str	r3, [r4, #0]
 80098a4:	bd38      	pop	{r3, r4, r5, pc}
 80098a6:	bf00      	nop
 80098a8:	200006dc 	.word	0x200006dc

080098ac <_isatty_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	2300      	movs	r3, #0
 80098b0:	4d05      	ldr	r5, [pc, #20]	@ (80098c8 <_isatty_r+0x1c>)
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	602b      	str	r3, [r5, #0]
 80098b8:	f7fd f93d 	bl	8006b36 <_isatty>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d102      	bne.n	80098c6 <_isatty_r+0x1a>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	b103      	cbz	r3, 80098c6 <_isatty_r+0x1a>
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	200006dc 	.word	0x200006dc

080098cc <_init>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	bf00      	nop
 80098d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d2:	bc08      	pop	{r3}
 80098d4:	469e      	mov	lr, r3
 80098d6:	4770      	bx	lr

080098d8 <_fini>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	bf00      	nop
 80098dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098de:	bc08      	pop	{r3}
 80098e0:	469e      	mov	lr, r3
 80098e2:	4770      	bx	lr
