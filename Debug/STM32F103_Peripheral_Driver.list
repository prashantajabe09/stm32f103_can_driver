
STM32F103_Peripheral_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058ac  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080059e0  080059e0  000069e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d90  08005d90  0000728c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d90  08005d90  00006d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d98  08005d98  0000728c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d98  08005d98  00006d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d9c  08005d9c  00006d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  08005da0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  2000028c  0800602c  0000728c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  0800602c  00007700  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000728c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004466  00000000  00000000  000072b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001310  00000000  00000000  0000b71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  0000ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000032c  00000000  00000000  0000cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003da8  00000000  00000000  0000d1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004b59  00000000  00000000  00010f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000cd45  00000000  00000000  00015acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00022812  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023ac  00000000  00000000  00022858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00024c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000028c 	.word	0x2000028c
 800014c:	00000000 	.word	0x00000000
 8000150:	080059c4 	.word	0x080059c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000290 	.word	0x20000290
 800016c:	080059c4 	.word	0x080059c4

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_fmul>:
 8000180:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000184:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000188:	bf1e      	ittt	ne
 800018a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018e:	ea92 0f0c 	teqne	r2, ip
 8000192:	ea93 0f0c 	teqne	r3, ip
 8000196:	d06f      	beq.n	8000278 <__aeabi_fmul+0xf8>
 8000198:	441a      	add	r2, r3
 800019a:	ea80 0c01 	eor.w	ip, r0, r1
 800019e:	0240      	lsls	r0, r0, #9
 80001a0:	bf18      	it	ne
 80001a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a6:	d01e      	beq.n	80001e6 <__aeabi_fmul+0x66>
 80001a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b4:	fba0 3101 	umull	r3, r1, r0, r1
 80001b8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001bc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001c0:	bf3e      	ittt	cc
 80001c2:	0049      	lslcc	r1, r1, #1
 80001c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c8:	005b      	lslcc	r3, r3, #1
 80001ca:	ea40 0001 	orr.w	r0, r0, r1
 80001ce:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001d2:	2afd      	cmp	r2, #253	@ 0xfd
 80001d4:	d81d      	bhi.n	8000212 <__aeabi_fmul+0x92>
 80001d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001de:	bf08      	it	eq
 80001e0:	f020 0001 	biceq.w	r0, r0, #1
 80001e4:	4770      	bx	lr
 80001e6:	f090 0f00 	teq	r0, #0
 80001ea:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ee:	bf08      	it	eq
 80001f0:	0249      	lsleq	r1, r1, #9
 80001f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001fa:	3a7f      	subs	r2, #127	@ 0x7f
 80001fc:	bfc2      	ittt	gt
 80001fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000202:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000206:	4770      	bxgt	lr
 8000208:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800020c:	f04f 0300 	mov.w	r3, #0
 8000210:	3a01      	subs	r2, #1
 8000212:	dc5d      	bgt.n	80002d0 <__aeabi_fmul+0x150>
 8000214:	f112 0f19 	cmn.w	r2, #25
 8000218:	bfdc      	itt	le
 800021a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800021e:	4770      	bxle	lr
 8000220:	f1c2 0200 	rsb	r2, r2, #0
 8000224:	0041      	lsls	r1, r0, #1
 8000226:	fa21 f102 	lsr.w	r1, r1, r2
 800022a:	f1c2 0220 	rsb	r2, r2, #32
 800022e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000232:	ea5f 0031 	movs.w	r0, r1, rrx
 8000236:	f140 0000 	adc.w	r0, r0, #0
 800023a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023e:	bf08      	it	eq
 8000240:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000244:	4770      	bx	lr
 8000246:	f092 0f00 	teq	r2, #0
 800024a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800024e:	bf02      	ittt	eq
 8000250:	0040      	lsleq	r0, r0, #1
 8000252:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000256:	3a01      	subeq	r2, #1
 8000258:	d0f9      	beq.n	800024e <__aeabi_fmul+0xce>
 800025a:	ea40 000c 	orr.w	r0, r0, ip
 800025e:	f093 0f00 	teq	r3, #0
 8000262:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000266:	bf02      	ittt	eq
 8000268:	0049      	lsleq	r1, r1, #1
 800026a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800026e:	3b01      	subeq	r3, #1
 8000270:	d0f9      	beq.n	8000266 <__aeabi_fmul+0xe6>
 8000272:	ea41 010c 	orr.w	r1, r1, ip
 8000276:	e78f      	b.n	8000198 <__aeabi_fmul+0x18>
 8000278:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800027c:	ea92 0f0c 	teq	r2, ip
 8000280:	bf18      	it	ne
 8000282:	ea93 0f0c 	teqne	r3, ip
 8000286:	d00a      	beq.n	800029e <__aeabi_fmul+0x11e>
 8000288:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800028c:	bf18      	it	ne
 800028e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000292:	d1d8      	bne.n	8000246 <__aeabi_fmul+0xc6>
 8000294:	ea80 0001 	eor.w	r0, r0, r1
 8000298:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	bf17      	itett	ne
 80002a4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002a8:	4608      	moveq	r0, r1
 80002aa:	f091 0f00 	teqne	r1, #0
 80002ae:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002b2:	d014      	beq.n	80002de <__aeabi_fmul+0x15e>
 80002b4:	ea92 0f0c 	teq	r2, ip
 80002b8:	d101      	bne.n	80002be <__aeabi_fmul+0x13e>
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	d10f      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002be:	ea93 0f0c 	teq	r3, ip
 80002c2:	d103      	bne.n	80002cc <__aeabi_fmul+0x14c>
 80002c4:	024b      	lsls	r3, r1, #9
 80002c6:	bf18      	it	ne
 80002c8:	4608      	movne	r0, r1
 80002ca:	d108      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002cc:	ea80 0001 	eor.w	r0, r0, r1
 80002d0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002d4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002dc:	4770      	bx	lr
 80002de:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002e2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	@ 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <__aeabi_dmul>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000666:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800066a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066e:	bf1d      	ittte	ne
 8000670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000674:	ea94 0f0c 	teqne	r4, ip
 8000678:	ea95 0f0c 	teqne	r5, ip
 800067c:	f000 f8de 	bleq	800083c <__aeabi_dmul+0x1dc>
 8000680:	442c      	add	r4, r5
 8000682:	ea81 0603 	eor.w	r6, r1, r3
 8000686:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800068a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000692:	bf18      	it	ne
 8000694:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800069c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a0:	d038      	beq.n	8000714 <__aeabi_dmul+0xb4>
 80006a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b6:	f04f 0600 	mov.w	r6, #0
 80006ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006be:	f09c 0f00 	teq	ip, #0
 80006c2:	bf18      	it	ne
 80006c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006d4:	d204      	bcs.n	80006e0 <__aeabi_dmul+0x80>
 80006d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006da:	416d      	adcs	r5, r5
 80006dc:	eb46 0606 	adc.w	r6, r6, r6
 80006e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f8:	bf88      	it	hi
 80006fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006fe:	d81e      	bhi.n	800073e <__aeabi_dmul+0xde>
 8000700:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000704:	bf08      	it	eq
 8000706:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800070a:	f150 0000 	adcs.w	r0, r0, #0
 800070e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000718:	ea46 0101 	orr.w	r1, r6, r1
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000728:	bfc2      	ittt	gt
 800072a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000732:	bd70      	popgt	{r4, r5, r6, pc}
 8000734:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000738:	f04f 0e00 	mov.w	lr, #0
 800073c:	3c01      	subs	r4, #1
 800073e:	f300 80ab 	bgt.w	8000898 <__aeabi_dmul+0x238>
 8000742:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000746:	bfde      	ittt	le
 8000748:	2000      	movle	r0, #0
 800074a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd70      	pople	{r4, r5, r6, pc}
 8000750:	f1c4 0400 	rsb	r4, r4, #0
 8000754:	3c20      	subs	r4, #32
 8000756:	da35      	bge.n	80007c4 <__aeabi_dmul+0x164>
 8000758:	340c      	adds	r4, #12
 800075a:	dc1b      	bgt.n	8000794 <__aeabi_dmul+0x134>
 800075c:	f104 0414 	add.w	r4, r4, #20
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f305 	lsl.w	r3, r0, r5
 8000768:	fa20 f004 	lsr.w	r0, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	fa21 f604 	lsr.w	r6, r1, r4
 8000784:	eb42 0106 	adc.w	r1, r2, r6
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 040c 	rsb	r4, r4, #12
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f304 	lsl.w	r3, r0, r4
 80007a0:	fa20 f005 	lsr.w	r0, r0, r5
 80007a4:	fa01 f204 	lsl.w	r2, r1, r4
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b4:	f141 0100 	adc.w	r1, r1, #0
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f1c4 0520 	rsb	r5, r4, #32
 80007c8:	fa00 f205 	lsl.w	r2, r0, r5
 80007cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d0:	fa20 f304 	lsr.w	r3, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea43 0302 	orr.w	r3, r3, r2
 80007dc:	fa21 f004 	lsr.w	r0, r1, r4
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	fa21 f204 	lsr.w	r2, r1, r4
 80007e8:	ea20 0002 	bic.w	r0, r0, r2
 80007ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f094 0f00 	teq	r4, #0
 8000800:	d10f      	bne.n	8000822 <__aeabi_dmul+0x1c2>
 8000802:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000806:	0040      	lsls	r0, r0, #1
 8000808:	eb41 0101 	adc.w	r1, r1, r1
 800080c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3c01      	subeq	r4, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1a6>
 8000816:	ea41 0106 	orr.w	r1, r1, r6
 800081a:	f095 0f00 	teq	r5, #0
 800081e:	bf18      	it	ne
 8000820:	4770      	bxne	lr
 8000822:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	eb43 0303 	adc.w	r3, r3, r3
 800082c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000830:	bf08      	it	eq
 8000832:	3d01      	subeq	r5, #1
 8000834:	d0f7      	beq.n	8000826 <__aeabi_dmul+0x1c6>
 8000836:	ea43 0306 	orr.w	r3, r3, r6
 800083a:	4770      	bx	lr
 800083c:	ea94 0f0c 	teq	r4, ip
 8000840:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000844:	bf18      	it	ne
 8000846:	ea95 0f0c 	teqne	r5, ip
 800084a:	d00c      	beq.n	8000866 <__aeabi_dmul+0x206>
 800084c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000850:	bf18      	it	ne
 8000852:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000856:	d1d1      	bne.n	80007fc <__aeabi_dmul+0x19c>
 8000858:	ea81 0103 	eor.w	r1, r1, r3
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800086a:	bf06      	itte	eq
 800086c:	4610      	moveq	r0, r2
 800086e:	4619      	moveq	r1, r3
 8000870:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000874:	d019      	beq.n	80008aa <__aeabi_dmul+0x24a>
 8000876:	ea94 0f0c 	teq	r4, ip
 800087a:	d102      	bne.n	8000882 <__aeabi_dmul+0x222>
 800087c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000880:	d113      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	d105      	bne.n	8000894 <__aeabi_dmul+0x234>
 8000888:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800088c:	bf1c      	itt	ne
 800088e:	4610      	movne	r0, r2
 8000890:	4619      	movne	r1, r3
 8000892:	d10a      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000894:	ea81 0103 	eor.w	r1, r1, r3
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800089c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008b2:	bd70      	pop	{r4, r5, r6, pc}

080008b4 <__aeabi_ddiv>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ba:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008c2:	bf1d      	ittte	ne
 80008c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c8:	ea94 0f0c 	teqne	r4, ip
 80008cc:	ea95 0f0c 	teqne	r5, ip
 80008d0:	f000 f8a7 	bleq	8000a22 <__aeabi_ddiv+0x16e>
 80008d4:	eba4 0405 	sub.w	r4, r4, r5
 80008d8:	ea81 0e03 	eor.w	lr, r1, r3
 80008dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e4:	f000 8088 	beq.w	80009f8 <__aeabi_ddiv+0x144>
 80008e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ec:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000900:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000904:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000908:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800090c:	429d      	cmp	r5, r3
 800090e:	bf08      	it	eq
 8000910:	4296      	cmpeq	r6, r2
 8000912:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000916:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800091a:	d202      	bcs.n	8000922 <__aeabi_ddiv+0x6e>
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	1ab6      	subs	r6, r6, r2
 8000924:	eb65 0503 	sbc.w	r5, r5, r3
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000932:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000990:	ea55 0e06 	orrs.w	lr, r5, r6
 8000994:	d018      	beq.n	80009c8 <__aeabi_ddiv+0x114>
 8000996:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800099a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009b2:	d1c0      	bne.n	8000936 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b8:	d10b      	bne.n	80009d2 <__aeabi_ddiv+0x11e>
 80009ba:	ea41 0100 	orr.w	r1, r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009c6:	e7b6      	b.n	8000936 <__aeabi_ddiv+0x82>
 80009c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009cc:	bf04      	itt	eq
 80009ce:	4301      	orreq	r1, r0
 80009d0:	2000      	moveq	r0, #0
 80009d2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009d6:	bf88      	it	hi
 80009d8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009dc:	f63f aeaf 	bhi.w	800073e <__aeabi_dmul+0xde>
 80009e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e4:	bf04      	itt	eq
 80009e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ee:	f150 0000 	adcs.w	r0, r0, #0
 80009f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a04:	bfc2      	ittt	gt
 8000a06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a10:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a14:	f04f 0e00 	mov.w	lr, #0
 8000a18:	3c01      	subs	r4, #1
 8000a1a:	e690      	b.n	800073e <__aeabi_dmul+0xde>
 8000a1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a20:	e68d      	b.n	800073e <__aeabi_dmul+0xde>
 8000a22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a26:	ea94 0f0c 	teq	r4, ip
 8000a2a:	bf08      	it	eq
 8000a2c:	ea95 0f0c 	teqeq	r5, ip
 8000a30:	f43f af3b 	beq.w	80008aa <__aeabi_dmul+0x24a>
 8000a34:	ea94 0f0c 	teq	r4, ip
 8000a38:	d10a      	bne.n	8000a50 <__aeabi_ddiv+0x19c>
 8000a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3e:	f47f af34 	bne.w	80008aa <__aeabi_dmul+0x24a>
 8000a42:	ea95 0f0c 	teq	r5, ip
 8000a46:	f47f af25 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e72c      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a50:	ea95 0f0c 	teq	r5, ip
 8000a54:	d106      	bne.n	8000a64 <__aeabi_ddiv+0x1b0>
 8000a56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a5a:	f43f aefd 	beq.w	8000858 <__aeabi_dmul+0x1f8>
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	e722      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6e:	f47f aec5 	bne.w	80007fc <__aeabi_dmul+0x19c>
 8000a72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a76:	f47f af0d 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7e:	f47f aeeb 	bne.w	8000858 <__aeabi_dmul+0x1f8>
 8000a82:	e712      	b.n	80008aa <__aeabi_dmul+0x24a>

08000a84 <__gedf2>:
 8000a84:	f04f 3cff 	mov.w	ip, #4294967295
 8000a88:	e006      	b.n	8000a98 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__ledf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	e002      	b.n	8000a98 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__cmpdf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	bf18      	it	ne
 8000aaa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aae:	d01b      	beq.n	8000ae8 <__cmpdf2+0x54>
 8000ab0:	b001      	add	sp, #4
 8000ab2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab6:	bf0c      	ite	eq
 8000ab8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000abc:	ea91 0f03 	teqne	r1, r3
 8000ac0:	bf02      	ittt	eq
 8000ac2:	ea90 0f02 	teqeq	r0, r2
 8000ac6:	2000      	moveq	r0, #0
 8000ac8:	4770      	bxeq	lr
 8000aca:	f110 0f00 	cmn.w	r0, #0
 8000ace:	ea91 0f03 	teq	r1, r3
 8000ad2:	bf58      	it	pl
 8000ad4:	4299      	cmppl	r1, r3
 8000ad6:	bf08      	it	eq
 8000ad8:	4290      	cmpeq	r0, r2
 8000ada:	bf2c      	ite	cs
 8000adc:	17d8      	asrcs	r0, r3, #31
 8000ade:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ae2:	f040 0001 	orr.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d102      	bne.n	8000af8 <__cmpdf2+0x64>
 8000af2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af6:	d107      	bne.n	8000b08 <__cmpdf2+0x74>
 8000af8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d1d6      	bne.n	8000ab0 <__cmpdf2+0x1c>
 8000b02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b06:	d0d3      	beq.n	8000ab0 <__cmpdf2+0x1c>
 8000b08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdrcmple>:
 8000b10:	4684      	mov	ip, r0
 8000b12:	4610      	mov	r0, r2
 8000b14:	4662      	mov	r2, ip
 8000b16:	468c      	mov	ip, r1
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	e000      	b.n	8000b20 <__aeabi_cdcmpeq>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_cdcmpeq>:
 8000b20:	b501      	push	{r0, lr}
 8000b22:	f7ff ffb7 	bl	8000a94 <__cmpdf2>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	bf48      	it	mi
 8000b2a:	f110 0f00 	cmnmi.w	r0, #0
 8000b2e:	bd01      	pop	{r0, pc}

08000b30 <__aeabi_dcmpeq>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff fff4 	bl	8000b20 <__aeabi_cdcmpeq>
 8000b38:	bf0c      	ite	eq
 8000b3a:	2001      	moveq	r0, #1
 8000b3c:	2000      	movne	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmplt>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffea 	bl	8000b20 <__aeabi_cdcmpeq>
 8000b4c:	bf34      	ite	cc
 8000b4e:	2001      	movcc	r0, #1
 8000b50:	2000      	movcs	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmple>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffe0 	bl	8000b20 <__aeabi_cdcmpeq>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpge>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffce 	bl	8000b10 <__aeabi_cdrcmple>
 8000b74:	bf94      	ite	ls
 8000b76:	2001      	movls	r0, #1
 8000b78:	2000      	movhi	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpgt>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff ffc4 	bl	8000b10 <__aeabi_cdrcmple>
 8000b88:	bf34      	ite	cc
 8000b8a:	2001      	movcc	r0, #1
 8000b8c:	2000      	movcs	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmpun>:
 8000b94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	d102      	bne.n	8000ba4 <__aeabi_dcmpun+0x10>
 8000b9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ba2:	d10a      	bne.n	8000bba <__aeabi_dcmpun+0x26>
 8000ba4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_dcmpun+0x20>
 8000bae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bb2:	d102      	bne.n	8000bba <__aeabi_dcmpun+0x26>
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	f04f 0001 	mov.w	r0, #1
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2iz>:
 8000bc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc8:	d215      	bcs.n	8000bf6 <__aeabi_d2iz+0x36>
 8000bca:	d511      	bpl.n	8000bf0 <__aeabi_d2iz+0x30>
 8000bcc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd4:	d912      	bls.n	8000bfc <__aeabi_d2iz+0x3c>
 8000bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d105      	bne.n	8000c08 <__aeabi_d2iz+0x48>
 8000bfc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	bf08      	it	eq
 8000c02:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_frsub>:
 8000cb0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cb4:	e002      	b.n	8000cbc <__addsf3>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_fsub>:
 8000cb8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cbc <__addsf3>:
 8000cbc:	0042      	lsls	r2, r0, #1
 8000cbe:	bf1f      	itttt	ne
 8000cc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cc4:	ea92 0f03 	teqne	r2, r3
 8000cc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ccc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd0:	d06a      	beq.n	8000da8 <__addsf3+0xec>
 8000cd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cda:	bfc1      	itttt	gt
 8000cdc:	18d2      	addgt	r2, r2, r3
 8000cde:	4041      	eorgt	r1, r0
 8000ce0:	4048      	eorgt	r0, r1
 8000ce2:	4041      	eorgt	r1, r0
 8000ce4:	bfb8      	it	lt
 8000ce6:	425b      	neglt	r3, r3
 8000ce8:	2b19      	cmp	r3, #25
 8000cea:	bf88      	it	hi
 8000cec:	4770      	bxhi	lr
 8000cee:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cfa:	bf18      	it	ne
 8000cfc:	4240      	negne	r0, r0
 8000cfe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d02:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d06:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d0a:	bf18      	it	ne
 8000d0c:	4249      	negne	r1, r1
 8000d0e:	ea92 0f03 	teq	r2, r3
 8000d12:	d03f      	beq.n	8000d94 <__addsf3+0xd8>
 8000d14:	f1a2 0201 	sub.w	r2, r2, #1
 8000d18:	fa41 fc03 	asr.w	ip, r1, r3
 8000d1c:	eb10 000c 	adds.w	r0, r0, ip
 8000d20:	f1c3 0320 	rsb	r3, r3, #32
 8000d24:	fa01 f103 	lsl.w	r1, r1, r3
 8000d28:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d2c:	d502      	bpl.n	8000d34 <__addsf3+0x78>
 8000d2e:	4249      	negs	r1, r1
 8000d30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d34:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d38:	d313      	bcc.n	8000d62 <__addsf3+0xa6>
 8000d3a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d3e:	d306      	bcc.n	8000d4e <__addsf3+0x92>
 8000d40:	0840      	lsrs	r0, r0, #1
 8000d42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d46:	f102 0201 	add.w	r2, r2, #1
 8000d4a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d4c:	d251      	bcs.n	8000df2 <__addsf3+0x136>
 8000d4e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	ea40 0003 	orr.w	r0, r0, r3
 8000d60:	4770      	bx	lr
 8000d62:	0049      	lsls	r1, r1, #1
 8000d64:	eb40 0000 	adc.w	r0, r0, r0
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d70:	d2ed      	bcs.n	8000d4e <__addsf3+0x92>
 8000d72:	fab0 fc80 	clz	ip, r0
 8000d76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d82:	bfaa      	itet	ge
 8000d84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d88:	4252      	neglt	r2, r2
 8000d8a:	4318      	orrge	r0, r3
 8000d8c:	bfbc      	itt	lt
 8000d8e:	40d0      	lsrlt	r0, r2
 8000d90:	4318      	orrlt	r0, r3
 8000d92:	4770      	bx	lr
 8000d94:	f092 0f00 	teq	r2, #0
 8000d98:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d9c:	bf06      	itte	eq
 8000d9e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000da2:	3201      	addeq	r2, #1
 8000da4:	3b01      	subne	r3, #1
 8000da6:	e7b5      	b.n	8000d14 <__addsf3+0x58>
 8000da8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db0:	bf18      	it	ne
 8000db2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000db6:	d021      	beq.n	8000dfc <__addsf3+0x140>
 8000db8:	ea92 0f03 	teq	r2, r3
 8000dbc:	d004      	beq.n	8000dc8 <__addsf3+0x10c>
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	bf08      	it	eq
 8000dc4:	4608      	moveq	r0, r1
 8000dc6:	4770      	bx	lr
 8000dc8:	ea90 0f01 	teq	r0, r1
 8000dcc:	bf1c      	itt	ne
 8000dce:	2000      	movne	r0, #0
 8000dd0:	4770      	bxne	lr
 8000dd2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dd6:	d104      	bne.n	8000de2 <__addsf3+0x126>
 8000dd8:	0040      	lsls	r0, r0, #1
 8000dda:	bf28      	it	cs
 8000ddc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000de6:	bf3c      	itt	cc
 8000de8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dec:	4770      	bxcc	lr
 8000dee:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000df2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000df6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dfa:	4770      	bx	lr
 8000dfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e00:	bf16      	itet	ne
 8000e02:	4608      	movne	r0, r1
 8000e04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e08:	4601      	movne	r1, r0
 8000e0a:	0242      	lsls	r2, r0, #9
 8000e0c:	bf06      	itte	eq
 8000e0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e12:	ea90 0f01 	teqeq	r0, r1
 8000e16:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_ui2f>:
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	e004      	b.n	8000e2c <__aeabi_i2f+0x8>
 8000e22:	bf00      	nop

08000e24 <__aeabi_i2f>:
 8000e24:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e28:	bf48      	it	mi
 8000e2a:	4240      	negmi	r0, r0
 8000e2c:	ea5f 0c00 	movs.w	ip, r0
 8000e30:	bf08      	it	eq
 8000e32:	4770      	bxeq	lr
 8000e34:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e38:	4601      	mov	r1, r0
 8000e3a:	f04f 0000 	mov.w	r0, #0
 8000e3e:	e01c      	b.n	8000e7a <__aeabi_l2f+0x2a>

08000e40 <__aeabi_ul2f>:
 8000e40:	ea50 0201 	orrs.w	r2, r0, r1
 8000e44:	bf08      	it	eq
 8000e46:	4770      	bxeq	lr
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	e00a      	b.n	8000e64 <__aeabi_l2f+0x14>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_l2f>:
 8000e50:	ea50 0201 	orrs.w	r2, r0, r1
 8000e54:	bf08      	it	eq
 8000e56:	4770      	bxeq	lr
 8000e58:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e5c:	d502      	bpl.n	8000e64 <__aeabi_l2f+0x14>
 8000e5e:	4240      	negs	r0, r0
 8000e60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e64:	ea5f 0c01 	movs.w	ip, r1
 8000e68:	bf02      	ittt	eq
 8000e6a:	4684      	moveq	ip, r0
 8000e6c:	4601      	moveq	r1, r0
 8000e6e:	2000      	moveq	r0, #0
 8000e70:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e74:	bf08      	it	eq
 8000e76:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e7e:	fabc f28c 	clz	r2, ip
 8000e82:	3a08      	subs	r2, #8
 8000e84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e88:	db10      	blt.n	8000eac <__aeabi_l2f+0x5c>
 8000e8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8e:	4463      	add	r3, ip
 8000e90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	f020 0001 	biceq.w	r0, r0, #1
 8000eaa:	4770      	bx	lr
 8000eac:	f102 0220 	add.w	r2, r2, #32
 8000eb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ebc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eca:	4770      	bx	lr

08000ecc <__gesf2>:
 8000ecc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ed0:	e006      	b.n	8000ee0 <__cmpsf2+0x4>
 8000ed2:	bf00      	nop

08000ed4 <__lesf2>:
 8000ed4:	f04f 0c01 	mov.w	ip, #1
 8000ed8:	e002      	b.n	8000ee0 <__cmpsf2+0x4>
 8000eda:	bf00      	nop

08000edc <__cmpsf2>:
 8000edc:	f04f 0c01 	mov.w	ip, #1
 8000ee0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ef0:	bf18      	it	ne
 8000ef2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ef6:	d011      	beq.n	8000f1c <__cmpsf2+0x40>
 8000ef8:	b001      	add	sp, #4
 8000efa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000efe:	bf18      	it	ne
 8000f00:	ea90 0f01 	teqne	r0, r1
 8000f04:	bf58      	it	pl
 8000f06:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f0a:	bf88      	it	hi
 8000f0c:	17c8      	asrhi	r0, r1, #31
 8000f0e:	bf38      	it	cc
 8000f10:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f14:	bf18      	it	ne
 8000f16:	f040 0001 	orrne.w	r0, r0, #1
 8000f1a:	4770      	bx	lr
 8000f1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f20:	d102      	bne.n	8000f28 <__cmpsf2+0x4c>
 8000f22:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f26:	d105      	bne.n	8000f34 <__cmpsf2+0x58>
 8000f28:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f2c:	d1e4      	bne.n	8000ef8 <__cmpsf2+0x1c>
 8000f2e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f32:	d0e1      	beq.n	8000ef8 <__cmpsf2+0x1c>
 8000f34:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <__aeabi_cfrcmple>:
 8000f3c:	4684      	mov	ip, r0
 8000f3e:	4608      	mov	r0, r1
 8000f40:	4661      	mov	r1, ip
 8000f42:	e7ff      	b.n	8000f44 <__aeabi_cfcmpeq>

08000f44 <__aeabi_cfcmpeq>:
 8000f44:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f46:	f7ff ffc9 	bl	8000edc <__cmpsf2>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	bf48      	it	mi
 8000f4e:	f110 0f00 	cmnmi.w	r0, #0
 8000f52:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f54 <__aeabi_fcmpeq>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff fff4 	bl	8000f44 <__aeabi_cfcmpeq>
 8000f5c:	bf0c      	ite	eq
 8000f5e:	2001      	moveq	r0, #1
 8000f60:	2000      	movne	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmplt>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffea 	bl	8000f44 <__aeabi_cfcmpeq>
 8000f70:	bf34      	ite	cc
 8000f72:	2001      	movcc	r0, #1
 8000f74:	2000      	movcs	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_fcmple>:
 8000f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f80:	f7ff ffe0 	bl	8000f44 <__aeabi_cfcmpeq>
 8000f84:	bf94      	ite	ls
 8000f86:	2001      	movls	r0, #1
 8000f88:	2000      	movhi	r0, #0
 8000f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8e:	bf00      	nop

08000f90 <__aeabi_fcmpge>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff ffd2 	bl	8000f3c <__aeabi_cfrcmple>
 8000f98:	bf94      	ite	ls
 8000f9a:	2001      	movls	r0, #1
 8000f9c:	2000      	movhi	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_fcmpgt>:
 8000fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa8:	f7ff ffc8 	bl	8000f3c <__aeabi_cfrcmple>
 8000fac:	bf34      	ite	cc
 8000fae:	2001      	movcc	r0, #1
 8000fb0:	2000      	movcs	r0, #0
 8000fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_f2iz>:
 8000fb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fc0:	d30f      	bcc.n	8000fe2 <__aeabi_f2iz+0x2a>
 8000fc2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fca:	d90d      	bls.n	8000fe8 <__aeabi_f2iz+0x30>
 8000fcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fd8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fdc:	bf18      	it	ne
 8000fde:	4240      	negne	r0, r0
 8000fe0:	4770      	bx	lr
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	4770      	bx	lr
 8000fe8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_f2iz+0x3a>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d105      	bne.n	8000ffe <__aeabi_f2iz+0x46>
 8000ff2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000ff6:	bf08      	it	eq
 8000ff8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr

08001004 <__aeabi_f2uiz>:
 8001004:	0042      	lsls	r2, r0, #1
 8001006:	d20e      	bcs.n	8001026 <__aeabi_f2uiz+0x22>
 8001008:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800100c:	d30b      	bcc.n	8001026 <__aeabi_f2uiz+0x22>
 800100e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001012:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001016:	d409      	bmi.n	800102c <__aeabi_f2uiz+0x28>
 8001018:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800101c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001020:	fa23 f002 	lsr.w	r0, r3, r2
 8001024:	4770      	bx	lr
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	4770      	bx	lr
 800102c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001030:	d101      	bne.n	8001036 <__aeabi_f2uiz+0x32>
 8001032:	0242      	lsls	r2, r0, #9
 8001034:	d102      	bne.n	800103c <__aeabi_f2uiz+0x38>
 8001036:	f04f 30ff 	mov.w	r0, #4294967295
 800103a:	4770      	bx	lr
 800103c:	f04f 0000 	mov.w	r0, #0
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <exit_sleep_mode>:
 *
 * @return    none
 *
 */
static void exit_sleep_mode(can_regdef_t* p_can)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	p_can->MCR &= ~(1 << SLEEP_REQUEST_BIT_POS);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 0202 	bic.w	r2, r3, #2
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	601a      	str	r2, [r3, #0]
	while((p_can->MSR & (1 << SLEEP_ACK_BIT_POSITION)));
 8001058:	bf00      	nop
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f9      	bne.n	800105a <exit_sleep_mode+0x16>
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <exit_init_mode>:
 *
 * @return    none
 *
 */
static void exit_init_mode(can_regdef_t* p_can)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	p_can->MCR &= ~(1 << INIT_REQUEST_BIT_POS);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 0201 	bic.w	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
	while((p_can->MSR & (1 << INIT_ACK_BIT_POSITION)));
 8001086:	bf00      	nop
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f9      	bne.n	8001088 <exit_init_mode+0x16>
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <error_interrupt_en_di>:
 * @param[in]  EN OR DI
 *
 * @return    none
 */
static void error_interrupt_en_di(can_regdef_t* p_can,uint8_t en_di)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
	if (en_di == ERROR_INTERRUPT_EN)
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d106      	bne.n	80010c0 <error_interrupt_en_di+0x20>
	{
		p_can->IER |= (1 << ERROR_INTERRUPT_BIT_POS);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	615a      	str	r2, [r3, #20]
	}
	else if(en_di == ERROR_INTERRUPT_DI)
	{
		p_can->IER &= ~(1 << ERROR_INTERRUPT_BIT_POS);
	}
}
 80010be:	e008      	b.n	80010d2 <error_interrupt_en_di+0x32>
	else if(en_di == ERROR_INTERRUPT_DI)
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d105      	bne.n	80010d2 <error_interrupt_en_di+0x32>
		p_can->IER &= ~(1 << ERROR_INTERRUPT_BIT_POS);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	615a      	str	r2, [r3, #20]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <no_art_en_di>:
 *
 * @return    none
 *
 */
static void no_art_en_di(can_regdef_t* p_can,uint8_t en_di)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
	if (en_di == NO_AUTOMATIC_RE_TRANSMISSION_EN)
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d106      	bne.n	80010fc <no_art_en_di+0x20>
	{
		p_can->MCR |= (1 << NO_AUTOMATIC_RE_TRANSMISSION_BIT_POS);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f043 0210 	orr.w	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	601a      	str	r2, [r3, #0]
	}
	else if(en_di == NO_AUTOMATIC_RE_TRANSMISSION_DI)
	{
		p_can->MCR &= ~(1 << NO_AUTOMATIC_RE_TRANSMISSION_BIT_POS);
	}
}
 80010fa:	e008      	b.n	800110e <no_art_en_di+0x32>
	else if(en_di == NO_AUTOMATIC_RE_TRANSMISSION_DI)
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d105      	bne.n	800110e <no_art_en_di+0x32>
		p_can->MCR &= ~(1 << NO_AUTOMATIC_RE_TRANSMISSION_BIT_POS);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 0210 	bic.w	r2, r3, #16
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <check_for_data>:
 *
 * @return FIFO Number
 *
 */
static uint8_t check_for_data(can_regdef_t* p_can)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	if ( (p_can->RFxR[0] & 0x3) != 0x0)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <check_for_data+0x18>
	{
		return FIFO_0_MESSAGE_PENDING;
 800112c:	2300      	movs	r3, #0
 800112e:	e008      	b.n	8001142 <check_for_data+0x2a>
	}
	else if ( (p_can->RFxR[1] & 0x3) != 0x0)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <check_for_data+0x28>
	{
		return FIFO_1_MESSAGE_PENDING;
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <check_for_data+0x2a>
	}
	else
	{
		return FIFO_NO_MESSAGE_PENDING;
 8001140:	23ff      	movs	r3, #255	@ 0xff
	}
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <read_rtr>:
 *
 * @return void
 *
 */
static void read_rtr(can_regdef_t* p_can,uint8_t fifo_index)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	can_rx.rtr = ((p_can->can_rx_mailbox[fifo_index].RIxR >> 1) & 0x01);
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	331b      	adds	r3, #27
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	4413      	add	r3, r2
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	085b      	lsrs	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b03      	ldr	r3, [pc, #12]	@ (800117c <read_rtr+0x30>)
 8001170:	705a      	strb	r2, [r3, #1]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	200002a8 	.word	0x200002a8

08001180 <read_ide>:
 * @param[in] FIFO number (FIFO index)
 * @return void
 *
 */
static void read_ide(can_regdef_t* p_can,uint8_t fifo_index)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
	can_rx.ide = ((p_can->can_rx_mailbox[fifo_index].RIxR >> 1) & 0x02);
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	331b      	adds	r3, #27
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	4413      	add	r3, r2
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	085b      	lsrs	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <read_ide+0x30>)
 80011a4:	701a      	strb	r2, [r3, #0]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	200002a8 	.word	0x200002a8

080011b4 <read_id>:
 * @param[in] FIFO number (FIFO index)
 *
 * @return void
 */
static void read_id(can_regdef_t* p_can,uint8_t fifo_index)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
	if (can_rx.ide == STANDARD_FRAME)
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <read_id+0x4c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d109      	bne.n	80011dc <read_id+0x28>
	{
		can_rx.id = (( p_can->can_rx_mailbox[fifo_index].RIxR >> 21) & 0x7FF);
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	331b      	adds	r3, #27
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4413      	add	r3, r2
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	0d5b      	lsrs	r3, r3, #21
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <read_id+0x4c>)
 80011d8:	6093      	str	r3, [r2, #8]
	}
	else if (can_rx.ide == EXTENDED_FRAME)
	{
		can_rx.id = (( p_can->can_rx_mailbox[fifo_index].RIxR >> 3) & 0x1FFFFFFF);
	}
}
 80011da:	e00c      	b.n	80011f6 <read_id+0x42>
	else if (can_rx.ide == EXTENDED_FRAME)
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <read_id+0x4c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <read_id+0x42>
		can_rx.id = (( p_can->can_rx_mailbox[fifo_index].RIxR >> 3) & 0x1FFFFFFF);
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	331b      	adds	r3, #27
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4413      	add	r3, r2
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	08db      	lsrs	r3, r3, #3
 80011f2:	4a03      	ldr	r2, [pc, #12]	@ (8001200 <read_id+0x4c>)
 80011f4:	6093      	str	r3, [r2, #8]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	200002a8 	.word	0x200002a8

08001204 <read_length>:
 * @param[in] FIFO number (FIFO index)
 *
 * @return void
 */
static void read_length(can_regdef_t* p_can,uint8_t fifo_index)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
	can_rx.length = (p_can->can_rx_mailbox[fifo_index].RDTxR & 0xF);
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	331b      	adds	r3, #27
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4413      	add	r3, r2
 800121a:	3304      	adds	r3, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <read_length+0x30>)
 8001228:	711a      	strb	r2, [r3, #4]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	200002a8 	.word	0x200002a8

08001238 <read_time_stamp>:
 * @param[in] FIFO number (FIFO index)
 *
 * @return void
 */
static void read_time_stamp(can_regdef_t* p_can,uint8_t fifo_index)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	70fb      	strb	r3, [r7, #3]
	can_rx.time = (( p_can->can_rx_mailbox[fifo_index].RDTxR >> 16) & 0xFFFF);
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	331b      	adds	r3, #27
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4413      	add	r3, r2
 800124e:	3304      	adds	r3, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	0c1b      	lsrs	r3, r3, #16
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <read_time_stamp+0x2c>)
 8001258:	805a      	strh	r2, [r3, #2]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	200002a8 	.word	0x200002a8

08001268 <read_filter_match_index>:
 * @param[in] FIFO number (FIFO index)
 *
 * @return void
 */
static void read_filter_match_index(can_regdef_t* p_can,uint8_t fifo_index)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
	can_rx.filter_match_index = (( p_can->can_rx_mailbox[fifo_index].RDTxR >> 8) & 0xFF);
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	331b      	adds	r3, #27
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	4413      	add	r3, r2
 800127e:	3304      	adds	r3, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <read_filter_match_index+0x2c>)
 8001288:	715a      	strb	r2, [r3, #5]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	200002a8 	.word	0x200002a8

08001298 <read_data>:
 * @return void
 *
 */

static void read_data(can_regdef_t* p_can,uint8_t fifo_index)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
	can_rx.data_32[0] = p_can->can_rx_mailbox[fifo_index].RDLxR;
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <read_data+0x3c>)
 80012b4:	60d3      	str	r3, [r2, #12]
	can_rx.data_32[1] = p_can->can_rx_mailbox[fifo_index].RDHxR;
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	4413      	add	r3, r2
 80012be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a03      	ldr	r2, [pc, #12]	@ (80012d4 <read_data+0x3c>)
 80012c6:	6113      	str	r3, [r2, #16]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200002a8 	.word	0x200002a8

080012d8 <release_fifo>:
 *
 * @return void
 *
 */
static void release_fifo(can_regdef_t* p_can,uint8_t fifo_index)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
	p_can->RFxR[fifo_index] |= (1 << RELEASE_FIFO_MAILBOX_BIT_POS);
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	3302      	adds	r3, #2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	f042 0220 	orr.w	r2, r2, #32
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	3302      	adds	r3, #2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	605a      	str	r2, [r3, #4]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
	...

0800130c <hal_can_init>:
 * @param[in]  global configuration structure.
 *
 * @return    none
 */
uint8_t hal_can_init(can_config_t* can_config)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	can_config->no_automatic_retransmission_en_di = NO_AUTOMATIC_RE_TRANSMISSION_DI;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
	can_config->error_interrupt_en_di = ERROR_INTERRUPT_DI;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	721a      	strb	r2, [r3, #8]
	can_config->test_mode = LOOPBACK_TEST_MODE_EN;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	725a      	strb	r2, [r3, #9]
	can_config->tx_mailbox_empty_interrupt_en_di = TX_MAILBOX_EMPTY_INTERRUPT_DI;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2202      	movs	r2, #2
 800132a:	705a      	strb	r2, [r3, #1]
	can_config->fifo_0_message_pending_interrupt_en_di = FIFO_0_MESSAGE_PENDING_INTERRUPT_EN;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2205      	movs	r2, #5
 8001330:	709a      	strb	r2, [r3, #2]
	can_config->filter_index = FILTER_3;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2202      	movs	r2, #2
 8001336:	741a      	strb	r2, [r3, #16]
	can_config->filter_config[can_config->filter_index].id.id_16_bit_2[0] = 0x27;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7c1b      	ldrb	r3, [r3, #16]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	3304      	adds	r3, #4
 800134c:	2227      	movs	r2, #39	@ 0x27
 800134e:	801a      	strh	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].id.id_16_bit_2[1] = 0x27;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7c1b      	ldrb	r3, [r3, #16]
 8001354:	4619      	mov	r1, r3
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	440b      	add	r3, r1
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	331e      	adds	r3, #30
 8001364:	2227      	movs	r2, #39	@ 0x27
 8001366:	801a      	strh	r2, [r3, #0]

	can_config->filter_config[can_config->filter_index].scale = SCALE_16_BIT;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7c1b      	ldrb	r3, [r3, #16]
 800136c:	4619      	mov	r1, r3
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	440b      	add	r3, r1
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	3314      	adds	r3, #20
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].mode = IDENTIFIER_MASK_MODE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7c1b      	ldrb	r3, [r3, #16]
 8001384:	4619      	mov	r1, r3
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	3315      	adds	r3, #21
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].filter_assign_to = FILTER_ASSIGN_TO_FIFO_0;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7c1b      	ldrb	r3, [r3, #16]
 800139c:	4619      	mov	r1, r3
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	440b      	add	r3, r1
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4413      	add	r3, r2
 80013aa:	3316      	adds	r3, #22
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].ide = STANDARD_FRAME;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7c1b      	ldrb	r3, [r3, #16]
 80013b4:	4619      	mov	r1, r3
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	440b      	add	r3, r1
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	3317      	adds	r3, #23
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].rtr = DATA_FRAME;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7c1b      	ldrb	r3, [r3, #16]
 80013cc:	4619      	mov	r1, r3
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	440b      	add	r3, r1
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	3318      	adds	r3, #24
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].mask.mask_32_bit_2[0] = 0xFE000000;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7c1b      	ldrb	r3, [r3, #16]
 80013e4:	4619      	mov	r1, r3
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	440b      	add	r3, r1
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4413      	add	r3, r2
 80013f2:	3324      	adds	r3, #36	@ 0x24
 80013f4:	f04f 427e 	mov.w	r2, #4261412864	@ 0xfe000000
 80013f8:	601a      	str	r2, [r3, #0]
	can_config->filter_config[can_config->filter_index].mask.mask_32_bit_2[1] = 0xFE000000;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7c1b      	ldrb	r3, [r3, #16]
 80013fe:	4619      	mov	r1, r3
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	440b      	add	r3, r1
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	3328      	adds	r3, #40	@ 0x28
 800140e:	f04f 427e 	mov.w	r2, #4261412864	@ 0xfe000000
 8001412:	601a      	str	r2, [r3, #0]
	can_init(CAN1,&can_configuration);
 8001414:	4904      	ldr	r1, [pc, #16]	@ (8001428 <hal_can_init+0x11c>)
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <hal_can_init+0x120>)
 8001418:	f000 f80a 	bl	8001430 <can_init>

}
 800141c:	bf00      	nop
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002bc 	.word	0x200002bc
 800142c:	40006400 	.word	0x40006400

08001430 <can_init>:
 * @param[in]  global configuration structure.
 * @return    none
 *
 */
uint8_t can_init(can_regdef_t* p_can, can_config_t* can_config)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	enter_init_mode(p_can);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fa90 	bl	8001960 <enter_init_mode>

	CAN1->MCR &= ~(1 << 16);
 8001440:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <can_init+0x94>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1f      	ldr	r2, [pc, #124]	@ (80014c4 <can_init+0x94>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144a:	6013      	str	r3, [r2, #0]

	set_bit_timing(p_can,250000);
 800144c:	491e      	ldr	r1, [pc, #120]	@ (80014c8 <can_init+0x98>)
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 faa2 	bl	8001998 <set_bit_timing>

	set_test_mode(p_can,can_config->test_mode);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	7a5b      	ldrb	r3, [r3, #9]
 8001458:	4619      	mov	r1, r3
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 fa4d 	bl	80018fa <set_test_mode>

	error_interrupt_en_di(p_can,can_config->error_interrupt_en_di);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	7a1b      	ldrb	r3, [r3, #8]
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fe1a 	bl	80010a0 <error_interrupt_en_di>

	no_art_en_di(p_can,can_config->no_automatic_retransmission_en_di);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fe32 	bl	80010dc <no_art_en_di>

	interrupt_en_di(p_can,can_config->tx_mailbox_empty_interrupt_en_di);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	4619      	mov	r1, r3
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f832 	bl	80014e8 <interrupt_en_di>

	interrupt_en_di(p_can,can_config->fifo_0_message_pending_interrupt_en_di);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	789b      	ldrb	r3, [r3, #2]
 8001488:	4619      	mov	r1, r3
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f82c 	bl	80014e8 <interrupt_en_di>

	filter_config(p_can,can_config->filter_index,&(can_config->filter_config[can_config->filter_index]));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	7c19      	ldrb	r1, [r3, #16]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	7c1b      	ldrb	r3, [r3, #16]
 8001498:	461a      	mov	r2, r3
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	3310      	adds	r3, #16
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	3304      	adds	r3, #4
 80014aa:	461a      	mov	r2, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f869 	bl	8001584 <filter_config>

	enter_normal_mode(p_can);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f80a 	bl	80014cc <enter_normal_mode>

}
 80014b8:	bf00      	nop
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40006400 	.word	0x40006400
 80014c8:	0003d090 	.word	0x0003d090

080014cc <enter_normal_mode>:
 *
 * @return    none
 *
 */
void enter_normal_mode(can_regdef_t* p_can)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	exit_init_mode(p_can);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fdcc 	bl	8001072 <exit_init_mode>
	exit_sleep_mode(p_can);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fdb2 	bl	8001044 <exit_sleep_mode>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <interrupt_en_di>:
 *
 * @return    none
 *
 */
void interrupt_en_di(can_regdef_t* p_can,uint8_t en_di)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
	if (en_di == TX_MAILBOX_EMPTY_INTERRUPT_EN)
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d109      	bne.n	800150e <interrupt_en_di+0x26>
	{
		p_can->IER |= (1 << TX_MAILBOX_EMPTY_INTERRUPT_BIT_POS);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	615a      	str	r2, [r3, #20]
		nvic_en_irq(CAN1_TX_IRQn);
 8001506:	2013      	movs	r0, #19
 8001508:	f000 fe4c 	bl	80021a4 <nvic_en_irq>
	}
	else if(en_di == FIFO_1_MESSAGE_PENDING_INTERRUPT_DI)
	{
		p_can->IER &= ~(1 << FIFO_1_MESSAGE_PENDING_INTERRUPT_BIT_POS);
	}
}
 800150c:	e036      	b.n	800157c <interrupt_en_di+0x94>
	else if(en_di == TX_MAILBOX_EMPTY_INTERRUPT_DI)
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d106      	bne.n	8001522 <interrupt_en_di+0x3a>
		p_can->IER &= ~(1 << TX_MAILBOX_EMPTY_INTERRUPT_BIT_POS);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f023 0201 	bic.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	615a      	str	r2, [r3, #20]
}
 8001520:	e02c      	b.n	800157c <interrupt_en_di+0x94>
	else if (en_di == FIFO_0_MESSAGE_PENDING_INTERRUPT_EN)
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d109      	bne.n	800153c <interrupt_en_di+0x54>
		p_can->IER |= (1 << FIFO_0_MESSAGE_PENDING_INTERRUPT_BIT_POS);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f043 0202 	orr.w	r2, r3, #2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	615a      	str	r2, [r3, #20]
		nvic_en_irq(CAN1_RX_0_IRQn);
 8001534:	2014      	movs	r0, #20
 8001536:	f000 fe35 	bl	80021a4 <nvic_en_irq>
}
 800153a:	e01f      	b.n	800157c <interrupt_en_di+0x94>
	else if(en_di == FIFO_0_MESSAGE_PENDING_INTERRUPT_DI)
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	2b04      	cmp	r3, #4
 8001540:	d106      	bne.n	8001550 <interrupt_en_di+0x68>
		p_can->IER &= ~(1 << FIFO_0_MESSAGE_PENDING_INTERRUPT_BIT_POS);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f023 0202 	bic.w	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	615a      	str	r2, [r3, #20]
}
 800154e:	e015      	b.n	800157c <interrupt_en_di+0x94>
	else if (en_di == FIFO_1_MESSAGE_PENDING_INTERRUPT_EN)
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	2b07      	cmp	r3, #7
 8001554:	d109      	bne.n	800156a <interrupt_en_di+0x82>
		p_can->IER |= (1 << FIFO_1_MESSAGE_PENDING_INTERRUPT_BIT_POS);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f043 0210 	orr.w	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	615a      	str	r2, [r3, #20]
		nvic_en_irq(CAN1_RX_1_IRQn);
 8001562:	2015      	movs	r0, #21
 8001564:	f000 fe1e 	bl	80021a4 <nvic_en_irq>
}
 8001568:	e008      	b.n	800157c <interrupt_en_di+0x94>
	else if(en_di == FIFO_1_MESSAGE_PENDING_INTERRUPT_DI)
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	2b06      	cmp	r3, #6
 800156e:	d105      	bne.n	800157c <interrupt_en_di+0x94>
		p_can->IER &= ~(1 << FIFO_1_MESSAGE_PENDING_INTERRUPT_BIT_POS);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f023 0210 	bic.w	r2, r3, #16
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	615a      	str	r2, [r3, #20]
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <filter_config>:
 * @param[in]  filter configuration structure pointer.
 *
 * @return    none
 */
void filter_config(can_regdef_t* p_can,filter_index_e filter_number,filter_config_t* filter_configuration)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	460b      	mov	r3, r1
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	72fb      	strb	r3, [r7, #11]

	p_can->FMR |= (1 << FILTER_INIT_MODE_BIT_POS);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	//mode
	if (filter_configuration->mode == IDENTIFIER_LIST_MODE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	785b      	ldrb	r3, [r3, #1]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10b      	bne.n	80015c2 <filter_config+0x3e>
	{
		p_can->FM1R |= (1 << filter_number);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80015b0:	7afa      	ldrb	r2, [r7, #11]
 80015b2:	2101      	movs	r1, #1
 80015b4:	fa01 f202 	lsl.w	r2, r1, r2
 80015b8:	431a      	orrs	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015c0:	e00f      	b.n	80015e2 <filter_config+0x5e>
	}
	else if (filter_configuration->mode == IDENTIFIER_MASK_MODE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	785b      	ldrb	r3, [r3, #1]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10b      	bne.n	80015e2 <filter_config+0x5e>
	{
		p_can->FM1R &= ~(1 << filter_number);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80015d0:	7afa      	ldrb	r2, [r7, #11]
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	43d2      	mvns	r2, r2
 80015da:	401a      	ands	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	}

	//scale
	if (filter_configuration->scale == SCALE_32_BIT)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10b      	bne.n	8001602 <filter_config+0x7e>
	{
		p_can->FS1R |= (1 << filter_number);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80015f0:	7afa      	ldrb	r2, [r7, #11]
 80015f2:	2101      	movs	r1, #1
 80015f4:	fa01 f202 	lsl.w	r2, r1, r2
 80015f8:	431a      	orrs	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8001600:	e00e      	b.n	8001620 <filter_config+0x9c>
	}
	else if (filter_configuration->scale == SCALE_32_BIT)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d10a      	bne.n	8001620 <filter_config+0x9c>
	{
		p_can->FS1R |= (1 << filter_number);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001610:	7afa      	ldrb	r2, [r7, #11]
 8001612:	2101      	movs	r1, #1
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	431a      	orrs	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	}

	//filter assignement to FIFO
	if (filter_configuration->filter_assign_to == FILTER_ASSIGN_TO_FIFO_1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10b      	bne.n	8001640 <filter_config+0xbc>
	{
		p_can->FFA1R |= (1 << filter_number);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800162e:	7afa      	ldrb	r2, [r7, #11]
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	431a      	orrs	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800163e:	e00f      	b.n	8001660 <filter_config+0xdc>
	}
	else if (filter_configuration->filter_assign_to == FILTER_ASSIGN_TO_FIFO_0)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10b      	bne.n	8001660 <filter_config+0xdc>
	{
		p_can->FFA1R &= ~(1 << filter_number);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800164e:	7afa      	ldrb	r2, [r7, #11]
 8001650:	2101      	movs	r1, #1
 8001652:	fa01 f202 	lsl.w	r2, r1, r2
 8001656:	43d2      	mvns	r2, r2
 8001658:	401a      	ands	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	}


	if (filter_configuration->scale == SCALE_32_BIT && filter_configuration->mode == IDENTIFIER_LIST_MODE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d158      	bne.n	800171a <filter_config+0x196>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d154      	bne.n	800171a <filter_config+0x196>
	{
		// condition for standard and extented frame
		if(filter_configuration->ide == STANDARD_FRAME)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	78db      	ldrb	r3, [r3, #3]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d125      	bne.n	80016c4 <filter_config+0x140>
		{
			p_can->FxRi[filter_number*2].u32 = filter_configuration->id.id_32_bit_2[0] << 21 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	055a      	lsls	r2, r3, #21
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	78db      	ldrb	r3, [r3, #3]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	ea42 0103 	orr.w	r1, r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	791b      	ldrb	r3, [r3, #4]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	7afa      	ldrb	r2, [r7, #11]
 8001690:	0052      	lsls	r2, r2, #1
 8001692:	4319      	orrs	r1, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3290      	adds	r2, #144	@ 0x90
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			p_can->FxRi[filter_number*2 + 1].u32 = filter_configuration->id.id_32_bit_2[1] << 21 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	055a      	lsls	r2, r3, #21
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	78db      	ldrb	r3, [r3, #3]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	ea42 0103 	orr.w	r1, r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	791b      	ldrb	r3, [r3, #4]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	7afa      	ldrb	r2, [r7, #11]
 80016b4:	0052      	lsls	r2, r2, #1
 80016b6:	3201      	adds	r2, #1
 80016b8:	4319      	orrs	r1, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3290      	adds	r2, #144	@ 0x90
 80016be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(filter_configuration->ide == STANDARD_FRAME)
 80016c2:	e0ff      	b.n	80018c4 <filter_config+0x340>
		}
		else if (filter_configuration->ide == EXTENDED_FRAME)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	78db      	ldrb	r3, [r3, #3]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 80fb 	bne.w	80018c4 <filter_config+0x340>
		{
			p_can->FxRi[filter_number*2].u32 = filter_configuration->id.id_32_bit_2[0] << 3 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	00da      	lsls	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	ea42 0103 	orr.w	r1, r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	7afa      	ldrb	r2, [r7, #11]
 80016e6:	0052      	lsls	r2, r2, #1
 80016e8:	4319      	orrs	r1, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3290      	adds	r2, #144	@ 0x90
 80016ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			p_can->FxRi[filter_number*2 + 1].u32 = filter_configuration->id.id_32_bit_2[1] << 3 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	00da      	lsls	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	78db      	ldrb	r3, [r3, #3]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	ea42 0103 	orr.w	r1, r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	791b      	ldrb	r3, [r3, #4]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	7afa      	ldrb	r2, [r7, #11]
 800170a:	0052      	lsls	r2, r2, #1
 800170c:	3201      	adds	r2, #1
 800170e:	4319      	orrs	r1, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3290      	adds	r2, #144	@ 0x90
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(filter_configuration->ide == STANDARD_FRAME)
 8001718:	e0d4      	b.n	80018c4 <filter_config+0x340>
		}
	}
	else if (filter_configuration->scale == SCALE_32_BIT && filter_configuration->mode == IDENTIFIER_MASK_MODE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d156      	bne.n	80017d0 <filter_config+0x24c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	785b      	ldrb	r3, [r3, #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d152      	bne.n	80017d0 <filter_config+0x24c>
	{
		// condition for standard and extended frame.
		if(filter_configuration->ide == STANDARD_FRAME)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	78db      	ldrb	r3, [r3, #3]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d124      	bne.n	800177c <filter_config+0x1f8>
		{
			p_can->FxRi[filter_number*2].u32 = filter_configuration->id.id_32_bit_2[0] << 21 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	055a      	lsls	r2, r3, #21
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	78db      	ldrb	r3, [r3, #3]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	ea42 0103 	orr.w	r1, r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	791b      	ldrb	r3, [r3, #4]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	7afa      	ldrb	r2, [r7, #11]
 800174a:	0052      	lsls	r2, r2, #1
 800174c:	4319      	orrs	r1, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3290      	adds	r2, #144	@ 0x90
 8001752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			p_can->FxRi[filter_number*2 + 1].u32 = filter_configuration->mask.mask_32_bit_1[0]  | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	78db      	ldrb	r3, [r3, #3]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	ea42 0103 	orr.w	r1, r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	791b      	ldrb	r3, [r3, #4]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	7afa      	ldrb	r2, [r7, #11]
 800176c:	0052      	lsls	r2, r2, #1
 800176e:	3201      	adds	r2, #1
 8001770:	4319      	orrs	r1, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3290      	adds	r2, #144	@ 0x90
 8001776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(filter_configuration->ide == STANDARD_FRAME)
 800177a:	e0a5      	b.n	80018c8 <filter_config+0x344>
		}
		else if (filter_configuration->ide == EXTENDED_FRAME)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	78db      	ldrb	r3, [r3, #3]
 8001780:	2b01      	cmp	r3, #1
 8001782:	f040 80a1 	bne.w	80018c8 <filter_config+0x344>
		{
			p_can->FxRi[filter_number*2].u32 = filter_configuration->id.id_32_bit_2[0] << 3 | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	00da      	lsls	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	78db      	ldrb	r3, [r3, #3]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	ea42 0103 	orr.w	r1, r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	791b      	ldrb	r3, [r3, #4]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	7afa      	ldrb	r2, [r7, #11]
 800179e:	0052      	lsls	r2, r2, #1
 80017a0:	4319      	orrs	r1, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3290      	adds	r2, #144	@ 0x90
 80017a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			p_can->FxRi[filter_number*2 + 1].u32 = filter_configuration->mask.mask_32_bit_1[0] | (filter_configuration->ide << 2) | (filter_configuration->rtr << 1);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	78db      	ldrb	r3, [r3, #3]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	ea42 0103 	orr.w	r1, r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	791b      	ldrb	r3, [r3, #4]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	7afa      	ldrb	r2, [r7, #11]
 80017c0:	0052      	lsls	r2, r2, #1
 80017c2:	3201      	adds	r2, #1
 80017c4:	4319      	orrs	r1, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3290      	adds	r2, #144	@ 0x90
 80017ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(filter_configuration->ide == STANDARD_FRAME)
 80017ce:	e07b      	b.n	80018c8 <filter_config+0x344>
		}
	}
	else if (filter_configuration->scale == SCALE_16_BIT && filter_configuration->mode == IDENTIFIER_LIST_MODE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d141      	bne.n	800185c <filter_config+0x2d8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d13d      	bne.n	800185c <filter_config+0x2d8>
	{
		// restricted to standard only.
		p_can->FxRi[filter_number*2].u32 = (filter_configuration->id.id_16_bit_4[1] << 21 | (filter_configuration->ide << 20) | (filter_configuration->rtr << 19))\
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	895b      	ldrh	r3, [r3, #10]
 80017e4:	055a      	lsls	r2, r3, #21
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	78db      	ldrb	r3, [r3, #3]
 80017ea:	051b      	lsls	r3, r3, #20
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	791b      	ldrb	r3, [r3, #4]
 80017f2:	04db      	lsls	r3, r3, #19
 80017f4:	431a      	orrs	r2, r3
											| (filter_configuration->id.id_16_bit_4[0] << 5 | (filter_configuration->ide << 4) | (filter_configuration->rtr << 3));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	891b      	ldrh	r3, [r3, #8]
 80017fa:	0159      	lsls	r1, r3, #5
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	78db      	ldrb	r3, [r3, #3]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4319      	orrs	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	791b      	ldrb	r3, [r3, #4]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	430b      	orrs	r3, r1
 800180c:	ea42 0103 	orr.w	r1, r2, r3
		p_can->FxRi[filter_number*2].u32 = (filter_configuration->id.id_16_bit_4[1] << 21 | (filter_configuration->ide << 20) | (filter_configuration->rtr << 19))\
 8001810:	7afb      	ldrb	r3, [r7, #11]
 8001812:	005a      	lsls	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3290      	adds	r2, #144	@ 0x90
 8001818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		p_can->FxRi[filter_number*2 + 1].u32 = (filter_configuration->id.id_16_bit_4[3] << 21 | (filter_configuration->ide << 20) | (filter_configuration->rtr << 19))\
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	89db      	ldrh	r3, [r3, #14]
 8001820:	055a      	lsls	r2, r3, #21
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	78db      	ldrb	r3, [r3, #3]
 8001826:	051b      	lsls	r3, r3, #20
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	791b      	ldrb	r3, [r3, #4]
 800182e:	04db      	lsls	r3, r3, #19
 8001830:	431a      	orrs	r2, r3
												| (filter_configuration->id.id_16_bit_4[2] << 5 | (filter_configuration->ide << 4) | (filter_configuration->rtr << 3));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	899b      	ldrh	r3, [r3, #12]
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	78db      	ldrb	r3, [r3, #3]
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4319      	orrs	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	791b      	ldrb	r3, [r3, #4]
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	430b      	orrs	r3, r1
 8001848:	ea42 0103 	orr.w	r1, r2, r3
		p_can->FxRi[filter_number*2 + 1].u32 = (filter_configuration->id.id_16_bit_4[3] << 21 | (filter_configuration->ide << 20) | (filter_configuration->rtr << 19))\
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3290      	adds	r2, #144	@ 0x90
 8001856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800185a:	e036      	b.n	80018ca <filter_config+0x346>
	}
	else if (filter_configuration->scale == SCALE_16_BIT && filter_configuration->mode == IDENTIFIER_MASK_MODE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d132      	bne.n	80018ca <filter_config+0x346>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d12e      	bne.n	80018ca <filter_config+0x346>
	{
		p_can->FxRi[filter_number*2].u32 = filter_configuration->mask.mask_32_bit_2[0] | (filter_configuration->id.id_16_bit_2[0] << 5) | (filter_configuration->ide << 4) | (filter_configuration->rtr << 3);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	891b      	ldrh	r3, [r3, #8]
 8001874:	015b      	lsls	r3, r3, #5
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	78db      	ldrb	r3, [r3, #3]
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	ea42 0103 	orr.w	r1, r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	791b      	ldrb	r3, [r3, #4]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	7afa      	ldrb	r2, [r7, #11]
 800188a:	0052      	lsls	r2, r2, #1
 800188c:	4319      	orrs	r1, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3290      	adds	r2, #144	@ 0x90
 8001892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_can->FxRi[filter_number*2 + 1].u32 = filter_configuration->mask.mask_32_bit_2[1] | (filter_configuration->id.id_16_bit_2[1] << 5) | (filter_configuration->ide << 4) | (filter_configuration->rtr << 3);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	895b      	ldrh	r3, [r3, #10]
 800189e:	015b      	lsls	r3, r3, #5
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	ea42 0103 	orr.w	r1, r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	791b      	ldrb	r3, [r3, #4]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	7afa      	ldrb	r2, [r7, #11]
 80018b4:	0052      	lsls	r2, r2, #1
 80018b6:	3201      	adds	r2, #1
 80018b8:	4319      	orrs	r1, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3290      	adds	r2, #144	@ 0x90
 80018be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80018c2:	e002      	b.n	80018ca <filter_config+0x346>
		if(filter_configuration->ide == STANDARD_FRAME)
 80018c4:	bf00      	nop
 80018c6:	e000      	b.n	80018ca <filter_config+0x346>
		if(filter_configuration->ide == STANDARD_FRAME)
 80018c8:	bf00      	nop

	}

	//activate the filter.
	p_can->FA1R |= (1 << filter_number);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80018d0:	7afa      	ldrb	r2, [r7, #11]
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	431a      	orrs	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	//exit from initialization mode.
	p_can->FMR &= ~(1 << FILTER_INIT_MODE_BIT_POS);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018e6:	f023 0201 	bic.w	r2, r3, #1
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <set_test_mode>:
 *
 * @return    none
 *
 */
void set_test_mode(can_regdef_t* p_can,uint8_t test_mode)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	70fb      	strb	r3, [r7, #3]
	if (test_mode == LOOPBACK_TEST_MODE_EN)
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d106      	bne.n	800191a <set_test_mode+0x20>
	{
		p_can->BTR |= (1 << LOOPBACK_TEST_MODE_BIT_POSITION);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	61da      	str	r2, [r3, #28]
	}
	else if (test_mode == SILENT_TEST_MODE_DI)
	{
		p_can->BTR &= ~(1 << SILENT_TEST_MODE_BIT_POSITION);
	}
}
 8001918:	e01c      	b.n	8001954 <set_test_mode+0x5a>
	else if (test_mode == LOOPBACK_TEST_MODE_DI)
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d106      	bne.n	800192e <set_test_mode+0x34>
		p_can->BTR &= ~(1 << LOOPBACK_TEST_MODE_BIT_POSITION);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	61da      	str	r2, [r3, #28]
}
 800192c:	e012      	b.n	8001954 <set_test_mode+0x5a>
	else if (test_mode == SILENT_TEST_MODE_EN)
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d106      	bne.n	8001942 <set_test_mode+0x48>
		p_can->BTR |= (1 << SILENT_TEST_MODE_BIT_POSITION);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	61da      	str	r2, [r3, #28]
}
 8001940:	e008      	b.n	8001954 <set_test_mode+0x5a>
	else if (test_mode == SILENT_TEST_MODE_DI)
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <set_test_mode+0x5a>
		p_can->BTR &= ~(1 << SILENT_TEST_MODE_BIT_POSITION);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	61da      	str	r2, [r3, #28]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
	...

08001960 <enter_init_mode>:
 *
 * @return    none
 *
 */
void enter_init_mode(can_regdef_t* p_can)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	exit_sleep_mode(p_can);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fb6b 	bl	8001044 <exit_sleep_mode>
	CAN1->MCR |= (1 << INIT_REQUEST_BIT_POS);
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <enter_init_mode+0x34>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <enter_init_mode+0x34>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6013      	str	r3, [r2, #0]
	while(!(p_can->MSR & (1 << INIT_ACK_BIT_POSITION)));
 800197a:	bf00      	nop
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f9      	beq.n	800197c <enter_init_mode+0x1c>
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40006400 	.word	0x40006400

08001998 <set_bit_timing>:

 * @return    none
 *
 */
void set_bit_timing(can_regdef_t* p_can,uint32_t baudrate)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	uint16_t brp;
	brp = (uint16_t)( (apb_get_clock(APB1) / (baudrate * 16) ) - 1);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f000 f9d6 	bl	8001d54 <apb_get_clock>
 80019a8:	4602      	mov	r2, r0
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	3b01      	subs	r3, #1
 80019b6:	81fb      	strh	r3, [r7, #14]
	p_can->BTR = 0x00000000;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
	p_can->BTR |= (brp << 0);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	61da      	str	r2, [r3, #28]
	p_can->BTR |= 0xC << 16;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	61da      	str	r2, [r3, #28]
	p_can->BTR |= 0x1 << 20;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	61da      	str	r2, [r3, #28]
	p_can->BTR |= 0x0 << 24;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69da      	ldr	r2, [r3, #28]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	61da      	str	r2, [r3, #28]
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <can_receive_message>:
 *
 * @return RX_DONE (1)
 *
 */
uint8_t can_receive_message(can_regdef_t* p_can, uint8_t fifo_message_pending_index)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	70fb      	strb	r3, [r7, #3]

		read_rtr(p_can,fifo_message_pending_index);
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fba2 	bl	800114c <read_rtr>

		read_ide(p_can,fifo_message_pending_index);
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fbb7 	bl	8001180 <read_ide>

		read_id(p_can,fifo_message_pending_index);
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	4619      	mov	r1, r3
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fbcc 	bl	80011b4 <read_id>

		read_length(p_can,fifo_message_pending_index);
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fbef 	bl	8001204 <read_length>

		read_time_stamp(p_can,fifo_message_pending_index);
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fc04 	bl	8001238 <read_time_stamp>

		read_filter_match_index(p_can,fifo_message_pending_index);
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fc17 	bl	8001268 <read_filter_match_index>

		read_data(p_can,fifo_message_pending_index);
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fc2a 	bl	8001298 <read_data>

		release_fifo(p_can,fifo_message_pending_index);
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fc45 	bl	80012d8 <release_fifo>

		return RX_DONE;
 8001a4e:	2301      	movs	r3, #1

}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <register_rx0_callback>:
 *
 * @return void
 *
 */
void register_rx0_callback(can_rx0_callback_t callback)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	callback_rx0 = callback;
 8001a60:	4a03      	ldr	r2, [pc, #12]	@ (8001a70 <register_rx0_callback+0x18>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	20000420 	.word	0x20000420

08001a74 <USB_LP_CAN_RX0_IRQHandler>:
 *
 * @return void
 *
 */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	// FIFO FULL

	// FIFO OVERRUN

	// FIFO message received
	if (check_for_data(CAN1) == FIFO_0_MESSAGE_PENDING)
 8001a7e:	480b      	ldr	r0, [pc, #44]	@ (8001aac <USB_LP_CAN_RX0_IRQHandler+0x38>)
 8001a80:	f7ff fb4a 	bl	8001118 <check_for_data>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10b      	bne.n	8001aa2 <USB_LP_CAN_RX0_IRQHandler+0x2e>
	{
		can_receive_message(CAN1,FIFO_0_MESSAGE_PENDING); // reads the message.
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4807      	ldr	r0, [pc, #28]	@ (8001aac <USB_LP_CAN_RX0_IRQHandler+0x38>)
 8001a8e:	f7ff ffb0 	bl	80019f2 <can_receive_message>
		if (callback_rx0)
 8001a92:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <USB_LP_CAN_RX0_IRQHandler+0x3c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <USB_LP_CAN_RX0_IRQHandler+0x2e>
		{
			callback_rx0(&can_rx);
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <USB_LP_CAN_RX0_IRQHandler+0x3c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <USB_LP_CAN_RX0_IRQHandler+0x40>)
 8001aa0:	4798      	blx	r3
		}
	}

}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40006400 	.word	0x40006400
 8001ab0:	20000420 	.word	0x20000420
 8001ab4:	200002a8 	.word	0x200002a8

08001ab8 <clock_init>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

void clock_init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	ahb_clk_set(p->ahb_prescalar);
 8001abc:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <clock_init+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	78db      	ldrb	r3, [r3, #3]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f8c2 	bl	8001c4c <ahb_clk_set>

	apb1_clk_set(p->apb1_prescalar);
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <clock_init+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	791b      	ldrb	r3, [r3, #4]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f8d6 	bl	8001c80 <apb1_clk_set>

	apb2_clk_set(p->apb2_prescalar);
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <clock_init+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	795b      	ldrb	r3, [r3, #5]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f8ea 	bl	8001cb4 <apb2_clk_set>

	pll_clk_config(p->pll_clock_source,p->pll_input_clock_multiplier);
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <clock_init+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	789a      	ldrb	r2, [r3, #2]
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <clock_init+0x64>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f000 f882 	bl	8001bf8 <pll_clk_config>

	system_clock_set(p->system_clock_source);
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <clock_init+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f812 	bl	8001b24 <system_clock_set>

	ahb_peripheral_clock_en(AHB_PERIPHERAL_CLOCK_EN);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f000 f915 	bl	8001d30 <ahb_peripheral_clock_en>

	apb2_peripheral_clock_en(APB2_PERIPHERAL_CLOCK_EN);
 8001b06:	f641 201d 	movw	r0, #6685	@ 0x1a1d
 8001b0a:	f000 f8ed 	bl	8001ce8 <apb2_peripheral_clock_en>

	apb1_peripheral_clock_en(APB1_PERIPHERAL_CLOCK_EN);
 8001b0e:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <clock_init+0x68>)
 8001b10:	f000 f8fc 	bl	8001d0c <apb1_peripheral_clock_en>

	lsi_clock_en();
 8001b14:	f000 f9d4 	bl	8001ec0 <lsi_clock_en>

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	02420000 	.word	0x02420000

08001b24 <system_clock_set>:
** Returned value:	Current Source of the system Clock
**
*****************************************************************************/

uint8_t system_clock_set(clock_source_e source)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = HSI;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
	if (source == HSE)
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d11f      	bne.n	8001b78 <system_clock_set+0x54>
	{
		RCC->CR |= HSE_ON;
 8001b38:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
		while (!IS_HSE_READY())
 8001b44:	bf00      	nop
 8001b46:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f9      	beq.n	8001b46 <system_clock_set+0x22>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8001b52:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a27      	ldr	r2, [pc, #156]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b58:	f023 0303 	bic.w	r3, r3, #3
 8001b5c:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSE;
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a24      	ldr	r2, [pc, #144]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
		RCC->CR &= ~(1 << 0);
 8001b6a:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a21      	ldr	r2, [pc, #132]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e037      	b.n	8001be8 <system_clock_set+0xc4>
	}
	else if (source == HSI)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d117      	bne.n	8001bae <system_clock_set+0x8a>
	{
		RCC->CR |= HSI_ON;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6013      	str	r3, [r2, #0]
		while (!IS_HSI_READY())
 8001b8a:	bf00      	nop
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f9      	beq.n	8001b8c <system_clock_set+0x68>
		{
			;
		}
		RCC->CFGR &= ~(3 << 0);
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4a15      	ldr	r2, [pc, #84]	@ (8001bf4 <system_clock_set+0xd0>)
 8001b9e:	f023 0303 	bic.w	r3, r3, #3
 8001ba2:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= HSI;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <system_clock_set+0xd0>)
 8001ba6:	4a13      	ldr	r2, [pc, #76]	@ (8001bf4 <system_clock_set+0xd0>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	6053      	str	r3, [r2, #4]
 8001bac:	e01c      	b.n	8001be8 <system_clock_set+0xc4>
	}
	else if (source == PLL)
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d119      	bne.n	8001be8 <system_clock_set+0xc4>
	{
		RCC->CR |= PLL_ON;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <system_clock_set+0xd0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf4 <system_clock_set+0xd0>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]
		while (!IS_PLL_READY())
 8001bc0:	bf00      	nop
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <system_clock_set+0xd0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f9      	beq.n	8001bc2 <system_clock_set+0x9e>
		{
			;
		}
		//RCC->CFGR &= ~(3 << 0);
		RCC->CFGR |= PLL;
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <system_clock_set+0xd0>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4a08      	ldr	r2, [pc, #32]	@ (8001bf4 <system_clock_set+0xd0>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6053      	str	r3, [r2, #4]
		while ((RCC->CFGR & (3 << 2)) != 8);
 8001bda:	bf00      	nop
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <system_clock_set+0xd0>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d1f9      	bne.n	8001bdc <system_clock_set+0xb8>
		//RCC->CR &= ~(1 << 0);

	}
	return temp;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <pll_clk_config>:
**
** Returned value:		status of the function (healthy or error)
**
*****************************************************************************/
uint8_t pll_clk_config(pll_entry_clock_source_e source,pll_input_multiplier_e multiplication_factor)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460a      	mov	r2, r1
 8001c02:	71fb      	strb	r3, [r7, #7]
 8001c04:	4613      	mov	r3, r2
 8001c06:	71bb      	strb	r3, [r7, #6]
	 RCC->CFGR &= ~(0xF << 18);
 8001c08:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <pll_clk_config+0x50>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c48 <pll_clk_config+0x50>)
 8001c0e:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8001c12:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= (multiplication_factor << 18);
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <pll_clk_config+0x50>)
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	049b      	lsls	r3, r3, #18
 8001c1c:	490a      	ldr	r1, [pc, #40]	@ (8001c48 <pll_clk_config+0x50>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
	 RCC->CFGR &= ~(1 << 16);
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <pll_clk_config+0x50>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4a08      	ldr	r2, [pc, #32]	@ (8001c48 <pll_clk_config+0x50>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2c:	6053      	str	r3, [r2, #4]
	 RCC->CFGR |= source;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <pll_clk_config+0x50>)
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4904      	ldr	r1, [pc, #16]	@ (8001c48 <pll_clk_config+0x50>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
     return 1;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000

08001c4c <ahb_clk_set>:
**
*****************************************************************************/


void ahb_clk_set(ahb_prescalar_option_e factor)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << AHB_CLOCK_PRESCALAR_OFFSET);
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <ahb_clk_set+0x30>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a08      	ldr	r2, [pc, #32]	@ (8001c7c <ahb_clk_set+0x30>)
 8001c5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c60:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << AHB_CLOCK_PRESCALAR_OFFSET);
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <ahb_clk_set+0x30>)
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4904      	ldr	r1, [pc, #16]	@ (8001c7c <ahb_clk_set+0x30>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000

08001c80 <apb1_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_clk_set(apbx_prescalar_options_e factor)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0x7 << APB1_CLOCK_PRESCALAR_OFFSET);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <apb1_clk_set+0x30>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <apb1_clk_set+0x30>)
 8001c90:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c94:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB1_CLOCK_PRESCALAR_OFFSET);
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <apb1_clk_set+0x30>)
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	4904      	ldr	r1, [pc, #16]	@ (8001cb0 <apb1_clk_set+0x30>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <apb2_clk_set>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_clk_set(apbx_prescalar_options_e factor)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << APB2_CLOCK_PRESCALAR_OFFSET);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <apb2_clk_set+0x30>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <apb2_clk_set+0x30>)
 8001cc4:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8001cc8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (factor << APB2_CLOCK_PRESCALAR_OFFSET);
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <apb2_clk_set+0x30>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	02db      	lsls	r3, r3, #11
 8001cd2:	4904      	ldr	r1, [pc, #16]	@ (8001ce4 <apb2_clk_set+0x30>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <apb2_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb2_peripheral_clock_en(uint32_t clock_en_parameter)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= clock_en_parameter;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <apb2_peripheral_clock_en+0x20>)
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	4904      	ldr	r1, [pc, #16]	@ (8001d08 <apb2_peripheral_clock_en+0x20>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	618b      	str	r3, [r1, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000

08001d0c <apb1_peripheral_clock_en>:
**
** Returned value:		void
**
*****************************************************************************/
void apb1_peripheral_clock_en(uint32_t clock_en_parameter)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= clock_en_parameter;
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <apb1_peripheral_clock_en+0x20>)
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	4904      	ldr	r1, [pc, #16]	@ (8001d2c <apb1_peripheral_clock_en+0x20>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61cb      	str	r3, [r1, #28]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000

08001d30 <ahb_peripheral_clock_en>:


void ahb_peripheral_clock_en(uint32_t clock_en_parameter)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	RCC->AHBENR |= clock_en_parameter;
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <ahb_peripheral_clock_en+0x20>)
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	4904      	ldr	r1, [pc, #16]	@ (8001d50 <ahb_peripheral_clock_en+0x20>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	614b      	str	r3, [r1, #20]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000

08001d54 <apb_get_clock>:
**
** Returned value:		Clock Frequency
**
*****************************************************************************/
uint32_t apb_get_clock(uint8_t apb)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t clock_source;
	uint32_t sysclk, temp,temp2, ahbp, apbp;

	clock_source = ((RCC->CFGR >> 2) & 0x03);
 8001d5e:	4b33      	ldr	r3, [pc, #204]	@ (8001e2c <apb_get_clock+0xd8>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	74fb      	strb	r3, [r7, #19]
	if (clock_source == SYSCLK_SOURCE_HSI)
 8001d6c:	7cfb      	ldrb	r3, [r7, #19]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <apb_get_clock+0x24>
	{
		sysclk = 8000000;
 8001d72:	4b2f      	ldr	r3, [pc, #188]	@ (8001e30 <apb_get_clock+0xdc>)
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e011      	b.n	8001d9c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_HSE)
 8001d78:	7cfb      	ldrb	r3, [r7, #19]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <apb_get_clock+0x30>
	{
		sysclk = 8000000;
 8001d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e30 <apb_get_clock+0xdc>)
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e00b      	b.n	8001d9c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL)
 8001d84:	7cfb      	ldrb	r3, [r7, #19]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d103      	bne.n	8001d92 <apb_get_clock+0x3e>
	{
		sysclk = get_pll_clock();
 8001d8a:	f000 f857 	bl	8001e3c <get_pll_clock>
 8001d8e:	61f8      	str	r0, [r7, #28]
 8001d90:	e004      	b.n	8001d9c <apb_get_clock+0x48>
	}
	else if (clock_source == SYSCLK_SOURCE_PLL_R)
 8001d92:	7cfb      	ldrb	r3, [r7, #19]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d101      	bne.n	8001d9c <apb_get_clock+0x48>
	{
		sysclk = 1; // study this and write the function for it.
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
	}

	/*
	 * Get AHB Prescalar Value
	 */
	temp = (RCC->CFGR >> 4) & 0xF;
 8001d9c:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <apb_get_clock+0xd8>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	60fb      	str	r3, [r7, #12]
	if (temp < 8)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b07      	cmp	r3, #7
 8001dac:	d802      	bhi.n	8001db4 <apb_get_clock+0x60>
	{
		ahbp = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	e005      	b.n	8001dc0 <apb_get_clock+0x6c>
	}
	else
	{
		ahbp = ahb_prescaler_1[temp - 8];
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3b08      	subs	r3, #8
 8001db8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e34 <apb_get_clock+0xe0>)
 8001dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dbe:	61bb      	str	r3, [r7, #24]
	}

	/*
	 * Get APB1 Prescalar Value
	 */
	if (apb == APB1)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d111      	bne.n	8001dea <apb_get_clock+0x96>
	{
		temp = ( (RCC->CFGR >> 8) & 0x7);
 8001dc6:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <apb_get_clock+0xd8>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d802      	bhi.n	8001dde <apb_get_clock+0x8a>
		{
			apbp = 1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e005      	b.n	8001dea <apb_get_clock+0x96>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3b04      	subs	r3, #4
 8001de2:	4a15      	ldr	r2, [pc, #84]	@ (8001e38 <apb_get_clock+0xe4>)
 8001de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001de8:	617b      	str	r3, [r7, #20]
	}

	/*
	 * get APB2 Prescalar Value
	 */
	if (apb == APB2)
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d111      	bne.n	8001e14 <apb_get_clock+0xc0>
	{
		temp = ((RCC->CFGR >> 11) & 0x7);
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <apb_get_clock+0xd8>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	0adb      	lsrs	r3, r3, #11
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]
		if (temp < 4)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d802      	bhi.n	8001e08 <apb_get_clock+0xb4>
		{
			apbp = 1;
 8001e02:	2301      	movs	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e005      	b.n	8001e14 <apb_get_clock+0xc0>
		}
		else
		{
			apbp = apb_prescaler_1[temp-4];
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <apb_get_clock+0xe4>)
 8001e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e12:	617b      	str	r3, [r7, #20]
		}
	}
	return (sysclk / ahbp / apbp);
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3

}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3720      	adds	r7, #32
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	007a1200 	.word	0x007a1200
 8001e34:	2000000c 	.word	0x2000000c
 8001e38:	2000001c 	.word	0x2000001c

08001e3c <get_pll_clock>:




uint32_t get_pll_clock(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
	// PLL input Clock source
	// If PLL input clock source is HSE then check PLLXTRE in Register
	uint8_t clock_source = ( (RCC->CFGR >> 16) & 0x01);
 8001e42:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <get_pll_clock+0x74>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	0c1b      	lsrs	r3, r3, #16
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	72fb      	strb	r3, [r7, #11]
	uint32_t multipliation_factor = ( (RCC->CFGR >> 18) & 0x0F);
 8001e50:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <get_pll_clock+0x74>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	607b      	str	r3, [r7, #4]
	uint32_t hse_pll_divider = ( (RCC->CFGR >> 17) & 0x01);
 8001e5c:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <get_pll_clock+0x74>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0c5b      	lsrs	r3, r3, #17
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	603b      	str	r3, [r7, #0]
	uint32_t pll_out_clk = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
	if (clock_source == PLL_HSI_DIV_2)
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <get_pll_clock+0x4a>
	{
		pll_out_clk =  ( (HSI_INPUT / 2) * pll_multiplier[multipliation_factor]);
 8001e72:	4a10      	ldr	r2, [pc, #64]	@ (8001eb4 <get_pll_clock+0x78>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <get_pll_clock+0x7c>)
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e00e      	b.n	8001ea4 <get_pll_clock+0x68>
	}
	else if (clock_source == PLL_HSE)
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10b      	bne.n	8001ea4 <get_pll_clock+0x68>
	{
		pll_out_clk =  ( ( (HSE_INPUT) / (hse_pll_divider + 1) ) * pll_multiplier[multipliation_factor]);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <get_pll_clock+0x80>)
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4907      	ldr	r1, [pc, #28]	@ (8001eb4 <get_pll_clock+0x78>)
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	440a      	add	r2, r1
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	60fb      	str	r3, [r7, #12]
	}
	return pll_out_clk;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	20000024 	.word	0x20000024
 8001eb8:	003d0900 	.word	0x003d0900
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <lsi_clock_en>:

void lsi_clock_en(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
	RCC->CSR |= (1 << LSI_CLOCK_EN_BIT_POSITION_CSR);
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <lsi_clock_en+0x28>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec8:	4a07      	ldr	r2, [pc, #28]	@ (8001ee8 <lsi_clock_en+0x28>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6253      	str	r3, [r2, #36]	@ 0x24
	while(!(RCC->CSR & IS_LSI_CLOCK_READY)){;}
 8001ed0:	bf00      	nop
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <lsi_clock_en+0x28>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f9      	beq.n	8001ed2 <lsi_clock_en+0x12>
}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000

08001eec <io_port>:

#define LED_ON() 			io_set_out(IO_TEST_LED, OUT_STATE_LOW);
#define LED_OFF() 			io_set_out(IO_TEST_LED, OUT_STATE_HIGH);

static uint8_t io_port(io_e io)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
    return (io & IO_PORT_MASK) >> IO_PORT_OFFSET;
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	b2db      	uxtb	r3, r3
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <io_pin_bit>:

static uint8_t io_pin_bit(gpio_pins io)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
    return io & IO_PIN_MASK;
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	b2db      	uxtb	r3, r3
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <io_init>:
	}
}


void io_init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 8001f2e:	2302      	movs	r3, #2
 8001f30:	71fb      	strb	r3, [r7, #7]
 8001f32:	e00d      	b.n	8001f50 <io_init+0x28>
	{
		io_config(io,&io_initial_config[io]);
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <io_init+0x38>)
 8001f3e:	441a      	add	r2, r3
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f80d 	bl	8001f64 <io_config>
	for (io_e io = P0_2; io <= ARRAY_SIZE(io_initial_config);io++)
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	2b30      	cmp	r3, #48	@ 0x30
 8001f54:	d9ee      	bls.n	8001f34 <io_init+0xc>
	}
}
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000034 	.word	0x20000034

08001f64 <io_config>:

void io_config(io_e io, io_configuration *config)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
	io_set_io_mode(io,config->mode,config->config,config->pupd);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	7819      	ldrb	r1, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	785a      	ldrb	r2, [r3, #1]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	789b      	ldrb	r3, [r3, #2]
 8001f7c:	79f8      	ldrb	r0, [r7, #7]
 8001f7e:	f000 f805 	bl	8001f8c <io_set_io_mode>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <io_set_io_mode>:

void io_set_io_mode(io_e io, io_mode_e mode, io_config_e config,io_pull_up_down_e pupd)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4604      	mov	r4, r0
 8001f94:	4608      	mov	r0, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4623      	mov	r3, r4
 8001f9c:	71fb      	strb	r3, [r7, #7]
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71bb      	strb	r3, [r7, #6]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	717b      	strb	r3, [r7, #5]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	713b      	strb	r3, [r7, #4]
	pin = io_pin_bit(io);
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ffad 	bl	8001f0c <io_pin_bit>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80020a8 <io_set_io_mode+0x11c>)
 8001fb8:	701a      	strb	r2, [r3, #0]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + (io_port(io)*0x400));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff95 	bl	8001eec <io_port>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001fca:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8001fce:	60fb      	str	r3, [r7, #12]
	if(config == CONFIG_INPUT_WITH_PULLUP_PULLDOWN)
 8001fd0:	797b      	ldrb	r3, [r7, #5]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d11b      	bne.n	800200e <io_set_io_mode+0x82>
	{
		if (pupd == PULL_UP)
 8001fd6:	793b      	ldrb	r3, [r7, #4]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d10a      	bne.n	8001ff2 <io_set_io_mode+0x66>
		{
			Port->ODR |= (1 << pin);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a31      	ldr	r2, [pc, #196]	@ (80020a8 <io_set_io_mode+0x11c>)
 8001fe2:	7812      	ldrb	r2, [r2, #0]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	408a      	lsls	r2, r1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	e00d      	b.n	800200e <io_set_io_mode+0x82>
		}
		else if (pupd == PULL_DOWN)
 8001ff2:	793b      	ldrb	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <io_set_io_mode+0x82>
		{
			Port->ODR &= ~(1 << pin);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80020a8 <io_set_io_mode+0x11c>)
 8001ffe:	7812      	ldrb	r2, [r2, #0]
 8002000:	4611      	mov	r1, r2
 8002002:	2201      	movs	r2, #1
 8002004:	408a      	lsls	r2, r1
 8002006:	43d2      	mvns	r2, r2
 8002008:	401a      	ands	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	60da      	str	r2, [r3, #12]
		}
	}
	if (pin < 8)
 800200e:	4b26      	ldr	r3, [pc, #152]	@ (80020a8 <io_set_io_mode+0x11c>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b07      	cmp	r3, #7
 8002014:	d81e      	bhi.n	8002054 <io_set_io_mode+0xc8>
	{
		Port->CRL &= ~(0xF << PIN_MODE_MASK);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a23      	ldr	r2, [pc, #140]	@ (80020a8 <io_set_io_mode+0x11c>)
 800201c:	7812      	ldrb	r2, [r2, #0]
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	210f      	movs	r1, #15
 8002022:	fa01 f202 	lsl.w	r2, r1, r2
 8002026:	43d2      	mvns	r2, r2
 8002028:	401a      	ands	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	601a      	str	r2, [r3, #0]
		Port->CRL |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK + 2));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	79b9      	ldrb	r1, [r7, #6]
 8002034:	4a1c      	ldr	r2, [pc, #112]	@ (80020a8 <io_set_io_mode+0x11c>)
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	4091      	lsls	r1, r2
 800203c:	7978      	ldrb	r0, [r7, #5]
 800203e:	4a1a      	ldr	r2, [pc, #104]	@ (80020a8 <io_set_io_mode+0x11c>)
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	3202      	adds	r2, #2
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	430a      	orrs	r2, r1
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	601a      	str	r2, [r3, #0]
	{
		pin %= 8;
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
	}
}
 8002052:	e024      	b.n	800209e <io_set_io_mode+0x112>
		pin %= 8;
 8002054:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <io_set_io_mode+0x11c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <io_set_io_mode+0x11c>)
 8002060:	701a      	strb	r2, [r3, #0]
		Port->CRH &= ~(0xF << PIN_MODE_MASK);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <io_set_io_mode+0x11c>)
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	210f      	movs	r1, #15
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	43d2      	mvns	r2, r2
 8002074:	401a      	ands	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	605a      	str	r2, [r3, #4]
		Port->CRH |= (mode << PIN_MODE_MASK) | (config << (PIN_MODE_MASK+2));
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	79b9      	ldrb	r1, [r7, #6]
 8002080:	4a09      	ldr	r2, [pc, #36]	@ (80020a8 <io_set_io_mode+0x11c>)
 8002082:	7812      	ldrb	r2, [r2, #0]
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4091      	lsls	r1, r2
 8002088:	7978      	ldrb	r0, [r7, #5]
 800208a:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <io_set_io_mode+0x11c>)
 800208c:	7812      	ldrb	r2, [r2, #0]
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	3202      	adds	r2, #2
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	430a      	orrs	r2, r1
 8002098:	431a      	orrs	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd90      	pop	{r4, r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000425 	.word	0x20000425

080020ac <io_set_out>:



void io_set_out(io_e io, io_out_e out)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	460a      	mov	r2, r1
 80020b6:	71fb      	strb	r3, [r7, #7]
 80020b8:	4613      	mov	r3, r2
 80020ba:	71bb      	strb	r3, [r7, #6]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff14 	bl	8001eec <io_port>
 80020c4:	4603      	mov	r3, r0
 80020c6:	029b      	lsls	r3, r3, #10
 80020c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80020cc:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80020d0:	60fb      	str	r3, [r7, #12]
	switch(out){
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <io_set_out+0x4e>
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d11d      	bne.n	8002118 <io_set_out+0x6c>
	case OUT_STATE_HIGH:
		Port->ODR &= ~(1 << io_pin_bit(io));
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff14 	bl	8001f0c <io_pin_bit>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	2301      	movs	r3, #1
 80020ea:	4093      	lsls	r3, r2
 80020ec:	43da      	mvns	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	401a      	ands	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	60da      	str	r2, [r3, #12]
		break;
 80020f8:	e00e      	b.n	8002118 <io_set_out+0x6c>
	case OUT_STATE_LOW:
		Port->ODR |= (1 << io_pin_bit(io));
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff05 	bl	8001f0c <io_pin_bit>
 8002102:	4603      	mov	r3, r0
 8002104:	461a      	mov	r2, r3
 8002106:	2301      	movs	r3, #1
 8002108:	fa03 f202 	lsl.w	r2, r3, r2
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	431a      	orrs	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	60da      	str	r2, [r3, #12]
		break;
 8002116:	bf00      	nop
	}
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <io_toggle>:

void io_toggle(io_e io)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
	gpio_regdef_t *Port = (gpio_regdef_t*)(GPIO_BASEADDR + ( io_port(io) *0x400));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fedd 	bl	8001eec <io_port>
 8002132:	4603      	mov	r3, r0
 8002134:	029b      	lsls	r3, r3, #10
 8002136:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800213a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800213e:	60fb      	str	r3, [r7, #12]
	Port->ODR ^= (1 << 13);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f483 5200 	eor.w	r2, r3, #8192	@ 0x2000
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	60da      	str	r2, [r3, #12]
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <EXTI4_IRQHandler>:
	return (Port->IDR & (1 << io_pin_bit(io)));
}


void EXTI4_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 4))
 8002158:	4b10      	ldr	r3, [pc, #64]	@ (800219c <EXTI4_IRQHandler+0x48>)
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d018      	beq.n	8002196 <EXTI4_IRQHandler+0x42>
	{
		EXTI->PR |= (1 << 4);
 8002164:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <EXTI4_IRQHandler+0x48>)
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	4a0c      	ldr	r2, [pc, #48]	@ (800219c <EXTI4_IRQHandler+0x48>)
 800216a:	f043 0310 	orr.w	r3, r3, #16
 800216e:	6153      	str	r3, [r2, #20]
		if (!flag_led_on)
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <EXTI4_IRQHandler+0x4c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d107      	bne.n	8002188 <EXTI4_IRQHandler+0x34>
		{
			LED_ON();
 8002178:	2100      	movs	r1, #0
 800217a:	202d      	movs	r0, #45	@ 0x2d
 800217c:	f7ff ff96 	bl	80020ac <io_set_out>
			flag_led_on = 1;
 8002180:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <EXTI4_IRQHandler+0x4c>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
		{
			LED_OFF();
			flag_led_on = 0;
		}
	}
}
 8002186:	e006      	b.n	8002196 <EXTI4_IRQHandler+0x42>
			LED_OFF();
 8002188:	2101      	movs	r1, #1
 800218a:	202d      	movs	r0, #45	@ 0x2d
 800218c:	f7ff ff8e 	bl	80020ac <io_set_out>
			flag_led_on = 0;
 8002190:	4b03      	ldr	r3, [pc, #12]	@ (80021a0 <EXTI4_IRQHandler+0x4c>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40010400 	.word	0x40010400
 80021a0:	20000424 	.word	0x20000424

080021a4 <nvic_en_irq>:
uint16_t counter_adc_sampling;
uint16_t counter_data_transmit;
uint16_t counter_led_toggle;
uint32_t count_systick;
void nvic_en_irq(irqn_type irqn)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
	uint8_t register_position = irqn / 32;
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	73fb      	strb	r3, [r7, #15]
	uint8_t irq_position = irqn % 32;
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	73bb      	strb	r3, [r7, #14]
	NVIC->ISER[register_position] = (1 << irq_position);
 80021bc:	7bbb      	ldrb	r3, [r7, #14]
 80021be:	2201      	movs	r2, #1
 80021c0:	fa02 f103 	lsl.w	r1, r2, r3
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <nvic_en_irq+0x34>)
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <systick_init>:

void systick_init(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
	// Reload Value
	SYSTICK->RVR = 7999; //for 1 ms @ 8 Mhz
 80021e0:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <systick_init+0x28>)
 80021e2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80021e6:	605a      	str	r2, [r3, #4]
	// Clear the current count
	SYSTICK->CVR = 0;
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <systick_init+0x28>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]

	// Clock Selection
	SYSTICK->CSR |= (1 << 2) | (1 << 1) | ((1 << 0)); //AHB selected
 80021ee:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <systick_init+0x28>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a04      	ldr	r2, [pc, #16]	@ (8002204 <systick_init+0x28>)
 80021f4:	f043 0307 	orr.w	r3, r3, #7
 80021f8:	6013      	str	r3, [r2, #0]

}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
	counter_adc_sampling++;
 800220c:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <SysTick_Handler+0x3c>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <SysTick_Handler+0x3c>)
 8002216:	801a      	strh	r2, [r3, #0]
	counter_data_transmit++;
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <SysTick_Handler+0x40>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <SysTick_Handler+0x40>)
 8002222:	801a      	strh	r2, [r3, #0]
	counter_led_toggle++;
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <SysTick_Handler+0x44>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	4b07      	ldr	r3, [pc, #28]	@ (800224c <SysTick_Handler+0x44>)
 800222e:	801a      	strh	r2, [r3, #0]
	count_systick++;
 8002230:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <SysTick_Handler+0x48>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	4a06      	ldr	r2, [pc, #24]	@ (8002250 <SysTick_Handler+0x48>)
 8002238:	6013      	str	r3, [r2, #0]
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000426 	.word	0x20000426
 8002248:	20000428 	.word	0x20000428
 800224c:	2000042a 	.word	0x2000042a
 8002250:	2000042c 	.word	0x2000042c

08002254 <uart_x_configure_parameter>:
uint16_t logic_counter5 = 0;

static uart_callback_t callback_rx_data = 0;

void uart_x_configure_parameter(usart_handle *p_usart_handle)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	p_usart_handle->add_of_usartx = USART2;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a0e      	ldr	r2, [pc, #56]	@ (8002298 <uart_x_configure_parameter+0x44>)
 8002260:	601a      	str	r2, [r3, #0]
	//USART2Handle.Usart_Configuration.Mode = USART_MODE_TXRX;
	p_usart_handle->usart_configuration.no_of_stop_bits = USART_STOPBITS_1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	715a      	strb	r2, [r3, #5]
	p_usart_handle->usart_configuration.data_word_length = USART_WORDLEN_8BITS;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	711a      	strb	r2, [r3, #4]
	p_usart_handle->usart_configuration.baudrate = USART_STD_BAUD_9600;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002274:	609a      	str	r2, [r3, #8]
	p_usart_handle->usart_configuration.parity_control = USART_PARITY_DISABLE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
	//p_usart_handle->usart_configuration.dma_transmitter_en = USARTx_DMA_TRANSMITTER_EN;
	//p_usart_handle->usart_configuration.dma_receiver_en = USARTx_DMA_RECEIVER_EN;
	p_usart_handle->tx_buffer = &(tx_buffer_data[0]);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a07      	ldr	r2, [pc, #28]	@ (800229c <uart_x_configure_parameter+0x48>)
 8002280:	615a      	str	r2, [r3, #20]
	p_usart_handle->rx_buffer = &(rx_buffer_data[0]);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a06      	ldr	r2, [pc, #24]	@ (80022a0 <uart_x_configure_parameter+0x4c>)
 8002286:	619a      	str	r2, [r3, #24]
	p_usart_handle->rx_len = 8;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2208      	movs	r2, #8
 800228c:	775a      	strb	r2, [r3, #29]

}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	40004400 	.word	0x40004400
 800229c:	20000430 	.word	0x20000430
 80022a0:	20000480 	.word	0x20000480

080022a4 <usart_init>:

void usart_init(usart_handle *p_usart_handle)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	config_stop_bit(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.no_of_stop_bits);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	795b      	ldrb	r3, [r3, #5]
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f000 f909 	bl	80024ce <config_stop_bit>

	config_data_word_len(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.data_word_length);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	791b      	ldrb	r3, [r3, #4]
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f000 f919 	bl	80024fe <config_data_word_len>

	config_parity(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.parity_control);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f000 f922 	bl	8002522 <config_parity>

	//config_mode(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.mode);

	usart_set_baudrate(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.baudrate);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4619      	mov	r1, r3
 80022e8:	4610      	mov	r0, r2
 80022ea:	f000 f81f 	bl	800232c <usart_set_baudrate>

	usart_dma_mode_en_di(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.dma_transmitter_en);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7c1b      	ldrb	r3, [r3, #16]
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f000 faf7 	bl	80028ec <usart_dma_mode_en_di>

	usart_dma_mode_en_di(p_usart_handle->add_of_usartx,p_usart_handle->usart_configuration.dma_receiver_en);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7c5b      	ldrb	r3, [r3, #17]
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f000 faef 	bl	80028ec <usart_dma_mode_en_di>

	usart_en(p_usart_handle->add_of_usartx);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f8cc 	bl	80024b0 <usart_en>

	//usart_read_interrupt(p_usart_handle->add_of_usartx);

	usart_rx_en(p_usart_handle->add_of_usartx);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fac6 	bl	80028ae <usart_rx_en>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <usart_set_baudrate>:

void usart_set_baudrate(usartx_regdef_t *p_usartx,uint32_t baudrate)
{
 800232c:	b5b0      	push	{r4, r5, r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
	 * USARTDIV is an unsigned fixed point number that is coded on the USART_BRR register.
	 */
	float temp,fraction;
	uint32_t mantissa;
	// TO DO: ADD CONDITION FOR CHECKING WHICH UART IT IS BEFORE GETTING THE CLOCK OF THE PERIPHERAL.
	uint32_t pclk = apb_get_clock(APB1); // It gets the Clock source for mentioned APB.
 8002336:	2001      	movs	r0, #1
 8002338:	f7ff fd0c 	bl	8001d54 <apb_get_clock>
 800233c:	6178      	str	r0, [r7, #20]
	uint32_t div_fraction;
	temp = pclk / (16.0 * baudrate);
 800233e:	6978      	ldr	r0, [r7, #20]
 8002340:	f7fe f914 	bl	800056c <__aeabi_ui2d>
 8002344:	4604      	mov	r4, r0
 8002346:	460d      	mov	r5, r1
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f7fe f90f 	bl	800056c <__aeabi_ui2d>
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	4b26      	ldr	r3, [pc, #152]	@ (80023ec <usart_set_baudrate+0xc0>)
 8002354:	f7fe f984 	bl	8000660 <__aeabi_dmul>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4620      	mov	r0, r4
 800235e:	4629      	mov	r1, r5
 8002360:	f7fe faa8 	bl	80008b4 <__aeabi_ddiv>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fc50 	bl	8000c10 <__aeabi_d2f>
 8002370:	4603      	mov	r3, r0
 8002372:	613b      	str	r3, [r7, #16]
	fraction = temp - (int)temp;
 8002374:	6938      	ldr	r0, [r7, #16]
 8002376:	f7fe fe1f 	bl	8000fb8 <__aeabi_f2iz>
 800237a:	4603      	mov	r3, r0
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fd51 	bl	8000e24 <__aeabi_i2f>
 8002382:	4603      	mov	r3, r0
 8002384:	4619      	mov	r1, r3
 8002386:	6938      	ldr	r0, [r7, #16]
 8002388:	f7fe fc96 	bl	8000cb8 <__aeabi_fsub>
 800238c:	4603      	mov	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]
	mantissa = temp - fraction;
 8002390:	68f9      	ldr	r1, [r7, #12]
 8002392:	6938      	ldr	r0, [r7, #16]
 8002394:	f7fe fc90 	bl	8000cb8 <__aeabi_fsub>
 8002398:	4603      	mov	r3, r0
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fe32 	bl	8001004 <__aeabi_f2uiz>
 80023a0:	4603      	mov	r3, r0
 80023a2:	61fb      	str	r3, [r7, #28]

	div_fraction = round_off((16 * fraction)); // Function to round off the decimal number
 80023a4:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7fd fee9 	bl	8000180 <__aeabi_fmul>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 faf3 	bl	800299c <round_off>
 80023b6:	61b8      	str	r0, [r7, #24]
	if (div_fraction > 15)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	d904      	bls.n	80023c8 <usart_set_baudrate+0x9c>
	{
		div_fraction = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
		mantissa += 1;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3301      	adds	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
	}
	p_usartx->BRR |= (mantissa << 4);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	609a      	str	r2, [r3, #8]
	p_usartx->BRR |= div_fraction;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	609a      	str	r2, [r3, #8]
}
 80023e2:	bf00      	nop
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40300000 	.word	0x40300000

080023f0 <usart_write_polling>:
{
	usart_2_handle.tx_buffer = (uint8_t*)&num;
	usart_write_polling(&usart_2_handle);
}
void usart_write_polling(usart_handle *p_usart_handle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

	//p_usart_handle->tx_buffer = tx_buffer_data;
	usart_tx_en(p_usart_handle->add_of_usartx);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fa47 	bl	8002890 <usart_tx_en>
	while (*p_usart_handle->tx_buffer != '\0')
 8002402:	e03d      	b.n	8002480 <usart_write_polling+0x90>
	{
		// 8 bit data len
		// 9 bit data len
		while ( get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 0);
 8002404:	bf00      	nop
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2180      	movs	r1, #128	@ 0x80
 800240c:	4618      	mov	r0, r3
 800240e:	f000 f8a6 	bl	800255e <get_flag_status>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f6      	beq.n	8002406 <usart_write_polling+0x16>

		if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	791b      	ldrb	r3, [r3, #4]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d120      	bne.n	8002462 <usart_write_polling+0x72>
		{
			// IF Parity DISABLED
			if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d110      	bne.n	800244a <usart_write_polling+0x5a>
			{
				//*pData = buffer;
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer & (uint16_t)0x1FF);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	615a      	str	r2, [r3, #20]
				p_usart_handle->tx_buffer++;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	615a      	str	r2, [r3, #20]
 8002448:	e01a      	b.n	8002480 <usart_write_polling+0x90>
			}
			// IF Parity ENABLED
			else
			{
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer & (uint8_t)0xFF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	615a      	str	r2, [r3, #20]
 8002460:	e00e      	b.n	8002480 <usart_write_polling+0x90>
			}
		}
		else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	791b      	ldrb	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <usart_write_polling+0x90>
		{
			//p_usart_handle->add_of_usartx->DR = (*buffer & (uint8_t)0xFF);
			//temp_chara = (*buffer);
			// printable character anyhoe is 7-bits, So it doesnt matter if we handle the parity control.
			p_usart_handle->add_of_usartx->DR = *p_usart_handle->tx_buffer;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	781a      	ldrb	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
			p_usart_handle->tx_buffer++;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	615a      	str	r2, [r3, #20]
	while (*p_usart_handle->tx_buffer != '\0')
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1bc      	bne.n	8002404 <usart_write_polling+0x14>



	}
	// Wait till TC Got completed
	while (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) != 1);
 800248a:	bf00      	nop
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2140      	movs	r1, #64	@ 0x40
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f863 	bl	800255e <get_flag_status>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d1f6      	bne.n	800248c <usart_write_polling+0x9c>
	usart_tx_di(p_usart_handle->add_of_usartx);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fa12 	bl	80028cc <usart_tx_di>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <usart_en>:
		}
	}
}

void usart_en(usartx_regdef_t* p_usartx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_EN);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	60da      	str	r2, [r3, #12]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <config_stop_bit>:

void config_stop_bit(usartx_regdef_t* p_usartx, uint8_t stop_bits)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR2 &=  ~(STOP_BIT_MASK());
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]
	p_usartx->CR2 |=  (stop_bits << USART_CR2_STOP_BIT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	031b      	lsls	r3, r3, #12
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	611a      	str	r2, [r3, #16]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <config_data_word_len>:

void config_data_word_len(usartx_regdef_t* p_usartx, uint8_t data_word_len)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	70fb      	strb	r3, [r7, #3]
	p_usartx->CR1 |= (data_word_len << USART_CR1_DATA_WORD_LEN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	031b      	lsls	r3, r3, #12
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	60da      	str	r2, [r3, #12]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <config_parity>:

void config_parity(usartx_regdef_t* p_usartx, uint8_t parity_type)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	70fb      	strb	r3, [r7, #3]
	if (parity_type == USART_PARITY_EN_EVEN)
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <config_parity+0x20>
	{
		p_usartx->CR1 |= (1 << USART_CR1_PARITY_CONTROL_EN); // Enabled the Parity Control, Even Parity Bydefault Selected.
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	60da      	str	r2, [r3, #12]
	}
	else if(parity_type == USART_PARITY_EN_ODD)
	{
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
	}
}
 8002540:	e008      	b.n	8002554 <config_parity+0x32>
	else if(parity_type == USART_PARITY_EN_ODD)
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d105      	bne.n	8002554 <config_parity+0x32>
		p_usartx->CR1 |= ( (1 << USART_CR1_PARITY_CONTROL_EN) | (1 << USART_CR1_PARITY_SELECT) );
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f443 62c0 	orr.w	r2, r3, #1536	@ 0x600
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	60da      	str	r2, [r3, #12]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <get_flag_status>:
		p_usartx->CR1 |= ( (1 << USART_CR1_TX_EN) | (1 << USART_CR1_RX_EN) );
	}
}

uint8_t get_flag_status(usartx_regdef_t *p_usartx, uint8_t flag)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	70fb      	strb	r3, [r7, #3]
	if (p_usartx->SR & flag)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <get_flag_status+0x1c>
	{
		return 1;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <get_flag_status+0x1e>
	}
	else
	{
		return 0;
 800257a:	2300      	movs	r3, #0
	}
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
	...

08002588 <register_uart_callback>:
	nvic_en_irq(USART2_Global_IRQn);

}

void register_uart_callback(uart_callback_t callback)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	callback_rx_data = callback;
 8002590:	4a03      	ldr	r2, [pc, #12]	@ (80025a0 <register_uart_callback+0x18>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	200005ac 	.word	0x200005ac

080025a4 <usart_interrupt_handling>:

void usart_interrupt_handling(usart_handle *p_usart_handle)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TC) == 1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2140      	movs	r1, #64	@ 0x40
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ffd3 	bl	800255e <get_flag_status>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d128      	bne.n	8002610 <usart_interrupt_handling+0x6c>
	{
		tc_buffer[tc_buffer_index++] = *(p_usart_handle->tx_buffer);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	4b8b      	ldr	r3, [pc, #556]	@ (80027f0 <usart_interrupt_handling+0x24c>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	1c59      	adds	r1, r3, #1
 80025c8:	b2c8      	uxtb	r0, r1
 80025ca:	4989      	ldr	r1, [pc, #548]	@ (80027f0 <usart_interrupt_handling+0x24c>)
 80025cc:	7008      	strb	r0, [r1, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	7812      	ldrb	r2, [r2, #0]
 80025d2:	4b88      	ldr	r3, [pc, #544]	@ (80027f4 <usart_interrupt_handling+0x250>)
 80025d4:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) == '\0')
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d117      	bne.n	8002610 <usart_interrupt_handling+0x6c>
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025ee:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TC_INTERRUPT_EN);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025fe:	60da      	str	r2, [r3, #12]
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0208 	bic.w	r2, r2, #8
 800260e:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_TXE) == 1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2180      	movs	r1, #128	@ 0x80
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ffa1 	bl	800255e <get_flag_status>
 800261c:	4603      	mov	r3, r0
 800261e:	2b01      	cmp	r3, #1
 8002620:	d158      	bne.n	80026d4 <usart_interrupt_handling+0x130>
	{
		txe_counter++;
 8002622:	4b75      	ldr	r3, [pc, #468]	@ (80027f8 <usart_interrupt_handling+0x254>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	3301      	adds	r3, #1
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b73      	ldr	r3, [pc, #460]	@ (80027f8 <usart_interrupt_handling+0x254>)
 800262c:	701a      	strb	r2, [r3, #0]
		txe_buffer[txe_buffer_index++] = *(p_usart_handle->tx_buffer);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	4b72      	ldr	r3, [pc, #456]	@ (80027fc <usart_interrupt_handling+0x258>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	1c59      	adds	r1, r3, #1
 8002638:	b2c8      	uxtb	r0, r1
 800263a:	4970      	ldr	r1, [pc, #448]	@ (80027fc <usart_interrupt_handling+0x258>)
 800263c:	7008      	strb	r0, [r1, #0]
 800263e:	4619      	mov	r1, r3
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	4b6f      	ldr	r3, [pc, #444]	@ (8002800 <usart_interrupt_handling+0x25c>)
 8002644:	545a      	strb	r2, [r3, r1]
		if (*(p_usart_handle->tx_buffer) != '\0')
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d039      	beq.n	80026c4 <usart_interrupt_handling+0x120>
		{
			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	791b      	ldrb	r3, [r3, #4]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d125      	bne.n	80026a4 <usart_interrupt_handling+0x100>
			{
				// IF Parity DISABLED
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d115      	bne.n	800268c <usart_interrupt_handling+0xe8>
				{
					uint16_t *p_data = (uint16_t*)p_usart_handle->tx_buffer;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	60fb      	str	r3, [r7, #12]
					p_usart_handle->add_of_usartx->DR = (*(p_data) & (uint16_t)0x1FF);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002674:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	615a      	str	r2, [r3, #20]
					p_usart_handle->tx_buffer++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	615a      	str	r2, [r3, #20]
 800268a:	e023      	b.n	80026d4 <usart_interrupt_handling+0x130>
				}
				// IF Parity ENABLED
				else
				{
					p_usart_handle->add_of_usartx->DR = (*(p_usart_handle->tx_buffer) & (uint8_t)0xFF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
					p_usart_handle->tx_buffer++;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	615a      	str	r2, [r3, #20]
 80026a2:	e017      	b.n	80026d4 <usart_interrupt_handling+0x130>
				}
			}
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	791b      	ldrb	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d113      	bne.n	80026d4 <usart_interrupt_handling+0x130>
			{
				p_usart_handle->add_of_usartx->DR = (*p_usart_handle->tx_buffer);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
				p_usart_handle->tx_buffer++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	615a      	str	r2, [r3, #20]
 80026c2:	e007      	b.n	80026d4 <usart_interrupt_handling+0x130>
			}
		}
		else
		{
			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_TXE_INTEERUPT_EN);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026d2:	60da      	str	r2, [r3, #12]
		}
	}
	if (get_flag_status(p_usart_handle->add_of_usartx,USART_FLAG_RXNE) == 1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2120      	movs	r1, #32
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff3f 	bl	800255e <get_flag_status>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	f040 80cb 	bne.w	800287e <usart_interrupt_handling+0x2da>
	{
		count_interrupt_enterred = count_interrupt_enterred + 1;
 80026e8:	4b46      	ldr	r3, [pc, #280]	@ (8002804 <usart_interrupt_handling+0x260>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b44      	ldr	r3, [pc, #272]	@ (8002804 <usart_interrupt_handling+0x260>)
 80026f2:	801a      	strh	r2, [r3, #0]
		if ((p_usart_handle->add_of_usartx->SR >> 3) & 0x01)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <usart_interrupt_handling+0x16a>
		{
			count_ovr = count_ovr + 1;
 8002702:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <usart_interrupt_handling+0x264>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	3301      	adds	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	4b3f      	ldr	r3, [pc, #252]	@ (8002808 <usart_interrupt_handling+0x264>)
 800270c:	801a      	strh	r2, [r3, #0]
		}
		if (p_usart_handle->rx_len > 0)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7f5b      	ldrb	r3, [r3, #29]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80b3 	beq.w	800287e <usart_interrupt_handling+0x2da>
		{
			if (p_usart_handle->rx_len == 5)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7f5b      	ldrb	r3, [r3, #29]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d106      	bne.n	800272e <usart_interrupt_handling+0x18a>
			{
				arr_length[5] = arr_length[5] + 1;
 8002720:	4b3a      	ldr	r3, [pc, #232]	@ (800280c <usart_interrupt_handling+0x268>)
 8002722:	895b      	ldrh	r3, [r3, #10]
 8002724:	3301      	adds	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	4b38      	ldr	r3, [pc, #224]	@ (800280c <usart_interrupt_handling+0x268>)
 800272a:	815a      	strh	r2, [r3, #10]
 800272c:	e035      	b.n	800279a <usart_interrupt_handling+0x1f6>
			}
			else if (p_usart_handle->rx_len == 4)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7f5b      	ldrb	r3, [r3, #29]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d106      	bne.n	8002744 <usart_interrupt_handling+0x1a0>
			{
				arr_length[4] = arr_length[4] + 1;
 8002736:	4b35      	ldr	r3, [pc, #212]	@ (800280c <usart_interrupt_handling+0x268>)
 8002738:	891b      	ldrh	r3, [r3, #8]
 800273a:	3301      	adds	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	4b33      	ldr	r3, [pc, #204]	@ (800280c <usart_interrupt_handling+0x268>)
 8002740:	811a      	strh	r2, [r3, #8]
 8002742:	e02a      	b.n	800279a <usart_interrupt_handling+0x1f6>
			}
			else if (p_usart_handle->rx_len == 3)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7f5b      	ldrb	r3, [r3, #29]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d106      	bne.n	800275a <usart_interrupt_handling+0x1b6>
			{
				arr_length[3] = arr_length[3] + 1;
 800274c:	4b2f      	ldr	r3, [pc, #188]	@ (800280c <usart_interrupt_handling+0x268>)
 800274e:	88db      	ldrh	r3, [r3, #6]
 8002750:	3301      	adds	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b2d      	ldr	r3, [pc, #180]	@ (800280c <usart_interrupt_handling+0x268>)
 8002756:	80da      	strh	r2, [r3, #6]
 8002758:	e01f      	b.n	800279a <usart_interrupt_handling+0x1f6>
			}
			else if (p_usart_handle->rx_len == 2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7f5b      	ldrb	r3, [r3, #29]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d106      	bne.n	8002770 <usart_interrupt_handling+0x1cc>
			{
				arr_length[2] = arr_length[2] + 1;
 8002762:	4b2a      	ldr	r3, [pc, #168]	@ (800280c <usart_interrupt_handling+0x268>)
 8002764:	889b      	ldrh	r3, [r3, #4]
 8002766:	3301      	adds	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	4b28      	ldr	r3, [pc, #160]	@ (800280c <usart_interrupt_handling+0x268>)
 800276c:	809a      	strh	r2, [r3, #4]
 800276e:	e014      	b.n	800279a <usart_interrupt_handling+0x1f6>
			}
			else if (p_usart_handle->rx_len == 1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7f5b      	ldrb	r3, [r3, #29]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <usart_interrupt_handling+0x1e2>
			{
				arr_length[1] = arr_length[1] + 1;
 8002778:	4b24      	ldr	r3, [pc, #144]	@ (800280c <usart_interrupt_handling+0x268>)
 800277a:	885b      	ldrh	r3, [r3, #2]
 800277c:	3301      	adds	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b22      	ldr	r3, [pc, #136]	@ (800280c <usart_interrupt_handling+0x268>)
 8002782:	805a      	strh	r2, [r3, #2]
 8002784:	e009      	b.n	800279a <usart_interrupt_handling+0x1f6>
			}
			else if (p_usart_handle->rx_len == 0)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7f5b      	ldrb	r3, [r3, #29]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d105      	bne.n	800279a <usart_interrupt_handling+0x1f6>
			{
				arr_length[0] = arr_length[0] + 1;
 800278e:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <usart_interrupt_handling+0x268>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	4b1d      	ldr	r3, [pc, #116]	@ (800280c <usart_interrupt_handling+0x268>)
 8002798:	801a      	strh	r2, [r3, #0]
			}
			if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_9BITS)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	791b      	ldrb	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d136      	bne.n	8002810 <usart_interrupt_handling+0x26c>
			{
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d114      	bne.n	80027d4 <usart_interrupt_handling+0x230>
				{
					//*((uint16_t*)(p_usart_handle->rx_buffer)) = ((uint16_t*)(p_usart_handle->add_of_usartx->DR & 0x1FF));
					*((uint16_t*)(p_usart_handle->rx_buffer)) = (p_usart_handle->add_of_usartx->DR & 0x1FF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ba:	b292      	uxth	r2, r2
 80027bc:	801a      	strh	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_buffer++;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
 80027d2:	e044      	b.n	800285e <usart_interrupt_handling+0x2ba>
				}
				else
				{
					//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	619a      	str	r2, [r3, #24]
 80027ec:	e037      	b.n	800285e <usart_interrupt_handling+0x2ba>
 80027ee:	bf00      	nop
 80027f0:	20000520 	.word	0x20000520
 80027f4:	200004d0 	.word	0x200004d0
 80027f8:	200005aa 	.word	0x200005aa
 80027fc:	20000574 	.word	0x20000574
 8002800:	20000524 	.word	0x20000524
 8002804:	20000598 	.word	0x20000598
 8002808:	200005a8 	.word	0x200005a8
 800280c:	2000059c 	.word	0x2000059c
				}
			}
			else if (p_usart_handle->usart_configuration.data_word_length == USART_WORDLEN_8BITS)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d122      	bne.n	800285e <usart_interrupt_handling+0x2ba>
			{
				if (p_usart_handle->usart_configuration.parity_control == USART_PARITY_DISABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d112      	bne.n	8002846 <usart_interrupt_handling+0x2a2>
				{
					//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
					p_usart_handle->rx_len--;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7f5b      	ldrb	r3, [r3, #29]
 800283c:	3b01      	subs	r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	775a      	strb	r2, [r3, #29]
 8002844:	e00b      	b.n	800285e <usart_interrupt_handling+0x2ba>
				}
				else
				{
					//*(p_usart_handle->rx_buffer) = ((uint8_t*)(p_usart_handle->add_of_usartx->DR & 0xFF));
					*(p_usart_handle->rx_buffer) = (p_usart_handle->add_of_usartx->DR & 0xFF);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]
					p_usart_handle->rx_buffer++;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	619a      	str	r2, [r3, #24]
				}
			}

			if (p_usart_handle->rx_len == 0)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7f5b      	ldrb	r3, [r3, #29]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10b      	bne.n	800287e <usart_interrupt_handling+0x2da>
			{
				p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0220 	bic.w	r2, r2, #32
 8002874:	60da      	str	r2, [r3, #12]
				callback_rx_data(rx_buffer_data);
 8002876:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <usart_interrupt_handling+0x2e4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4804      	ldr	r0, [pc, #16]	@ (800288c <usart_interrupt_handling+0x2e8>)
 800287c:	4798      	blx	r3
//		{
//			p_usart_handle->add_of_usartx->CR1 &= ~(1 << USART_CR1_RXNE_INTERRUPT_EN);
//			callback_rx_data(rx_buffer_data);
//		}
	}
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200005ac 	.word	0x200005ac
 800288c:	20000480 	.word	0x20000480

08002890 <usart_tx_en>:

void usart_tx_en(usartx_regdef_t *p_usartx)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_TX_EN);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f043 0208 	orr.w	r2, r3, #8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <usart_rx_en>:

void usart_rx_en(usartx_regdef_t *p_usartx)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 |= (1 << USART_CR1_RX_EN);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60da      	str	r2, [r3, #12]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <usart_tx_di>:

void usart_tx_di(usartx_regdef_t *p_usartx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	p_usartx->CR1 &= ~(1 << USART_CR1_TX_EN);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f023 0208 	bic.w	r2, r3, #8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	60da      	str	r2, [r3, #12]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
	...

080028ec <usart_dma_mode_en_di>:
{
	p_usartx->CR1 &= ~(1 << USART_CR1_RX_EN);
}

void usart_dma_mode_en_di(usartx_regdef_t *p_usartx,uint8_t en_di)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	70fb      	strb	r3, [r7, #3]
	switch(en_di){
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d826      	bhi.n	800294c <usart_dma_mode_en_di+0x60>
 80028fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002904 <usart_dma_mode_en_di+0x18>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002915 	.word	0x08002915
 8002908:	08002923 	.word	0x08002923
 800290c:	08002931 	.word	0x08002931
 8002910:	0800293f 	.word	0x0800293f
	case USARTx_DMA_TRANSMITTER_EN:
		p_usartx->CR3 |= USARTx_DMA_TRANSMITTER_EN_POS;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	615a      	str	r2, [r3, #20]
		break;
 8002920:	e014      	b.n	800294c <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_TRANSMITTER_DI:
		p_usartx->CR3 &= USARTx_DMA_TRANSMITTER_DI_POS;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	615a      	str	r2, [r3, #20]
		break;
 800292e:	e00d      	b.n	800294c <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_RECEIVER_EN:
		p_usartx->CR3 |= USARTx_DMA_RECEIVER_EN_POS;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	615a      	str	r2, [r3, #20]
		break;
 800293c:	e006      	b.n	800294c <usart_dma_mode_en_di+0x60>
	case USARTx_DMA_RECEIVER_DI:
		p_usartx->CR3 &= USARTx_DMA_RECEIVER_DI_POS;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	615a      	str	r2, [r3, #20]
		break;
 800294a:	bf00      	nop
	}
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop

08002958 <USART2_IRQHandler>:
	dma_channel_en(DMA1,7,1);


}
void USART2_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	usart_interrupt_handling(&usart_2_handle);
 800295c:	4802      	ldr	r0, [pc, #8]	@ (8002968 <USART2_IRQHandler+0x10>)
 800295e:	f7ff fe21 	bl	80025a4 <usart_interrupt_handling>
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000578 	.word	0x20000578

0800296c <mcu_init>:
 *      Author: Prashant Ajabe
 */
#include "common.h"

void mcu_init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	clock_init();
 8002970:	f7ff f8a2 	bl	8001ab8 <clock_init>
	//SCB->VTOR = 0x08004000;
	io_init();
 8002974:	f7ff fad8 	bl	8001f28 <io_init>

	uart_x_configure_parameter(&usart_2_handle);
 8002978:	4806      	ldr	r0, [pc, #24]	@ (8002994 <mcu_init+0x28>)
 800297a:	f7ff fc6b 	bl	8002254 <uart_x_configure_parameter>
	usart_init(&usart_2_handle);
 800297e:	4805      	ldr	r0, [pc, #20]	@ (8002994 <mcu_init+0x28>)
 8002980:	f7ff fc90 	bl	80022a4 <usart_init>

	hal_can_init(&can_configuration);
 8002984:	4804      	ldr	r0, [pc, #16]	@ (8002998 <mcu_init+0x2c>)
 8002986:	f7fe fcc1 	bl	800130c <hal_can_init>

	systick_init();
 800298a:	f7ff fc27 	bl	80021dc <systick_init>

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000578 	.word	0x20000578
 8002998:	200002bc 	.word	0x200002bc

0800299c <round_off>:

uint32_t round_off(float number)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	float fraction;
	uint8_t carry;
	uint32_t realPart = (int)number;
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7fe fb07 	bl	8000fb8 <__aeabi_f2iz>
 80029aa:	4603      	mov	r3, r0
 80029ac:	613b      	str	r3, [r7, #16]
	fraction = number - (int)number;
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fb02 	bl	8000fb8 <__aeabi_f2iz>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fa34 	bl	8000e24 <__aeabi_i2f>
 80029bc:	4603      	mov	r3, r0
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fe f979 	bl	8000cb8 <__aeabi_fsub>
 80029c6:	4603      	mov	r3, r0
 80029c8:	60fb      	str	r3, [r7, #12]
	if (fraction < 0.50)
 80029ca:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7fe faca 	bl	8000f68 <__aeabi_fcmplt>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <round_off+0x44>
	{
		carry = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]
 80029de:	e009      	b.n	80029f4 <round_off+0x58>
	}
	else if (fraction >= 0.50)
 80029e0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7fe fad3 	bl	8000f90 <__aeabi_fcmpge>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <round_off+0x58>
	{
		carry = 1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	75fb      	strb	r3, [r7, #23]
	}

	return (realPart + (uint32_t)carry);
 80029f4:	7dfa      	ldrb	r2, [r7, #23]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <print_msg>:


void print_msg(char* format,...)
{
 8002a04:	b40f      	push	{r0, r1, r2, r3}
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b096      	sub	sp, #88	@ 0x58
 8002a0a:	af00      	add	r7, sp, #0
	char str[80];
	va_list args;
	va_start(args,format);
 8002a0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a10:	607b      	str	r3, [r7, #4]
	vsprintf(str,format,args);
 8002a12:	f107 0308 	add.w	r3, r7, #8
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fef6 	bl	800380c <vsiprintf>
	usart_2_handle.tx_buffer = &(str);
 8002a20:	4a06      	ldr	r2, [pc, #24]	@ (8002a3c <print_msg+0x38>)
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	6153      	str	r3, [r2, #20]
	usart_write_polling(&usart_2_handle);
 8002a28:	4804      	ldr	r0, [pc, #16]	@ (8002a3c <print_msg+0x38>)
 8002a2a:	f7ff fce1 	bl	80023f0 <usart_write_polling>
}
 8002a2e:	bf00      	nop
 8002a30:	3758      	adds	r7, #88	@ 0x58
 8002a32:	46bd      	mov	sp, r7
 8002a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a38:	b004      	add	sp, #16
 8002a3a:	4770      	bx	lr
 8002a3c:	20000578 	.word	0x20000578

08002a40 <app_rx0_handler>:
 */

#include "app.h"

void app_rx0_handler(const can_rx_frame_t* msg)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	print_msg("ID:0x%x \r\n",msg->id);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4813      	ldr	r0, [pc, #76]	@ (8002a9c <app_rx0_handler+0x5c>)
 8002a50:	f7ff ffd8 	bl	8002a04 <print_msg>

	print_msg("INDEX:0x%x \r\n",msg->filter_match_index);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	795b      	ldrb	r3, [r3, #5]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4811      	ldr	r0, [pc, #68]	@ (8002aa0 <app_rx0_handler+0x60>)
 8002a5c:	f7ff ffd2 	bl	8002a04 <print_msg>

	print_msg("Data: ");
 8002a60:	4810      	ldr	r0, [pc, #64]	@ (8002aa4 <app_rx0_handler+0x64>)
 8002a62:	f7ff ffcf 	bl	8002a04 <print_msg>
	for(uint8_t i = 0; i < msg->length;i++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	e00a      	b.n	8002a82 <app_rx0_handler+0x42>
	{
		print_msg("%c",msg->data_8[i]);
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	7b1b      	ldrb	r3, [r3, #12]
 8002a74:	4619      	mov	r1, r3
 8002a76:	480c      	ldr	r0, [pc, #48]	@ (8002aa8 <app_rx0_handler+0x68>)
 8002a78:	f7ff ffc4 	bl	8002a04 <print_msg>
	for(uint8_t i = 0; i < msg->length;i++)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	791b      	ldrb	r3, [r3, #4]
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3ef      	bcc.n	8002a6c <app_rx0_handler+0x2c>
	}
	print_msg("\r\n");
 8002a8c:	4807      	ldr	r0, [pc, #28]	@ (8002aac <app_rx0_handler+0x6c>)
 8002a8e:	f7ff ffb9 	bl	8002a04 <print_msg>
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	080059e0 	.word	0x080059e0
 8002aa0:	080059ec 	.word	0x080059ec
 8002aa4:	080059fc 	.word	0x080059fc
 8002aa8:	08005a04 	.word	0x08005a04
 8002aac:	08005a08 	.word	0x08005a08

08002ab0 <app_uart_rx_handler>:


void app_uart_rx_handler(uint8_t* rx_data)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	while(*rx_data != 0)
 8002ab8:	e007      	b.n	8002aca <app_uart_rx_handler+0x1a>
	{
		print_msg("%c",*rx_data++);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4806      	ldr	r0, [pc, #24]	@ (8002ae0 <app_uart_rx_handler+0x30>)
 8002ac6:	f7ff ff9d 	bl	8002a04 <print_msg>
	while(*rx_data != 0)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f3      	bne.n	8002aba <app_uart_rx_handler+0xa>
	}
	print_msg("\r\n");
 8002ad2:	4804      	ldr	r0, [pc, #16]	@ (8002ae4 <app_uart_rx_handler+0x34>)
 8002ad4:	f7ff ff96 	bl	8002a04 <print_msg>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	08005a04 	.word	0x08005a04
 8002ae4:	08005a08 	.word	0x08005a08

08002ae8 <main>:
#define LED_TOGGLE()        io_toggle(IO_TEST_LED)



int main(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
	float temp = 100.0;
 8002aee:	4b0f      	ldr	r3, [pc, #60]	@ (8002b2c <main+0x44>)
 8002af0:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	72fb      	strb	r3, [r7, #11]
	mcu_init();
 8002af6:	f7ff ff39 	bl	800296c <mcu_init>

	uint32_t base_addr = SCB->VTOR;
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <main+0x48>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	607b      	str	r3, [r7, #4]
	print_msg("Base Addr: %x \r\n",base_addr);
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	480c      	ldr	r0, [pc, #48]	@ (8002b34 <main+0x4c>)
 8002b04:	f7ff ff7e 	bl	8002a04 <print_msg>
	register_rx0_callback(app_rx0_handler);
 8002b08:	480b      	ldr	r0, [pc, #44]	@ (8002b38 <main+0x50>)
 8002b0a:	f7fe ffa5 	bl	8001a58 <register_rx0_callback>
	register_uart_callback(app_uart_rx_handler);
 8002b0e:	480b      	ldr	r0, [pc, #44]	@ (8002b3c <main+0x54>)
 8002b10:	f7ff fd3a 	bl	8002588 <register_uart_callback>
//		for (uint8_t i = 0; i < 5;i++)
//		{
//			print_msg("received data:%d \r\n",rx_buffer_data[i]);
//		}

		if (counter_led_toggle >= 1000)
 8002b14:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <main+0x58>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b1c:	d3fa      	bcc.n	8002b14 <main+0x2c>
		{
			counter_led_toggle = 0;
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <main+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	801a      	strh	r2, [r3, #0]
			LED_TOGGLE();
 8002b24:	202d      	movs	r0, #45	@ 0x2d
 8002b26:	f7ff fafb 	bl	8002120 <io_toggle>
		if (counter_led_toggle >= 1000)
 8002b2a:	e7f3      	b.n	8002b14 <main+0x2c>
 8002b2c:	42c80000 	.word	0x42c80000
 8002b30:	e000ed00 	.word	0xe000ed00
 8002b34:	08005a0c 	.word	0x08005a0c
 8002b38:	08002a41 	.word	0x08002a41
 8002b3c:	08002ab1 	.word	0x08002ab1
 8002b40:	2000042a 	.word	0x2000042a

08002b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
	return 1;
 8002b48:	2301      	movs	r3, #1
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <_kill>:

int _kill(int pid, int sig)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b5c:	f000 feb2 	bl	80038c4 <__errno>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2216      	movs	r2, #22
 8002b64:	601a      	str	r2, [r3, #0]
	return -1;
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <_exit>:

void _exit (int status)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ffe7 	bl	8002b52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <_exit+0x12>

08002b88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e00a      	b.n	8002bb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b9a:	f3af 8000 	nop.w
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	60ba      	str	r2, [r7, #8]
 8002ba6:	b2ca      	uxtb	r2, r1
 8002ba8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dbf0      	blt.n	8002b9a <_read+0x12>
	}

return len;
 8002bb8:	687b      	ldr	r3, [r7, #4]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e009      	b.n	8002be8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	60ba      	str	r2, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3301      	adds	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	dbf1      	blt.n	8002bd4 <_write+0x12>
	}
	return len;
 8002bf0:	687b      	ldr	r3, [r7, #4]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_close>:

int _close(int file)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
	return -1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c20:	605a      	str	r2, [r3, #4]
	return 0;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <_isatty>:

int _isatty(int file)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	return 1;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
	return 0;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
	...

08002c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c64:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <_sbrk+0x5c>)
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <_sbrk+0x60>)
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c70:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <_sbrk+0x64>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c78:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <_sbrk+0x64>)
 8002c7a:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <_sbrk+0x68>)
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d207      	bcs.n	8002c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c8c:	f000 fe1a 	bl	80038c4 <__errno>
 8002c90:	4603      	mov	r3, r0
 8002c92:	220c      	movs	r2, #12
 8002c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e009      	b.n	8002cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <_sbrk+0x64>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	4a05      	ldr	r2, [pc, #20]	@ (8002cc0 <_sbrk+0x64>)
 8002cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20005000 	.word	0x20005000
 8002cbc:	00000400 	.word	0x00000400
 8002cc0:	200005b0 	.word	0x200005b0
 8002cc4:	20000700 	.word	0x20000700

08002cc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cc8:	480d      	ldr	r0, [pc, #52]	@ (8002d00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ccc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cd0:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cd2:	490d      	ldr	r1, [pc, #52]	@ (8002d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <LoopForever+0xe>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd8:	e002      	b.n	8002ce0 <LoopCopyDataInit>

08002cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cde:	3304      	adds	r3, #4

08002ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce4:	d3f9      	bcc.n	8002cda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8002d14 <LoopForever+0x16>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cec:	e001      	b.n	8002cf2 <LoopFillZerobss>

08002cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf0:	3204      	adds	r2, #4

08002cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf4:	d3fb      	bcc.n	8002cee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cf6:	f000 fdeb 	bl	80038d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cfa:	f7ff fef5 	bl	8002ae8 <main>

08002cfe <LoopForever>:

LoopForever:
    b LoopForever
 8002cfe:	e7fe      	b.n	8002cfe <LoopForever>
  ldr   r0, =_estack
 8002d00:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d08:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8002d0c:	08005da0 	.word	0x08005da0
  ldr r2, =_sbss
 8002d10:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 8002d14:	20000700 	.word	0x20000700

08002d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d18:	e7fe      	b.n	8002d18 <ADC1_2_IRQHandler>

08002d1a <__cvt>:
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d20:	461d      	mov	r5, r3
 8002d22:	bfbb      	ittet	lt
 8002d24:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002d28:	461d      	movlt	r5, r3
 8002d2a:	2300      	movge	r3, #0
 8002d2c:	232d      	movlt	r3, #45	@ 0x2d
 8002d2e:	b088      	sub	sp, #32
 8002d30:	4614      	mov	r4, r2
 8002d32:	bfb8      	it	lt
 8002d34:	4614      	movlt	r4, r2
 8002d36:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002d38:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002d3a:	7013      	strb	r3, [r2, #0]
 8002d3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002d3e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002d42:	f023 0820 	bic.w	r8, r3, #32
 8002d46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002d4a:	d005      	beq.n	8002d58 <__cvt+0x3e>
 8002d4c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002d50:	d100      	bne.n	8002d54 <__cvt+0x3a>
 8002d52:	3601      	adds	r6, #1
 8002d54:	2302      	movs	r3, #2
 8002d56:	e000      	b.n	8002d5a <__cvt+0x40>
 8002d58:	2303      	movs	r3, #3
 8002d5a:	aa07      	add	r2, sp, #28
 8002d5c:	9204      	str	r2, [sp, #16]
 8002d5e:	aa06      	add	r2, sp, #24
 8002d60:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002d64:	e9cd 3600 	strd	r3, r6, [sp]
 8002d68:	4622      	mov	r2, r4
 8002d6a:	462b      	mov	r3, r5
 8002d6c:	f000 fe70 	bl	8003a50 <_dtoa_r>
 8002d70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002d74:	4607      	mov	r7, r0
 8002d76:	d119      	bne.n	8002dac <__cvt+0x92>
 8002d78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002d7a:	07db      	lsls	r3, r3, #31
 8002d7c:	d50e      	bpl.n	8002d9c <__cvt+0x82>
 8002d7e:	eb00 0906 	add.w	r9, r0, r6
 8002d82:	2200      	movs	r2, #0
 8002d84:	2300      	movs	r3, #0
 8002d86:	4620      	mov	r0, r4
 8002d88:	4629      	mov	r1, r5
 8002d8a:	f7fd fed1 	bl	8000b30 <__aeabi_dcmpeq>
 8002d8e:	b108      	cbz	r0, 8002d94 <__cvt+0x7a>
 8002d90:	f8cd 901c 	str.w	r9, [sp, #28]
 8002d94:	2230      	movs	r2, #48	@ 0x30
 8002d96:	9b07      	ldr	r3, [sp, #28]
 8002d98:	454b      	cmp	r3, r9
 8002d9a:	d31e      	bcc.n	8002dda <__cvt+0xc0>
 8002d9c:	4638      	mov	r0, r7
 8002d9e:	9b07      	ldr	r3, [sp, #28]
 8002da0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002da2:	1bdb      	subs	r3, r3, r7
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	b008      	add	sp, #32
 8002da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002db0:	eb00 0906 	add.w	r9, r0, r6
 8002db4:	d1e5      	bne.n	8002d82 <__cvt+0x68>
 8002db6:	7803      	ldrb	r3, [r0, #0]
 8002db8:	2b30      	cmp	r3, #48	@ 0x30
 8002dba:	d10a      	bne.n	8002dd2 <__cvt+0xb8>
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	f7fd feb4 	bl	8000b30 <__aeabi_dcmpeq>
 8002dc8:	b918      	cbnz	r0, 8002dd2 <__cvt+0xb8>
 8002dca:	f1c6 0601 	rsb	r6, r6, #1
 8002dce:	f8ca 6000 	str.w	r6, [sl]
 8002dd2:	f8da 3000 	ldr.w	r3, [sl]
 8002dd6:	4499      	add	r9, r3
 8002dd8:	e7d3      	b.n	8002d82 <__cvt+0x68>
 8002dda:	1c59      	adds	r1, r3, #1
 8002ddc:	9107      	str	r1, [sp, #28]
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e7d9      	b.n	8002d96 <__cvt+0x7c>

08002de2 <__exponent>:
 8002de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002de4:	2900      	cmp	r1, #0
 8002de6:	bfb6      	itet	lt
 8002de8:	232d      	movlt	r3, #45	@ 0x2d
 8002dea:	232b      	movge	r3, #43	@ 0x2b
 8002dec:	4249      	neglt	r1, r1
 8002dee:	2909      	cmp	r1, #9
 8002df0:	7002      	strb	r2, [r0, #0]
 8002df2:	7043      	strb	r3, [r0, #1]
 8002df4:	dd29      	ble.n	8002e4a <__exponent+0x68>
 8002df6:	f10d 0307 	add.w	r3, sp, #7
 8002dfa:	461d      	mov	r5, r3
 8002dfc:	270a      	movs	r7, #10
 8002dfe:	fbb1 f6f7 	udiv	r6, r1, r7
 8002e02:	461a      	mov	r2, r3
 8002e04:	fb07 1416 	mls	r4, r7, r6, r1
 8002e08:	3430      	adds	r4, #48	@ 0x30
 8002e0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002e0e:	460c      	mov	r4, r1
 8002e10:	2c63      	cmp	r4, #99	@ 0x63
 8002e12:	4631      	mov	r1, r6
 8002e14:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e18:	dcf1      	bgt.n	8002dfe <__exponent+0x1c>
 8002e1a:	3130      	adds	r1, #48	@ 0x30
 8002e1c:	1e94      	subs	r4, r2, #2
 8002e1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002e22:	4623      	mov	r3, r4
 8002e24:	1c41      	adds	r1, r0, #1
 8002e26:	42ab      	cmp	r3, r5
 8002e28:	d30a      	bcc.n	8002e40 <__exponent+0x5e>
 8002e2a:	f10d 0309 	add.w	r3, sp, #9
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	42ac      	cmp	r4, r5
 8002e32:	bf88      	it	hi
 8002e34:	2300      	movhi	r3, #0
 8002e36:	3302      	adds	r3, #2
 8002e38:	4403      	add	r3, r0
 8002e3a:	1a18      	subs	r0, r3, r0
 8002e3c:	b003      	add	sp, #12
 8002e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002e44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002e48:	e7ed      	b.n	8002e26 <__exponent+0x44>
 8002e4a:	2330      	movs	r3, #48	@ 0x30
 8002e4c:	3130      	adds	r1, #48	@ 0x30
 8002e4e:	7083      	strb	r3, [r0, #2]
 8002e50:	70c1      	strb	r1, [r0, #3]
 8002e52:	1d03      	adds	r3, r0, #4
 8002e54:	e7f1      	b.n	8002e3a <__exponent+0x58>
	...

08002e58 <_printf_float>:
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5c:	b091      	sub	sp, #68	@ 0x44
 8002e5e:	460c      	mov	r4, r1
 8002e60:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002e64:	4616      	mov	r6, r2
 8002e66:	461f      	mov	r7, r3
 8002e68:	4605      	mov	r5, r0
 8002e6a:	f000 fce1 	bl	8003830 <_localeconv_r>
 8002e6e:	6803      	ldr	r3, [r0, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	9308      	str	r3, [sp, #32]
 8002e74:	f7fd f97c 	bl	8000170 <strlen>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8002e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e80:	9009      	str	r0, [sp, #36]	@ 0x24
 8002e82:	3307      	adds	r3, #7
 8002e84:	f023 0307 	bic.w	r3, r3, #7
 8002e88:	f103 0208 	add.w	r2, r3, #8
 8002e8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002e90:	f8d4 b000 	ldr.w	fp, [r4]
 8002e94:	f8c8 2000 	str.w	r2, [r8]
 8002e98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002ea2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002eae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8003124 <_printf_float+0x2cc>)
 8002eb4:	f7fd fe6e 	bl	8000b94 <__aeabi_dcmpun>
 8002eb8:	bb70      	cbnz	r0, 8002f18 <_printf_float+0xc0>
 8002eba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec2:	4b98      	ldr	r3, [pc, #608]	@ (8003124 <_printf_float+0x2cc>)
 8002ec4:	f7fd fe48 	bl	8000b58 <__aeabi_dcmple>
 8002ec8:	bb30      	cbnz	r0, 8002f18 <_printf_float+0xc0>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4640      	mov	r0, r8
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	f7fd fe37 	bl	8000b44 <__aeabi_dcmplt>
 8002ed6:	b110      	cbz	r0, 8002ede <_printf_float+0x86>
 8002ed8:	232d      	movs	r3, #45	@ 0x2d
 8002eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ede:	4a92      	ldr	r2, [pc, #584]	@ (8003128 <_printf_float+0x2d0>)
 8002ee0:	4b92      	ldr	r3, [pc, #584]	@ (800312c <_printf_float+0x2d4>)
 8002ee2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002ee6:	bf94      	ite	ls
 8002ee8:	4690      	movls	r8, r2
 8002eea:	4698      	movhi	r8, r3
 8002eec:	2303      	movs	r3, #3
 8002eee:	f04f 0900 	mov.w	r9, #0
 8002ef2:	6123      	str	r3, [r4, #16]
 8002ef4:	f02b 0304 	bic.w	r3, fp, #4
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	4633      	mov	r3, r6
 8002efc:	4621      	mov	r1, r4
 8002efe:	4628      	mov	r0, r5
 8002f00:	9700      	str	r7, [sp, #0]
 8002f02:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002f04:	f000 f9d4 	bl	80032b0 <_printf_common>
 8002f08:	3001      	adds	r0, #1
 8002f0a:	f040 8090 	bne.w	800302e <_printf_float+0x1d6>
 8002f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f12:	b011      	add	sp, #68	@ 0x44
 8002f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f18:	4642      	mov	r2, r8
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	4640      	mov	r0, r8
 8002f1e:	4649      	mov	r1, r9
 8002f20:	f7fd fe38 	bl	8000b94 <__aeabi_dcmpun>
 8002f24:	b148      	cbz	r0, 8002f3a <_printf_float+0xe2>
 8002f26:	464b      	mov	r3, r9
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bfb8      	it	lt
 8002f2c:	232d      	movlt	r3, #45	@ 0x2d
 8002f2e:	4a80      	ldr	r2, [pc, #512]	@ (8003130 <_printf_float+0x2d8>)
 8002f30:	bfb8      	it	lt
 8002f32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002f36:	4b7f      	ldr	r3, [pc, #508]	@ (8003134 <_printf_float+0x2dc>)
 8002f38:	e7d3      	b.n	8002ee2 <_printf_float+0x8a>
 8002f3a:	6863      	ldr	r3, [r4, #4]
 8002f3c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	d13f      	bne.n	8002fc4 <_printf_float+0x16c>
 8002f44:	2306      	movs	r3, #6
 8002f46:	6063      	str	r3, [r4, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002f4e:	6023      	str	r3, [r4, #0]
 8002f50:	9206      	str	r2, [sp, #24]
 8002f52:	aa0e      	add	r2, sp, #56	@ 0x38
 8002f54:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002f58:	aa0d      	add	r2, sp, #52	@ 0x34
 8002f5a:	9203      	str	r2, [sp, #12]
 8002f5c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002f60:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002f64:	6863      	ldr	r3, [r4, #4]
 8002f66:	4642      	mov	r2, r8
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	910a      	str	r1, [sp, #40]	@ 0x28
 8002f70:	f7ff fed3 	bl	8002d1a <__cvt>
 8002f74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002f76:	4680      	mov	r8, r0
 8002f78:	2947      	cmp	r1, #71	@ 0x47
 8002f7a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002f7c:	d128      	bne.n	8002fd0 <_printf_float+0x178>
 8002f7e:	1cc8      	adds	r0, r1, #3
 8002f80:	db02      	blt.n	8002f88 <_printf_float+0x130>
 8002f82:	6863      	ldr	r3, [r4, #4]
 8002f84:	4299      	cmp	r1, r3
 8002f86:	dd40      	ble.n	800300a <_printf_float+0x1b2>
 8002f88:	f1aa 0a02 	sub.w	sl, sl, #2
 8002f8c:	fa5f fa8a 	uxtb.w	sl, sl
 8002f90:	4652      	mov	r2, sl
 8002f92:	3901      	subs	r1, #1
 8002f94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002f98:	910d      	str	r1, [sp, #52]	@ 0x34
 8002f9a:	f7ff ff22 	bl	8002de2 <__exponent>
 8002f9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002fa0:	4681      	mov	r9, r0
 8002fa2:	1813      	adds	r3, r2, r0
 8002fa4:	2a01      	cmp	r2, #1
 8002fa6:	6123      	str	r3, [r4, #16]
 8002fa8:	dc02      	bgt.n	8002fb0 <_printf_float+0x158>
 8002faa:	6822      	ldr	r2, [r4, #0]
 8002fac:	07d2      	lsls	r2, r2, #31
 8002fae:	d501      	bpl.n	8002fb4 <_printf_float+0x15c>
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	6123      	str	r3, [r4, #16]
 8002fb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d09e      	beq.n	8002efa <_printf_float+0xa2>
 8002fbc:	232d      	movs	r3, #45	@ 0x2d
 8002fbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fc2:	e79a      	b.n	8002efa <_printf_float+0xa2>
 8002fc4:	2947      	cmp	r1, #71	@ 0x47
 8002fc6:	d1bf      	bne.n	8002f48 <_printf_float+0xf0>
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1bd      	bne.n	8002f48 <_printf_float+0xf0>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e7ba      	b.n	8002f46 <_printf_float+0xee>
 8002fd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002fd4:	d9dc      	bls.n	8002f90 <_printf_float+0x138>
 8002fd6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002fda:	d118      	bne.n	800300e <_printf_float+0x1b6>
 8002fdc:	2900      	cmp	r1, #0
 8002fde:	6863      	ldr	r3, [r4, #4]
 8002fe0:	dd0b      	ble.n	8002ffa <_printf_float+0x1a2>
 8002fe2:	6121      	str	r1, [r4, #16]
 8002fe4:	b913      	cbnz	r3, 8002fec <_printf_float+0x194>
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	07d0      	lsls	r0, r2, #31
 8002fea:	d502      	bpl.n	8002ff2 <_printf_float+0x19a>
 8002fec:	3301      	adds	r3, #1
 8002fee:	440b      	add	r3, r1
 8002ff0:	6123      	str	r3, [r4, #16]
 8002ff2:	f04f 0900 	mov.w	r9, #0
 8002ff6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002ff8:	e7dc      	b.n	8002fb4 <_printf_float+0x15c>
 8002ffa:	b913      	cbnz	r3, 8003002 <_printf_float+0x1aa>
 8002ffc:	6822      	ldr	r2, [r4, #0]
 8002ffe:	07d2      	lsls	r2, r2, #31
 8003000:	d501      	bpl.n	8003006 <_printf_float+0x1ae>
 8003002:	3302      	adds	r3, #2
 8003004:	e7f4      	b.n	8002ff0 <_printf_float+0x198>
 8003006:	2301      	movs	r3, #1
 8003008:	e7f2      	b.n	8002ff0 <_printf_float+0x198>
 800300a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800300e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003010:	4299      	cmp	r1, r3
 8003012:	db05      	blt.n	8003020 <_printf_float+0x1c8>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	6121      	str	r1, [r4, #16]
 8003018:	07d8      	lsls	r0, r3, #31
 800301a:	d5ea      	bpl.n	8002ff2 <_printf_float+0x19a>
 800301c:	1c4b      	adds	r3, r1, #1
 800301e:	e7e7      	b.n	8002ff0 <_printf_float+0x198>
 8003020:	2900      	cmp	r1, #0
 8003022:	bfcc      	ite	gt
 8003024:	2201      	movgt	r2, #1
 8003026:	f1c1 0202 	rsble	r2, r1, #2
 800302a:	4413      	add	r3, r2
 800302c:	e7e0      	b.n	8002ff0 <_printf_float+0x198>
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	055a      	lsls	r2, r3, #21
 8003032:	d407      	bmi.n	8003044 <_printf_float+0x1ec>
 8003034:	6923      	ldr	r3, [r4, #16]
 8003036:	4642      	mov	r2, r8
 8003038:	4631      	mov	r1, r6
 800303a:	4628      	mov	r0, r5
 800303c:	47b8      	blx	r7
 800303e:	3001      	adds	r0, #1
 8003040:	d12b      	bne.n	800309a <_printf_float+0x242>
 8003042:	e764      	b.n	8002f0e <_printf_float+0xb6>
 8003044:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003048:	f240 80dc 	bls.w	8003204 <_printf_float+0x3ac>
 800304c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003050:	2200      	movs	r2, #0
 8003052:	2300      	movs	r3, #0
 8003054:	f7fd fd6c 	bl	8000b30 <__aeabi_dcmpeq>
 8003058:	2800      	cmp	r0, #0
 800305a:	d033      	beq.n	80030c4 <_printf_float+0x26c>
 800305c:	2301      	movs	r3, #1
 800305e:	4631      	mov	r1, r6
 8003060:	4628      	mov	r0, r5
 8003062:	4a35      	ldr	r2, [pc, #212]	@ (8003138 <_printf_float+0x2e0>)
 8003064:	47b8      	blx	r7
 8003066:	3001      	adds	r0, #1
 8003068:	f43f af51 	beq.w	8002f0e <_printf_float+0xb6>
 800306c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003070:	4543      	cmp	r3, r8
 8003072:	db02      	blt.n	800307a <_printf_float+0x222>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	07d8      	lsls	r0, r3, #31
 8003078:	d50f      	bpl.n	800309a <_printf_float+0x242>
 800307a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800307e:	4631      	mov	r1, r6
 8003080:	4628      	mov	r0, r5
 8003082:	47b8      	blx	r7
 8003084:	3001      	adds	r0, #1
 8003086:	f43f af42 	beq.w	8002f0e <_printf_float+0xb6>
 800308a:	f04f 0900 	mov.w	r9, #0
 800308e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003092:	f104 0a1a 	add.w	sl, r4, #26
 8003096:	45c8      	cmp	r8, r9
 8003098:	dc09      	bgt.n	80030ae <_printf_float+0x256>
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	079b      	lsls	r3, r3, #30
 800309e:	f100 8102 	bmi.w	80032a6 <_printf_float+0x44e>
 80030a2:	68e0      	ldr	r0, [r4, #12]
 80030a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80030a6:	4298      	cmp	r0, r3
 80030a8:	bfb8      	it	lt
 80030aa:	4618      	movlt	r0, r3
 80030ac:	e731      	b.n	8002f12 <_printf_float+0xba>
 80030ae:	2301      	movs	r3, #1
 80030b0:	4652      	mov	r2, sl
 80030b2:	4631      	mov	r1, r6
 80030b4:	4628      	mov	r0, r5
 80030b6:	47b8      	blx	r7
 80030b8:	3001      	adds	r0, #1
 80030ba:	f43f af28 	beq.w	8002f0e <_printf_float+0xb6>
 80030be:	f109 0901 	add.w	r9, r9, #1
 80030c2:	e7e8      	b.n	8003096 <_printf_float+0x23e>
 80030c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	dc38      	bgt.n	800313c <_printf_float+0x2e4>
 80030ca:	2301      	movs	r3, #1
 80030cc:	4631      	mov	r1, r6
 80030ce:	4628      	mov	r0, r5
 80030d0:	4a19      	ldr	r2, [pc, #100]	@ (8003138 <_printf_float+0x2e0>)
 80030d2:	47b8      	blx	r7
 80030d4:	3001      	adds	r0, #1
 80030d6:	f43f af1a 	beq.w	8002f0e <_printf_float+0xb6>
 80030da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80030de:	ea59 0303 	orrs.w	r3, r9, r3
 80030e2:	d102      	bne.n	80030ea <_printf_float+0x292>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	07d9      	lsls	r1, r3, #31
 80030e8:	d5d7      	bpl.n	800309a <_printf_float+0x242>
 80030ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80030ee:	4631      	mov	r1, r6
 80030f0:	4628      	mov	r0, r5
 80030f2:	47b8      	blx	r7
 80030f4:	3001      	adds	r0, #1
 80030f6:	f43f af0a 	beq.w	8002f0e <_printf_float+0xb6>
 80030fa:	f04f 0a00 	mov.w	sl, #0
 80030fe:	f104 0b1a 	add.w	fp, r4, #26
 8003102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003104:	425b      	negs	r3, r3
 8003106:	4553      	cmp	r3, sl
 8003108:	dc01      	bgt.n	800310e <_printf_float+0x2b6>
 800310a:	464b      	mov	r3, r9
 800310c:	e793      	b.n	8003036 <_printf_float+0x1de>
 800310e:	2301      	movs	r3, #1
 8003110:	465a      	mov	r2, fp
 8003112:	4631      	mov	r1, r6
 8003114:	4628      	mov	r0, r5
 8003116:	47b8      	blx	r7
 8003118:	3001      	adds	r0, #1
 800311a:	f43f aef8 	beq.w	8002f0e <_printf_float+0xb6>
 800311e:	f10a 0a01 	add.w	sl, sl, #1
 8003122:	e7ee      	b.n	8003102 <_printf_float+0x2aa>
 8003124:	7fefffff 	.word	0x7fefffff
 8003128:	08005a1d 	.word	0x08005a1d
 800312c:	08005a21 	.word	0x08005a21
 8003130:	08005a25 	.word	0x08005a25
 8003134:	08005a29 	.word	0x08005a29
 8003138:	08005a2d 	.word	0x08005a2d
 800313c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800313e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003142:	4553      	cmp	r3, sl
 8003144:	bfa8      	it	ge
 8003146:	4653      	movge	r3, sl
 8003148:	2b00      	cmp	r3, #0
 800314a:	4699      	mov	r9, r3
 800314c:	dc36      	bgt.n	80031bc <_printf_float+0x364>
 800314e:	f04f 0b00 	mov.w	fp, #0
 8003152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003156:	f104 021a 	add.w	r2, r4, #26
 800315a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800315c:	930a      	str	r3, [sp, #40]	@ 0x28
 800315e:	eba3 0309 	sub.w	r3, r3, r9
 8003162:	455b      	cmp	r3, fp
 8003164:	dc31      	bgt.n	80031ca <_printf_float+0x372>
 8003166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003168:	459a      	cmp	sl, r3
 800316a:	dc3a      	bgt.n	80031e2 <_printf_float+0x38a>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	07da      	lsls	r2, r3, #31
 8003170:	d437      	bmi.n	80031e2 <_printf_float+0x38a>
 8003172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003174:	ebaa 0903 	sub.w	r9, sl, r3
 8003178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800317a:	ebaa 0303 	sub.w	r3, sl, r3
 800317e:	4599      	cmp	r9, r3
 8003180:	bfa8      	it	ge
 8003182:	4699      	movge	r9, r3
 8003184:	f1b9 0f00 	cmp.w	r9, #0
 8003188:	dc33      	bgt.n	80031f2 <_printf_float+0x39a>
 800318a:	f04f 0800 	mov.w	r8, #0
 800318e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003192:	f104 0b1a 	add.w	fp, r4, #26
 8003196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003198:	ebaa 0303 	sub.w	r3, sl, r3
 800319c:	eba3 0309 	sub.w	r3, r3, r9
 80031a0:	4543      	cmp	r3, r8
 80031a2:	f77f af7a 	ble.w	800309a <_printf_float+0x242>
 80031a6:	2301      	movs	r3, #1
 80031a8:	465a      	mov	r2, fp
 80031aa:	4631      	mov	r1, r6
 80031ac:	4628      	mov	r0, r5
 80031ae:	47b8      	blx	r7
 80031b0:	3001      	adds	r0, #1
 80031b2:	f43f aeac 	beq.w	8002f0e <_printf_float+0xb6>
 80031b6:	f108 0801 	add.w	r8, r8, #1
 80031ba:	e7ec      	b.n	8003196 <_printf_float+0x33e>
 80031bc:	4642      	mov	r2, r8
 80031be:	4631      	mov	r1, r6
 80031c0:	4628      	mov	r0, r5
 80031c2:	47b8      	blx	r7
 80031c4:	3001      	adds	r0, #1
 80031c6:	d1c2      	bne.n	800314e <_printf_float+0x2f6>
 80031c8:	e6a1      	b.n	8002f0e <_printf_float+0xb6>
 80031ca:	2301      	movs	r3, #1
 80031cc:	4631      	mov	r1, r6
 80031ce:	4628      	mov	r0, r5
 80031d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80031d2:	47b8      	blx	r7
 80031d4:	3001      	adds	r0, #1
 80031d6:	f43f ae9a 	beq.w	8002f0e <_printf_float+0xb6>
 80031da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80031dc:	f10b 0b01 	add.w	fp, fp, #1
 80031e0:	e7bb      	b.n	800315a <_printf_float+0x302>
 80031e2:	4631      	mov	r1, r6
 80031e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80031e8:	4628      	mov	r0, r5
 80031ea:	47b8      	blx	r7
 80031ec:	3001      	adds	r0, #1
 80031ee:	d1c0      	bne.n	8003172 <_printf_float+0x31a>
 80031f0:	e68d      	b.n	8002f0e <_printf_float+0xb6>
 80031f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80031f4:	464b      	mov	r3, r9
 80031f6:	4631      	mov	r1, r6
 80031f8:	4628      	mov	r0, r5
 80031fa:	4442      	add	r2, r8
 80031fc:	47b8      	blx	r7
 80031fe:	3001      	adds	r0, #1
 8003200:	d1c3      	bne.n	800318a <_printf_float+0x332>
 8003202:	e684      	b.n	8002f0e <_printf_float+0xb6>
 8003204:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003208:	f1ba 0f01 	cmp.w	sl, #1
 800320c:	dc01      	bgt.n	8003212 <_printf_float+0x3ba>
 800320e:	07db      	lsls	r3, r3, #31
 8003210:	d536      	bpl.n	8003280 <_printf_float+0x428>
 8003212:	2301      	movs	r3, #1
 8003214:	4642      	mov	r2, r8
 8003216:	4631      	mov	r1, r6
 8003218:	4628      	mov	r0, r5
 800321a:	47b8      	blx	r7
 800321c:	3001      	adds	r0, #1
 800321e:	f43f ae76 	beq.w	8002f0e <_printf_float+0xb6>
 8003222:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003226:	4631      	mov	r1, r6
 8003228:	4628      	mov	r0, r5
 800322a:	47b8      	blx	r7
 800322c:	3001      	adds	r0, #1
 800322e:	f43f ae6e 	beq.w	8002f0e <_printf_float+0xb6>
 8003232:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003236:	2200      	movs	r2, #0
 8003238:	2300      	movs	r3, #0
 800323a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800323e:	f7fd fc77 	bl	8000b30 <__aeabi_dcmpeq>
 8003242:	b9c0      	cbnz	r0, 8003276 <_printf_float+0x41e>
 8003244:	4653      	mov	r3, sl
 8003246:	f108 0201 	add.w	r2, r8, #1
 800324a:	4631      	mov	r1, r6
 800324c:	4628      	mov	r0, r5
 800324e:	47b8      	blx	r7
 8003250:	3001      	adds	r0, #1
 8003252:	d10c      	bne.n	800326e <_printf_float+0x416>
 8003254:	e65b      	b.n	8002f0e <_printf_float+0xb6>
 8003256:	2301      	movs	r3, #1
 8003258:	465a      	mov	r2, fp
 800325a:	4631      	mov	r1, r6
 800325c:	4628      	mov	r0, r5
 800325e:	47b8      	blx	r7
 8003260:	3001      	adds	r0, #1
 8003262:	f43f ae54 	beq.w	8002f0e <_printf_float+0xb6>
 8003266:	f108 0801 	add.w	r8, r8, #1
 800326a:	45d0      	cmp	r8, sl
 800326c:	dbf3      	blt.n	8003256 <_printf_float+0x3fe>
 800326e:	464b      	mov	r3, r9
 8003270:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003274:	e6e0      	b.n	8003038 <_printf_float+0x1e0>
 8003276:	f04f 0800 	mov.w	r8, #0
 800327a:	f104 0b1a 	add.w	fp, r4, #26
 800327e:	e7f4      	b.n	800326a <_printf_float+0x412>
 8003280:	2301      	movs	r3, #1
 8003282:	4642      	mov	r2, r8
 8003284:	e7e1      	b.n	800324a <_printf_float+0x3f2>
 8003286:	2301      	movs	r3, #1
 8003288:	464a      	mov	r2, r9
 800328a:	4631      	mov	r1, r6
 800328c:	4628      	mov	r0, r5
 800328e:	47b8      	blx	r7
 8003290:	3001      	adds	r0, #1
 8003292:	f43f ae3c 	beq.w	8002f0e <_printf_float+0xb6>
 8003296:	f108 0801 	add.w	r8, r8, #1
 800329a:	68e3      	ldr	r3, [r4, #12]
 800329c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800329e:	1a5b      	subs	r3, r3, r1
 80032a0:	4543      	cmp	r3, r8
 80032a2:	dcf0      	bgt.n	8003286 <_printf_float+0x42e>
 80032a4:	e6fd      	b.n	80030a2 <_printf_float+0x24a>
 80032a6:	f04f 0800 	mov.w	r8, #0
 80032aa:	f104 0919 	add.w	r9, r4, #25
 80032ae:	e7f4      	b.n	800329a <_printf_float+0x442>

080032b0 <_printf_common>:
 80032b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	4616      	mov	r6, r2
 80032b6:	4698      	mov	r8, r3
 80032b8:	688a      	ldr	r2, [r1, #8]
 80032ba:	690b      	ldr	r3, [r1, #16]
 80032bc:	4607      	mov	r7, r0
 80032be:	4293      	cmp	r3, r2
 80032c0:	bfb8      	it	lt
 80032c2:	4613      	movlt	r3, r2
 80032c4:	6033      	str	r3, [r6, #0]
 80032c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80032ca:	460c      	mov	r4, r1
 80032cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032d0:	b10a      	cbz	r2, 80032d6 <_printf_common+0x26>
 80032d2:	3301      	adds	r3, #1
 80032d4:	6033      	str	r3, [r6, #0]
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	0699      	lsls	r1, r3, #26
 80032da:	bf42      	ittt	mi
 80032dc:	6833      	ldrmi	r3, [r6, #0]
 80032de:	3302      	addmi	r3, #2
 80032e0:	6033      	strmi	r3, [r6, #0]
 80032e2:	6825      	ldr	r5, [r4, #0]
 80032e4:	f015 0506 	ands.w	r5, r5, #6
 80032e8:	d106      	bne.n	80032f8 <_printf_common+0x48>
 80032ea:	f104 0a19 	add.w	sl, r4, #25
 80032ee:	68e3      	ldr	r3, [r4, #12]
 80032f0:	6832      	ldr	r2, [r6, #0]
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	42ab      	cmp	r3, r5
 80032f6:	dc2b      	bgt.n	8003350 <_printf_common+0xa0>
 80032f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	3b00      	subs	r3, #0
 8003300:	bf18      	it	ne
 8003302:	2301      	movne	r3, #1
 8003304:	0692      	lsls	r2, r2, #26
 8003306:	d430      	bmi.n	800336a <_printf_common+0xba>
 8003308:	4641      	mov	r1, r8
 800330a:	4638      	mov	r0, r7
 800330c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003310:	47c8      	blx	r9
 8003312:	3001      	adds	r0, #1
 8003314:	d023      	beq.n	800335e <_printf_common+0xae>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	6922      	ldr	r2, [r4, #16]
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf14      	ite	ne
 8003322:	2500      	movne	r5, #0
 8003324:	6833      	ldreq	r3, [r6, #0]
 8003326:	f04f 0600 	mov.w	r6, #0
 800332a:	bf08      	it	eq
 800332c:	68e5      	ldreq	r5, [r4, #12]
 800332e:	f104 041a 	add.w	r4, r4, #26
 8003332:	bf08      	it	eq
 8003334:	1aed      	subeq	r5, r5, r3
 8003336:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800333a:	bf08      	it	eq
 800333c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003340:	4293      	cmp	r3, r2
 8003342:	bfc4      	itt	gt
 8003344:	1a9b      	subgt	r3, r3, r2
 8003346:	18ed      	addgt	r5, r5, r3
 8003348:	42b5      	cmp	r5, r6
 800334a:	d11a      	bne.n	8003382 <_printf_common+0xd2>
 800334c:	2000      	movs	r0, #0
 800334e:	e008      	b.n	8003362 <_printf_common+0xb2>
 8003350:	2301      	movs	r3, #1
 8003352:	4652      	mov	r2, sl
 8003354:	4641      	mov	r1, r8
 8003356:	4638      	mov	r0, r7
 8003358:	47c8      	blx	r9
 800335a:	3001      	adds	r0, #1
 800335c:	d103      	bne.n	8003366 <_printf_common+0xb6>
 800335e:	f04f 30ff 	mov.w	r0, #4294967295
 8003362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003366:	3501      	adds	r5, #1
 8003368:	e7c1      	b.n	80032ee <_printf_common+0x3e>
 800336a:	2030      	movs	r0, #48	@ 0x30
 800336c:	18e1      	adds	r1, r4, r3
 800336e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003378:	4422      	add	r2, r4
 800337a:	3302      	adds	r3, #2
 800337c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003380:	e7c2      	b.n	8003308 <_printf_common+0x58>
 8003382:	2301      	movs	r3, #1
 8003384:	4622      	mov	r2, r4
 8003386:	4641      	mov	r1, r8
 8003388:	4638      	mov	r0, r7
 800338a:	47c8      	blx	r9
 800338c:	3001      	adds	r0, #1
 800338e:	d0e6      	beq.n	800335e <_printf_common+0xae>
 8003390:	3601      	adds	r6, #1
 8003392:	e7d9      	b.n	8003348 <_printf_common+0x98>

08003394 <_printf_i>:
 8003394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003398:	7e0f      	ldrb	r7, [r1, #24]
 800339a:	4691      	mov	r9, r2
 800339c:	2f78      	cmp	r7, #120	@ 0x78
 800339e:	4680      	mov	r8, r0
 80033a0:	460c      	mov	r4, r1
 80033a2:	469a      	mov	sl, r3
 80033a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80033aa:	d807      	bhi.n	80033bc <_printf_i+0x28>
 80033ac:	2f62      	cmp	r7, #98	@ 0x62
 80033ae:	d80a      	bhi.n	80033c6 <_printf_i+0x32>
 80033b0:	2f00      	cmp	r7, #0
 80033b2:	f000 80d3 	beq.w	800355c <_printf_i+0x1c8>
 80033b6:	2f58      	cmp	r7, #88	@ 0x58
 80033b8:	f000 80ba 	beq.w	8003530 <_printf_i+0x19c>
 80033bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80033c4:	e03a      	b.n	800343c <_printf_i+0xa8>
 80033c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80033ca:	2b15      	cmp	r3, #21
 80033cc:	d8f6      	bhi.n	80033bc <_printf_i+0x28>
 80033ce:	a101      	add	r1, pc, #4	@ (adr r1, 80033d4 <_printf_i+0x40>)
 80033d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033d4:	0800342d 	.word	0x0800342d
 80033d8:	08003441 	.word	0x08003441
 80033dc:	080033bd 	.word	0x080033bd
 80033e0:	080033bd 	.word	0x080033bd
 80033e4:	080033bd 	.word	0x080033bd
 80033e8:	080033bd 	.word	0x080033bd
 80033ec:	08003441 	.word	0x08003441
 80033f0:	080033bd 	.word	0x080033bd
 80033f4:	080033bd 	.word	0x080033bd
 80033f8:	080033bd 	.word	0x080033bd
 80033fc:	080033bd 	.word	0x080033bd
 8003400:	08003543 	.word	0x08003543
 8003404:	0800346b 	.word	0x0800346b
 8003408:	080034fd 	.word	0x080034fd
 800340c:	080033bd 	.word	0x080033bd
 8003410:	080033bd 	.word	0x080033bd
 8003414:	08003565 	.word	0x08003565
 8003418:	080033bd 	.word	0x080033bd
 800341c:	0800346b 	.word	0x0800346b
 8003420:	080033bd 	.word	0x080033bd
 8003424:	080033bd 	.word	0x080033bd
 8003428:	08003505 	.word	0x08003505
 800342c:	6833      	ldr	r3, [r6, #0]
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6032      	str	r2, [r6, #0]
 8003434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800343c:	2301      	movs	r3, #1
 800343e:	e09e      	b.n	800357e <_printf_i+0x1ea>
 8003440:	6833      	ldr	r3, [r6, #0]
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	1d19      	adds	r1, r3, #4
 8003446:	6031      	str	r1, [r6, #0]
 8003448:	0606      	lsls	r6, r0, #24
 800344a:	d501      	bpl.n	8003450 <_printf_i+0xbc>
 800344c:	681d      	ldr	r5, [r3, #0]
 800344e:	e003      	b.n	8003458 <_printf_i+0xc4>
 8003450:	0645      	lsls	r5, r0, #25
 8003452:	d5fb      	bpl.n	800344c <_printf_i+0xb8>
 8003454:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003458:	2d00      	cmp	r5, #0
 800345a:	da03      	bge.n	8003464 <_printf_i+0xd0>
 800345c:	232d      	movs	r3, #45	@ 0x2d
 800345e:	426d      	negs	r5, r5
 8003460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003464:	230a      	movs	r3, #10
 8003466:	4859      	ldr	r0, [pc, #356]	@ (80035cc <_printf_i+0x238>)
 8003468:	e011      	b.n	800348e <_printf_i+0xfa>
 800346a:	6821      	ldr	r1, [r4, #0]
 800346c:	6833      	ldr	r3, [r6, #0]
 800346e:	0608      	lsls	r0, r1, #24
 8003470:	f853 5b04 	ldr.w	r5, [r3], #4
 8003474:	d402      	bmi.n	800347c <_printf_i+0xe8>
 8003476:	0649      	lsls	r1, r1, #25
 8003478:	bf48      	it	mi
 800347a:	b2ad      	uxthmi	r5, r5
 800347c:	2f6f      	cmp	r7, #111	@ 0x6f
 800347e:	6033      	str	r3, [r6, #0]
 8003480:	bf14      	ite	ne
 8003482:	230a      	movne	r3, #10
 8003484:	2308      	moveq	r3, #8
 8003486:	4851      	ldr	r0, [pc, #324]	@ (80035cc <_printf_i+0x238>)
 8003488:	2100      	movs	r1, #0
 800348a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800348e:	6866      	ldr	r6, [r4, #4]
 8003490:	2e00      	cmp	r6, #0
 8003492:	bfa8      	it	ge
 8003494:	6821      	ldrge	r1, [r4, #0]
 8003496:	60a6      	str	r6, [r4, #8]
 8003498:	bfa4      	itt	ge
 800349a:	f021 0104 	bicge.w	r1, r1, #4
 800349e:	6021      	strge	r1, [r4, #0]
 80034a0:	b90d      	cbnz	r5, 80034a6 <_printf_i+0x112>
 80034a2:	2e00      	cmp	r6, #0
 80034a4:	d04b      	beq.n	800353e <_printf_i+0x1aa>
 80034a6:	4616      	mov	r6, r2
 80034a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80034ac:	fb03 5711 	mls	r7, r3, r1, r5
 80034b0:	5dc7      	ldrb	r7, [r0, r7]
 80034b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034b6:	462f      	mov	r7, r5
 80034b8:	42bb      	cmp	r3, r7
 80034ba:	460d      	mov	r5, r1
 80034bc:	d9f4      	bls.n	80034a8 <_printf_i+0x114>
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d10b      	bne.n	80034da <_printf_i+0x146>
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	07df      	lsls	r7, r3, #31
 80034c6:	d508      	bpl.n	80034da <_printf_i+0x146>
 80034c8:	6923      	ldr	r3, [r4, #16]
 80034ca:	6861      	ldr	r1, [r4, #4]
 80034cc:	4299      	cmp	r1, r3
 80034ce:	bfde      	ittt	le
 80034d0:	2330      	movle	r3, #48	@ 0x30
 80034d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034da:	1b92      	subs	r2, r2, r6
 80034dc:	6122      	str	r2, [r4, #16]
 80034de:	464b      	mov	r3, r9
 80034e0:	4621      	mov	r1, r4
 80034e2:	4640      	mov	r0, r8
 80034e4:	f8cd a000 	str.w	sl, [sp]
 80034e8:	aa03      	add	r2, sp, #12
 80034ea:	f7ff fee1 	bl	80032b0 <_printf_common>
 80034ee:	3001      	adds	r0, #1
 80034f0:	d14a      	bne.n	8003588 <_printf_i+0x1f4>
 80034f2:	f04f 30ff 	mov.w	r0, #4294967295
 80034f6:	b004      	add	sp, #16
 80034f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	f043 0320 	orr.w	r3, r3, #32
 8003502:	6023      	str	r3, [r4, #0]
 8003504:	2778      	movs	r7, #120	@ 0x78
 8003506:	4832      	ldr	r0, [pc, #200]	@ (80035d0 <_printf_i+0x23c>)
 8003508:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	6831      	ldr	r1, [r6, #0]
 8003510:	061f      	lsls	r7, r3, #24
 8003512:	f851 5b04 	ldr.w	r5, [r1], #4
 8003516:	d402      	bmi.n	800351e <_printf_i+0x18a>
 8003518:	065f      	lsls	r7, r3, #25
 800351a:	bf48      	it	mi
 800351c:	b2ad      	uxthmi	r5, r5
 800351e:	6031      	str	r1, [r6, #0]
 8003520:	07d9      	lsls	r1, r3, #31
 8003522:	bf44      	itt	mi
 8003524:	f043 0320 	orrmi.w	r3, r3, #32
 8003528:	6023      	strmi	r3, [r4, #0]
 800352a:	b11d      	cbz	r5, 8003534 <_printf_i+0x1a0>
 800352c:	2310      	movs	r3, #16
 800352e:	e7ab      	b.n	8003488 <_printf_i+0xf4>
 8003530:	4826      	ldr	r0, [pc, #152]	@ (80035cc <_printf_i+0x238>)
 8003532:	e7e9      	b.n	8003508 <_printf_i+0x174>
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	f023 0320 	bic.w	r3, r3, #32
 800353a:	6023      	str	r3, [r4, #0]
 800353c:	e7f6      	b.n	800352c <_printf_i+0x198>
 800353e:	4616      	mov	r6, r2
 8003540:	e7bd      	b.n	80034be <_printf_i+0x12a>
 8003542:	6833      	ldr	r3, [r6, #0]
 8003544:	6825      	ldr	r5, [r4, #0]
 8003546:	1d18      	adds	r0, r3, #4
 8003548:	6961      	ldr	r1, [r4, #20]
 800354a:	6030      	str	r0, [r6, #0]
 800354c:	062e      	lsls	r6, r5, #24
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	d501      	bpl.n	8003556 <_printf_i+0x1c2>
 8003552:	6019      	str	r1, [r3, #0]
 8003554:	e002      	b.n	800355c <_printf_i+0x1c8>
 8003556:	0668      	lsls	r0, r5, #25
 8003558:	d5fb      	bpl.n	8003552 <_printf_i+0x1be>
 800355a:	8019      	strh	r1, [r3, #0]
 800355c:	2300      	movs	r3, #0
 800355e:	4616      	mov	r6, r2
 8003560:	6123      	str	r3, [r4, #16]
 8003562:	e7bc      	b.n	80034de <_printf_i+0x14a>
 8003564:	6833      	ldr	r3, [r6, #0]
 8003566:	2100      	movs	r1, #0
 8003568:	1d1a      	adds	r2, r3, #4
 800356a:	6032      	str	r2, [r6, #0]
 800356c:	681e      	ldr	r6, [r3, #0]
 800356e:	6862      	ldr	r2, [r4, #4]
 8003570:	4630      	mov	r0, r6
 8003572:	f000 f9d4 	bl	800391e <memchr>
 8003576:	b108      	cbz	r0, 800357c <_printf_i+0x1e8>
 8003578:	1b80      	subs	r0, r0, r6
 800357a:	6060      	str	r0, [r4, #4]
 800357c:	6863      	ldr	r3, [r4, #4]
 800357e:	6123      	str	r3, [r4, #16]
 8003580:	2300      	movs	r3, #0
 8003582:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003586:	e7aa      	b.n	80034de <_printf_i+0x14a>
 8003588:	4632      	mov	r2, r6
 800358a:	4649      	mov	r1, r9
 800358c:	4640      	mov	r0, r8
 800358e:	6923      	ldr	r3, [r4, #16]
 8003590:	47d0      	blx	sl
 8003592:	3001      	adds	r0, #1
 8003594:	d0ad      	beq.n	80034f2 <_printf_i+0x15e>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	079b      	lsls	r3, r3, #30
 800359a:	d413      	bmi.n	80035c4 <_printf_i+0x230>
 800359c:	68e0      	ldr	r0, [r4, #12]
 800359e:	9b03      	ldr	r3, [sp, #12]
 80035a0:	4298      	cmp	r0, r3
 80035a2:	bfb8      	it	lt
 80035a4:	4618      	movlt	r0, r3
 80035a6:	e7a6      	b.n	80034f6 <_printf_i+0x162>
 80035a8:	2301      	movs	r3, #1
 80035aa:	4632      	mov	r2, r6
 80035ac:	4649      	mov	r1, r9
 80035ae:	4640      	mov	r0, r8
 80035b0:	47d0      	blx	sl
 80035b2:	3001      	adds	r0, #1
 80035b4:	d09d      	beq.n	80034f2 <_printf_i+0x15e>
 80035b6:	3501      	adds	r5, #1
 80035b8:	68e3      	ldr	r3, [r4, #12]
 80035ba:	9903      	ldr	r1, [sp, #12]
 80035bc:	1a5b      	subs	r3, r3, r1
 80035be:	42ab      	cmp	r3, r5
 80035c0:	dcf2      	bgt.n	80035a8 <_printf_i+0x214>
 80035c2:	e7eb      	b.n	800359c <_printf_i+0x208>
 80035c4:	2500      	movs	r5, #0
 80035c6:	f104 0619 	add.w	r6, r4, #25
 80035ca:	e7f5      	b.n	80035b8 <_printf_i+0x224>
 80035cc:	08005a2f 	.word	0x08005a2f
 80035d0:	08005a40 	.word	0x08005a40

080035d4 <std>:
 80035d4:	2300      	movs	r3, #0
 80035d6:	b510      	push	{r4, lr}
 80035d8:	4604      	mov	r4, r0
 80035da:	e9c0 3300 	strd	r3, r3, [r0]
 80035de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035e2:	6083      	str	r3, [r0, #8]
 80035e4:	8181      	strh	r1, [r0, #12]
 80035e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80035e8:	81c2      	strh	r2, [r0, #14]
 80035ea:	6183      	str	r3, [r0, #24]
 80035ec:	4619      	mov	r1, r3
 80035ee:	2208      	movs	r2, #8
 80035f0:	305c      	adds	r0, #92	@ 0x5c
 80035f2:	f000 f915 	bl	8003820 <memset>
 80035f6:	4b0d      	ldr	r3, [pc, #52]	@ (800362c <std+0x58>)
 80035f8:	6224      	str	r4, [r4, #32]
 80035fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80035fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <std+0x5c>)
 80035fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <std+0x60>)
 8003602:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003604:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <std+0x64>)
 8003606:	6323      	str	r3, [r4, #48]	@ 0x30
 8003608:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <std+0x68>)
 800360a:	429c      	cmp	r4, r3
 800360c:	d006      	beq.n	800361c <std+0x48>
 800360e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003612:	4294      	cmp	r4, r2
 8003614:	d002      	beq.n	800361c <std+0x48>
 8003616:	33d0      	adds	r3, #208	@ 0xd0
 8003618:	429c      	cmp	r4, r3
 800361a:	d105      	bne.n	8003628 <std+0x54>
 800361c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003624:	f000 b978 	b.w	8003918 <__retarget_lock_init_recursive>
 8003628:	bd10      	pop	{r4, pc}
 800362a:	bf00      	nop
 800362c:	08003759 	.word	0x08003759
 8003630:	0800377b 	.word	0x0800377b
 8003634:	080037b3 	.word	0x080037b3
 8003638:	080037d7 	.word	0x080037d7
 800363c:	200005b4 	.word	0x200005b4

08003640 <stdio_exit_handler>:
 8003640:	4a02      	ldr	r2, [pc, #8]	@ (800364c <stdio_exit_handler+0xc>)
 8003642:	4903      	ldr	r1, [pc, #12]	@ (8003650 <stdio_exit_handler+0x10>)
 8003644:	4803      	ldr	r0, [pc, #12]	@ (8003654 <stdio_exit_handler+0x14>)
 8003646:	f000 b869 	b.w	800371c <_fwalk_sglue>
 800364a:	bf00      	nop
 800364c:	200000c4 	.word	0x200000c4
 8003650:	0800528d 	.word	0x0800528d
 8003654:	200000d4 	.word	0x200000d4

08003658 <cleanup_stdio>:
 8003658:	6841      	ldr	r1, [r0, #4]
 800365a:	4b0c      	ldr	r3, [pc, #48]	@ (800368c <cleanup_stdio+0x34>)
 800365c:	b510      	push	{r4, lr}
 800365e:	4299      	cmp	r1, r3
 8003660:	4604      	mov	r4, r0
 8003662:	d001      	beq.n	8003668 <cleanup_stdio+0x10>
 8003664:	f001 fe12 	bl	800528c <_fflush_r>
 8003668:	68a1      	ldr	r1, [r4, #8]
 800366a:	4b09      	ldr	r3, [pc, #36]	@ (8003690 <cleanup_stdio+0x38>)
 800366c:	4299      	cmp	r1, r3
 800366e:	d002      	beq.n	8003676 <cleanup_stdio+0x1e>
 8003670:	4620      	mov	r0, r4
 8003672:	f001 fe0b 	bl	800528c <_fflush_r>
 8003676:	68e1      	ldr	r1, [r4, #12]
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <cleanup_stdio+0x3c>)
 800367a:	4299      	cmp	r1, r3
 800367c:	d004      	beq.n	8003688 <cleanup_stdio+0x30>
 800367e:	4620      	mov	r0, r4
 8003680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003684:	f001 be02 	b.w	800528c <_fflush_r>
 8003688:	bd10      	pop	{r4, pc}
 800368a:	bf00      	nop
 800368c:	200005b4 	.word	0x200005b4
 8003690:	2000061c 	.word	0x2000061c
 8003694:	20000684 	.word	0x20000684

08003698 <global_stdio_init.part.0>:
 8003698:	b510      	push	{r4, lr}
 800369a:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <global_stdio_init.part.0+0x30>)
 800369c:	4c0b      	ldr	r4, [pc, #44]	@ (80036cc <global_stdio_init.part.0+0x34>)
 800369e:	4a0c      	ldr	r2, [pc, #48]	@ (80036d0 <global_stdio_init.part.0+0x38>)
 80036a0:	4620      	mov	r0, r4
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	2104      	movs	r1, #4
 80036a6:	2200      	movs	r2, #0
 80036a8:	f7ff ff94 	bl	80035d4 <std>
 80036ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80036b0:	2201      	movs	r2, #1
 80036b2:	2109      	movs	r1, #9
 80036b4:	f7ff ff8e 	bl	80035d4 <std>
 80036b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80036bc:	2202      	movs	r2, #2
 80036be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c2:	2112      	movs	r1, #18
 80036c4:	f7ff bf86 	b.w	80035d4 <std>
 80036c8:	200006ec 	.word	0x200006ec
 80036cc:	200005b4 	.word	0x200005b4
 80036d0:	08003641 	.word	0x08003641

080036d4 <__sfp_lock_acquire>:
 80036d4:	4801      	ldr	r0, [pc, #4]	@ (80036dc <__sfp_lock_acquire+0x8>)
 80036d6:	f000 b920 	b.w	800391a <__retarget_lock_acquire_recursive>
 80036da:	bf00      	nop
 80036dc:	200006f5 	.word	0x200006f5

080036e0 <__sfp_lock_release>:
 80036e0:	4801      	ldr	r0, [pc, #4]	@ (80036e8 <__sfp_lock_release+0x8>)
 80036e2:	f000 b91b 	b.w	800391c <__retarget_lock_release_recursive>
 80036e6:	bf00      	nop
 80036e8:	200006f5 	.word	0x200006f5

080036ec <__sinit>:
 80036ec:	b510      	push	{r4, lr}
 80036ee:	4604      	mov	r4, r0
 80036f0:	f7ff fff0 	bl	80036d4 <__sfp_lock_acquire>
 80036f4:	6a23      	ldr	r3, [r4, #32]
 80036f6:	b11b      	cbz	r3, 8003700 <__sinit+0x14>
 80036f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036fc:	f7ff bff0 	b.w	80036e0 <__sfp_lock_release>
 8003700:	4b04      	ldr	r3, [pc, #16]	@ (8003714 <__sinit+0x28>)
 8003702:	6223      	str	r3, [r4, #32]
 8003704:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <__sinit+0x2c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f5      	bne.n	80036f8 <__sinit+0xc>
 800370c:	f7ff ffc4 	bl	8003698 <global_stdio_init.part.0>
 8003710:	e7f2      	b.n	80036f8 <__sinit+0xc>
 8003712:	bf00      	nop
 8003714:	08003659 	.word	0x08003659
 8003718:	200006ec 	.word	0x200006ec

0800371c <_fwalk_sglue>:
 800371c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003720:	4607      	mov	r7, r0
 8003722:	4688      	mov	r8, r1
 8003724:	4614      	mov	r4, r2
 8003726:	2600      	movs	r6, #0
 8003728:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800372c:	f1b9 0901 	subs.w	r9, r9, #1
 8003730:	d505      	bpl.n	800373e <_fwalk_sglue+0x22>
 8003732:	6824      	ldr	r4, [r4, #0]
 8003734:	2c00      	cmp	r4, #0
 8003736:	d1f7      	bne.n	8003728 <_fwalk_sglue+0xc>
 8003738:	4630      	mov	r0, r6
 800373a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800373e:	89ab      	ldrh	r3, [r5, #12]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d907      	bls.n	8003754 <_fwalk_sglue+0x38>
 8003744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003748:	3301      	adds	r3, #1
 800374a:	d003      	beq.n	8003754 <_fwalk_sglue+0x38>
 800374c:	4629      	mov	r1, r5
 800374e:	4638      	mov	r0, r7
 8003750:	47c0      	blx	r8
 8003752:	4306      	orrs	r6, r0
 8003754:	3568      	adds	r5, #104	@ 0x68
 8003756:	e7e9      	b.n	800372c <_fwalk_sglue+0x10>

08003758 <__sread>:
 8003758:	b510      	push	{r4, lr}
 800375a:	460c      	mov	r4, r1
 800375c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003760:	f000 f88c 	bl	800387c <_read_r>
 8003764:	2800      	cmp	r0, #0
 8003766:	bfab      	itete	ge
 8003768:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800376a:	89a3      	ldrhlt	r3, [r4, #12]
 800376c:	181b      	addge	r3, r3, r0
 800376e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003772:	bfac      	ite	ge
 8003774:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003776:	81a3      	strhlt	r3, [r4, #12]
 8003778:	bd10      	pop	{r4, pc}

0800377a <__swrite>:
 800377a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377e:	461f      	mov	r7, r3
 8003780:	898b      	ldrh	r3, [r1, #12]
 8003782:	4605      	mov	r5, r0
 8003784:	05db      	lsls	r3, r3, #23
 8003786:	460c      	mov	r4, r1
 8003788:	4616      	mov	r6, r2
 800378a:	d505      	bpl.n	8003798 <__swrite+0x1e>
 800378c:	2302      	movs	r3, #2
 800378e:	2200      	movs	r2, #0
 8003790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003794:	f000 f860 	bl	8003858 <_lseek_r>
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	4632      	mov	r2, r6
 800379c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037a0:	81a3      	strh	r3, [r4, #12]
 80037a2:	4628      	mov	r0, r5
 80037a4:	463b      	mov	r3, r7
 80037a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ae:	f000 b877 	b.w	80038a0 <_write_r>

080037b2 <__sseek>:
 80037b2:	b510      	push	{r4, lr}
 80037b4:	460c      	mov	r4, r1
 80037b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ba:	f000 f84d 	bl	8003858 <_lseek_r>
 80037be:	1c43      	adds	r3, r0, #1
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	bf15      	itete	ne
 80037c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037ce:	81a3      	strheq	r3, [r4, #12]
 80037d0:	bf18      	it	ne
 80037d2:	81a3      	strhne	r3, [r4, #12]
 80037d4:	bd10      	pop	{r4, pc}

080037d6 <__sclose>:
 80037d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037da:	f000 b82d 	b.w	8003838 <_close_r>
	...

080037e0 <_vsiprintf_r>:
 80037e0:	b500      	push	{lr}
 80037e2:	b09b      	sub	sp, #108	@ 0x6c
 80037e4:	9100      	str	r1, [sp, #0]
 80037e6:	9104      	str	r1, [sp, #16]
 80037e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037ec:	9105      	str	r1, [sp, #20]
 80037ee:	9102      	str	r1, [sp, #8]
 80037f0:	4905      	ldr	r1, [pc, #20]	@ (8003808 <_vsiprintf_r+0x28>)
 80037f2:	9103      	str	r1, [sp, #12]
 80037f4:	4669      	mov	r1, sp
 80037f6:	f001 fbcd 	bl	8004f94 <_svfiprintf_r>
 80037fa:	2200      	movs	r2, #0
 80037fc:	9b00      	ldr	r3, [sp, #0]
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	b01b      	add	sp, #108	@ 0x6c
 8003802:	f85d fb04 	ldr.w	pc, [sp], #4
 8003806:	bf00      	nop
 8003808:	ffff0208 	.word	0xffff0208

0800380c <vsiprintf>:
 800380c:	4613      	mov	r3, r2
 800380e:	460a      	mov	r2, r1
 8003810:	4601      	mov	r1, r0
 8003812:	4802      	ldr	r0, [pc, #8]	@ (800381c <vsiprintf+0x10>)
 8003814:	6800      	ldr	r0, [r0, #0]
 8003816:	f7ff bfe3 	b.w	80037e0 <_vsiprintf_r>
 800381a:	bf00      	nop
 800381c:	200000d0 	.word	0x200000d0

08003820 <memset>:
 8003820:	4603      	mov	r3, r0
 8003822:	4402      	add	r2, r0
 8003824:	4293      	cmp	r3, r2
 8003826:	d100      	bne.n	800382a <memset+0xa>
 8003828:	4770      	bx	lr
 800382a:	f803 1b01 	strb.w	r1, [r3], #1
 800382e:	e7f9      	b.n	8003824 <memset+0x4>

08003830 <_localeconv_r>:
 8003830:	4800      	ldr	r0, [pc, #0]	@ (8003834 <_localeconv_r+0x4>)
 8003832:	4770      	bx	lr
 8003834:	20000210 	.word	0x20000210

08003838 <_close_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	2300      	movs	r3, #0
 800383c:	4d05      	ldr	r5, [pc, #20]	@ (8003854 <_close_r+0x1c>)
 800383e:	4604      	mov	r4, r0
 8003840:	4608      	mov	r0, r1
 8003842:	602b      	str	r3, [r5, #0]
 8003844:	f7ff f9d9 	bl	8002bfa <_close>
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d102      	bne.n	8003852 <_close_r+0x1a>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	b103      	cbz	r3, 8003852 <_close_r+0x1a>
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	bd38      	pop	{r3, r4, r5, pc}
 8003854:	200006f0 	.word	0x200006f0

08003858 <_lseek_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4604      	mov	r4, r0
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	2200      	movs	r2, #0
 8003862:	4d05      	ldr	r5, [pc, #20]	@ (8003878 <_lseek_r+0x20>)
 8003864:	602a      	str	r2, [r5, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	f7ff f9eb 	bl	8002c42 <_lseek>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d102      	bne.n	8003876 <_lseek_r+0x1e>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	b103      	cbz	r3, 8003876 <_lseek_r+0x1e>
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	bd38      	pop	{r3, r4, r5, pc}
 8003878:	200006f0 	.word	0x200006f0

0800387c <_read_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4604      	mov	r4, r0
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	2200      	movs	r2, #0
 8003886:	4d05      	ldr	r5, [pc, #20]	@ (800389c <_read_r+0x20>)
 8003888:	602a      	str	r2, [r5, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	f7ff f97c 	bl	8002b88 <_read>
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	d102      	bne.n	800389a <_read_r+0x1e>
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	b103      	cbz	r3, 800389a <_read_r+0x1e>
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	bd38      	pop	{r3, r4, r5, pc}
 800389c:	200006f0 	.word	0x200006f0

080038a0 <_write_r>:
 80038a0:	b538      	push	{r3, r4, r5, lr}
 80038a2:	4604      	mov	r4, r0
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	2200      	movs	r2, #0
 80038aa:	4d05      	ldr	r5, [pc, #20]	@ (80038c0 <_write_r+0x20>)
 80038ac:	602a      	str	r2, [r5, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f7ff f987 	bl	8002bc2 <_write>
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d102      	bne.n	80038be <_write_r+0x1e>
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	b103      	cbz	r3, 80038be <_write_r+0x1e>
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	200006f0 	.word	0x200006f0

080038c4 <__errno>:
 80038c4:	4b01      	ldr	r3, [pc, #4]	@ (80038cc <__errno+0x8>)
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	200000d0 	.word	0x200000d0

080038d0 <__libc_init_array>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	2600      	movs	r6, #0
 80038d4:	4d0c      	ldr	r5, [pc, #48]	@ (8003908 <__libc_init_array+0x38>)
 80038d6:	4c0d      	ldr	r4, [pc, #52]	@ (800390c <__libc_init_array+0x3c>)
 80038d8:	1b64      	subs	r4, r4, r5
 80038da:	10a4      	asrs	r4, r4, #2
 80038dc:	42a6      	cmp	r6, r4
 80038de:	d109      	bne.n	80038f4 <__libc_init_array+0x24>
 80038e0:	f002 f870 	bl	80059c4 <_init>
 80038e4:	2600      	movs	r6, #0
 80038e6:	4d0a      	ldr	r5, [pc, #40]	@ (8003910 <__libc_init_array+0x40>)
 80038e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003914 <__libc_init_array+0x44>)
 80038ea:	1b64      	subs	r4, r4, r5
 80038ec:	10a4      	asrs	r4, r4, #2
 80038ee:	42a6      	cmp	r6, r4
 80038f0:	d105      	bne.n	80038fe <__libc_init_array+0x2e>
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f8:	4798      	blx	r3
 80038fa:	3601      	adds	r6, #1
 80038fc:	e7ee      	b.n	80038dc <__libc_init_array+0xc>
 80038fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003902:	4798      	blx	r3
 8003904:	3601      	adds	r6, #1
 8003906:	e7f2      	b.n	80038ee <__libc_init_array+0x1e>
 8003908:	08005d98 	.word	0x08005d98
 800390c:	08005d98 	.word	0x08005d98
 8003910:	08005d98 	.word	0x08005d98
 8003914:	08005d9c 	.word	0x08005d9c

08003918 <__retarget_lock_init_recursive>:
 8003918:	4770      	bx	lr

0800391a <__retarget_lock_acquire_recursive>:
 800391a:	4770      	bx	lr

0800391c <__retarget_lock_release_recursive>:
 800391c:	4770      	bx	lr

0800391e <memchr>:
 800391e:	4603      	mov	r3, r0
 8003920:	b510      	push	{r4, lr}
 8003922:	b2c9      	uxtb	r1, r1
 8003924:	4402      	add	r2, r0
 8003926:	4293      	cmp	r3, r2
 8003928:	4618      	mov	r0, r3
 800392a:	d101      	bne.n	8003930 <memchr+0x12>
 800392c:	2000      	movs	r0, #0
 800392e:	e003      	b.n	8003938 <memchr+0x1a>
 8003930:	7804      	ldrb	r4, [r0, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	428c      	cmp	r4, r1
 8003936:	d1f6      	bne.n	8003926 <memchr+0x8>
 8003938:	bd10      	pop	{r4, pc}

0800393a <quorem>:
 800393a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393e:	6903      	ldr	r3, [r0, #16]
 8003940:	690c      	ldr	r4, [r1, #16]
 8003942:	4607      	mov	r7, r0
 8003944:	42a3      	cmp	r3, r4
 8003946:	db7e      	blt.n	8003a46 <quorem+0x10c>
 8003948:	3c01      	subs	r4, #1
 800394a:	00a3      	lsls	r3, r4, #2
 800394c:	f100 0514 	add.w	r5, r0, #20
 8003950:	f101 0814 	add.w	r8, r1, #20
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003960:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003964:	3301      	adds	r3, #1
 8003966:	429a      	cmp	r2, r3
 8003968:	fbb2 f6f3 	udiv	r6, r2, r3
 800396c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003970:	d32e      	bcc.n	80039d0 <quorem+0x96>
 8003972:	f04f 0a00 	mov.w	sl, #0
 8003976:	46c4      	mov	ip, r8
 8003978:	46ae      	mov	lr, r5
 800397a:	46d3      	mov	fp, sl
 800397c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003980:	b298      	uxth	r0, r3
 8003982:	fb06 a000 	mla	r0, r6, r0, sl
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	0c02      	lsrs	r2, r0, #16
 800398a:	fb06 2303 	mla	r3, r6, r3, r2
 800398e:	f8de 2000 	ldr.w	r2, [lr]
 8003992:	b280      	uxth	r0, r0
 8003994:	b292      	uxth	r2, r2
 8003996:	1a12      	subs	r2, r2, r0
 8003998:	445a      	add	r2, fp
 800399a:	f8de 0000 	ldr.w	r0, [lr]
 800399e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80039a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80039ac:	b292      	uxth	r2, r2
 80039ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80039b2:	45e1      	cmp	r9, ip
 80039b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80039b8:	f84e 2b04 	str.w	r2, [lr], #4
 80039bc:	d2de      	bcs.n	800397c <quorem+0x42>
 80039be:	9b00      	ldr	r3, [sp, #0]
 80039c0:	58eb      	ldr	r3, [r5, r3]
 80039c2:	b92b      	cbnz	r3, 80039d0 <quorem+0x96>
 80039c4:	9b01      	ldr	r3, [sp, #4]
 80039c6:	3b04      	subs	r3, #4
 80039c8:	429d      	cmp	r5, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	d32f      	bcc.n	8003a2e <quorem+0xf4>
 80039ce:	613c      	str	r4, [r7, #16]
 80039d0:	4638      	mov	r0, r7
 80039d2:	f001 f97b 	bl	8004ccc <__mcmp>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	db25      	blt.n	8003a26 <quorem+0xec>
 80039da:	4629      	mov	r1, r5
 80039dc:	2000      	movs	r0, #0
 80039de:	f858 2b04 	ldr.w	r2, [r8], #4
 80039e2:	f8d1 c000 	ldr.w	ip, [r1]
 80039e6:	fa1f fe82 	uxth.w	lr, r2
 80039ea:	fa1f f38c 	uxth.w	r3, ip
 80039ee:	eba3 030e 	sub.w	r3, r3, lr
 80039f2:	4403      	add	r3, r0
 80039f4:	0c12      	lsrs	r2, r2, #16
 80039f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80039fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a04:	45c1      	cmp	r9, r8
 8003a06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003a0a:	f841 3b04 	str.w	r3, [r1], #4
 8003a0e:	d2e6      	bcs.n	80039de <quorem+0xa4>
 8003a10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a18:	b922      	cbnz	r2, 8003a24 <quorem+0xea>
 8003a1a:	3b04      	subs	r3, #4
 8003a1c:	429d      	cmp	r5, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	d30b      	bcc.n	8003a3a <quorem+0x100>
 8003a22:	613c      	str	r4, [r7, #16]
 8003a24:	3601      	adds	r6, #1
 8003a26:	4630      	mov	r0, r6
 8003a28:	b003      	add	sp, #12
 8003a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	3b04      	subs	r3, #4
 8003a32:	2a00      	cmp	r2, #0
 8003a34:	d1cb      	bne.n	80039ce <quorem+0x94>
 8003a36:	3c01      	subs	r4, #1
 8003a38:	e7c6      	b.n	80039c8 <quorem+0x8e>
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	3b04      	subs	r3, #4
 8003a3e:	2a00      	cmp	r2, #0
 8003a40:	d1ef      	bne.n	8003a22 <quorem+0xe8>
 8003a42:	3c01      	subs	r4, #1
 8003a44:	e7ea      	b.n	8003a1c <quorem+0xe2>
 8003a46:	2000      	movs	r0, #0
 8003a48:	e7ee      	b.n	8003a28 <quorem+0xee>
 8003a4a:	0000      	movs	r0, r0
 8003a4c:	0000      	movs	r0, r0
	...

08003a50 <_dtoa_r>:
 8003a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a54:	4614      	mov	r4, r2
 8003a56:	461d      	mov	r5, r3
 8003a58:	69c7      	ldr	r7, [r0, #28]
 8003a5a:	b097      	sub	sp, #92	@ 0x5c
 8003a5c:	4683      	mov	fp, r0
 8003a5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003a62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003a64:	b97f      	cbnz	r7, 8003a86 <_dtoa_r+0x36>
 8003a66:	2010      	movs	r0, #16
 8003a68:	f000 fe02 	bl	8004670 <malloc>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f8cb 001c 	str.w	r0, [fp, #28]
 8003a72:	b920      	cbnz	r0, 8003a7e <_dtoa_r+0x2e>
 8003a74:	21ef      	movs	r1, #239	@ 0xef
 8003a76:	4ba8      	ldr	r3, [pc, #672]	@ (8003d18 <_dtoa_r+0x2c8>)
 8003a78:	48a8      	ldr	r0, [pc, #672]	@ (8003d1c <_dtoa_r+0x2cc>)
 8003a7a:	f001 fc67 	bl	800534c <__assert_func>
 8003a7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003a82:	6007      	str	r7, [r0, #0]
 8003a84:	60c7      	str	r7, [r0, #12]
 8003a86:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	b159      	cbz	r1, 8003aa6 <_dtoa_r+0x56>
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	2301      	movs	r3, #1
 8003a92:	4093      	lsls	r3, r2
 8003a94:	604a      	str	r2, [r1, #4]
 8003a96:	608b      	str	r3, [r1, #8]
 8003a98:	4658      	mov	r0, fp
 8003a9a:	f000 fedf 	bl	800485c <_Bfree>
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	1e2b      	subs	r3, r5, #0
 8003aa8:	bfaf      	iteee	ge
 8003aaa:	2300      	movge	r3, #0
 8003aac:	2201      	movlt	r2, #1
 8003aae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003ab2:	9303      	strlt	r3, [sp, #12]
 8003ab4:	bfa8      	it	ge
 8003ab6:	6033      	strge	r3, [r6, #0]
 8003ab8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003abc:	4b98      	ldr	r3, [pc, #608]	@ (8003d20 <_dtoa_r+0x2d0>)
 8003abe:	bfb8      	it	lt
 8003ac0:	6032      	strlt	r2, [r6, #0]
 8003ac2:	ea33 0308 	bics.w	r3, r3, r8
 8003ac6:	d112      	bne.n	8003aee <_dtoa_r+0x9e>
 8003ac8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003acc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003ad4:	4323      	orrs	r3, r4
 8003ad6:	f000 8550 	beq.w	800457a <_dtoa_r+0xb2a>
 8003ada:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003adc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003d24 <_dtoa_r+0x2d4>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8552 	beq.w	800458a <_dtoa_r+0xb3a>
 8003ae6:	f10a 0303 	add.w	r3, sl, #3
 8003aea:	f000 bd4c 	b.w	8004586 <_dtoa_r+0xb36>
 8003aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003af2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003afa:	2200      	movs	r2, #0
 8003afc:	2300      	movs	r3, #0
 8003afe:	f7fd f817 	bl	8000b30 <__aeabi_dcmpeq>
 8003b02:	4607      	mov	r7, r0
 8003b04:	b158      	cbz	r0, 8003b1e <_dtoa_r+0xce>
 8003b06:	2301      	movs	r3, #1
 8003b08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003b0e:	b113      	cbz	r3, 8003b16 <_dtoa_r+0xc6>
 8003b10:	4b85      	ldr	r3, [pc, #532]	@ (8003d28 <_dtoa_r+0x2d8>)
 8003b12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003d2c <_dtoa_r+0x2dc>
 8003b1a:	f000 bd36 	b.w	800458a <_dtoa_r+0xb3a>
 8003b1e:	ab14      	add	r3, sp, #80	@ 0x50
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	ab15      	add	r3, sp, #84	@ 0x54
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	4658      	mov	r0, fp
 8003b28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003b2c:	f001 f97e 	bl	8004e2c <__d2b>
 8003b30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003b34:	4681      	mov	r9, r0
 8003b36:	2e00      	cmp	r6, #0
 8003b38:	d077      	beq.n	8003c2a <_dtoa_r+0x1da>
 8003b3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003b4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003b50:	9712      	str	r7, [sp, #72]	@ 0x48
 8003b52:	4619      	mov	r1, r3
 8003b54:	2200      	movs	r2, #0
 8003b56:	4b76      	ldr	r3, [pc, #472]	@ (8003d30 <_dtoa_r+0x2e0>)
 8003b58:	f7fc fbca 	bl	80002f0 <__aeabi_dsub>
 8003b5c:	a368      	add	r3, pc, #416	@ (adr r3, 8003d00 <_dtoa_r+0x2b0>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f7fc fd7d 	bl	8000660 <__aeabi_dmul>
 8003b66:	a368      	add	r3, pc, #416	@ (adr r3, 8003d08 <_dtoa_r+0x2b8>)
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f7fc fbc2 	bl	80002f4 <__adddf3>
 8003b70:	4604      	mov	r4, r0
 8003b72:	4630      	mov	r0, r6
 8003b74:	460d      	mov	r5, r1
 8003b76:	f7fc fd09 	bl	800058c <__aeabi_i2d>
 8003b7a:	a365      	add	r3, pc, #404	@ (adr r3, 8003d10 <_dtoa_r+0x2c0>)
 8003b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b80:	f7fc fd6e 	bl	8000660 <__aeabi_dmul>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	f7fc fbb2 	bl	80002f4 <__adddf3>
 8003b90:	4604      	mov	r4, r0
 8003b92:	460d      	mov	r5, r1
 8003b94:	f7fd f814 	bl	8000bc0 <__aeabi_d2iz>
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4607      	mov	r7, r0
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	f7fc ffcf 	bl	8000b44 <__aeabi_dcmplt>
 8003ba6:	b140      	cbz	r0, 8003bba <_dtoa_r+0x16a>
 8003ba8:	4638      	mov	r0, r7
 8003baa:	f7fc fcef 	bl	800058c <__aeabi_i2d>
 8003bae:	4622      	mov	r2, r4
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	f7fc ffbd 	bl	8000b30 <__aeabi_dcmpeq>
 8003bb6:	b900      	cbnz	r0, 8003bba <_dtoa_r+0x16a>
 8003bb8:	3f01      	subs	r7, #1
 8003bba:	2f16      	cmp	r7, #22
 8003bbc:	d853      	bhi.n	8003c66 <_dtoa_r+0x216>
 8003bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d34 <_dtoa_r+0x2e4>)
 8003bc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f7fc ffba 	bl	8000b44 <__aeabi_dcmplt>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d04a      	beq.n	8003c6a <_dtoa_r+0x21a>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	3f01      	subs	r7, #1
 8003bd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003bda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003bdc:	1b9b      	subs	r3, r3, r6
 8003bde:	1e5a      	subs	r2, r3, #1
 8003be0:	bf46      	itte	mi
 8003be2:	f1c3 0801 	rsbmi	r8, r3, #1
 8003be6:	2300      	movmi	r3, #0
 8003be8:	f04f 0800 	movpl.w	r8, #0
 8003bec:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bee:	bf48      	it	mi
 8003bf0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003bf2:	2f00      	cmp	r7, #0
 8003bf4:	db3b      	blt.n	8003c6e <_dtoa_r+0x21e>
 8003bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bf8:	970e      	str	r7, [sp, #56]	@ 0x38
 8003bfa:	443b      	add	r3, r7
 8003bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bfe:	2300      	movs	r3, #0
 8003c00:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003c04:	2b09      	cmp	r3, #9
 8003c06:	d866      	bhi.n	8003cd6 <_dtoa_r+0x286>
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	bfc4      	itt	gt
 8003c0c:	3b04      	subgt	r3, #4
 8003c0e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003c10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003c12:	bfc8      	it	gt
 8003c14:	2400      	movgt	r4, #0
 8003c16:	f1a3 0302 	sub.w	r3, r3, #2
 8003c1a:	bfd8      	it	le
 8003c1c:	2401      	movle	r4, #1
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d864      	bhi.n	8003cec <_dtoa_r+0x29c>
 8003c22:	e8df f003 	tbb	[pc, r3]
 8003c26:	382b      	.short	0x382b
 8003c28:	5636      	.short	0x5636
 8003c2a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003c2e:	441e      	add	r6, r3
 8003c30:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	bfc1      	itttt	gt
 8003c38:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003c3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003c40:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003c44:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003c48:	bfd6      	itet	le
 8003c4a:	f1c3 0320 	rsble	r3, r3, #32
 8003c4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003c52:	fa04 f003 	lslle.w	r0, r4, r3
 8003c56:	f7fc fc89 	bl	800056c <__aeabi_ui2d>
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003c60:	3e01      	subs	r6, #1
 8003c62:	9212      	str	r2, [sp, #72]	@ 0x48
 8003c64:	e775      	b.n	8003b52 <_dtoa_r+0x102>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e7b6      	b.n	8003bd8 <_dtoa_r+0x188>
 8003c6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003c6c:	e7b5      	b.n	8003bda <_dtoa_r+0x18a>
 8003c6e:	427b      	negs	r3, r7
 8003c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c72:	2300      	movs	r3, #0
 8003c74:	eba8 0807 	sub.w	r8, r8, r7
 8003c78:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c7a:	e7c2      	b.n	8003c02 <_dtoa_r+0x1b2>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	dc35      	bgt.n	8003cf2 <_dtoa_r+0x2a2>
 8003c86:	2301      	movs	r3, #1
 8003c88:	461a      	mov	r2, r3
 8003c8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003c8e:	9221      	str	r2, [sp, #132]	@ 0x84
 8003c90:	e00b      	b.n	8003caa <_dtoa_r+0x25a>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e7f3      	b.n	8003c7e <_dtoa_r+0x22e>
 8003c96:	2300      	movs	r3, #0
 8003c98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	9308      	str	r3, [sp, #32]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	9307      	str	r3, [sp, #28]
 8003ca6:	bfb8      	it	lt
 8003ca8:	2301      	movlt	r3, #1
 8003caa:	2100      	movs	r1, #0
 8003cac:	2204      	movs	r2, #4
 8003cae:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003cb2:	f102 0514 	add.w	r5, r2, #20
 8003cb6:	429d      	cmp	r5, r3
 8003cb8:	d91f      	bls.n	8003cfa <_dtoa_r+0x2aa>
 8003cba:	6041      	str	r1, [r0, #4]
 8003cbc:	4658      	mov	r0, fp
 8003cbe:	f000 fd8d 	bl	80047dc <_Balloc>
 8003cc2:	4682      	mov	sl, r0
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d139      	bne.n	8003d3c <_dtoa_r+0x2ec>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	f240 11af 	movw	r1, #431	@ 0x1af
 8003cce:	4b1a      	ldr	r3, [pc, #104]	@ (8003d38 <_dtoa_r+0x2e8>)
 8003cd0:	e6d2      	b.n	8003a78 <_dtoa_r+0x28>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e7e0      	b.n	8003c98 <_dtoa_r+0x248>
 8003cd6:	2401      	movs	r4, #1
 8003cd8:	2300      	movs	r3, #0
 8003cda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003cdc:	9320      	str	r3, [sp, #128]	@ 0x80
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ce8:	2312      	movs	r3, #18
 8003cea:	e7d0      	b.n	8003c8e <_dtoa_r+0x23e>
 8003cec:	2301      	movs	r3, #1
 8003cee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cf0:	e7f5      	b.n	8003cde <_dtoa_r+0x28e>
 8003cf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003cf4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003cf8:	e7d7      	b.n	8003caa <_dtoa_r+0x25a>
 8003cfa:	3101      	adds	r1, #1
 8003cfc:	0052      	lsls	r2, r2, #1
 8003cfe:	e7d8      	b.n	8003cb2 <_dtoa_r+0x262>
 8003d00:	636f4361 	.word	0x636f4361
 8003d04:	3fd287a7 	.word	0x3fd287a7
 8003d08:	8b60c8b3 	.word	0x8b60c8b3
 8003d0c:	3fc68a28 	.word	0x3fc68a28
 8003d10:	509f79fb 	.word	0x509f79fb
 8003d14:	3fd34413 	.word	0x3fd34413
 8003d18:	08005a5e 	.word	0x08005a5e
 8003d1c:	08005a75 	.word	0x08005a75
 8003d20:	7ff00000 	.word	0x7ff00000
 8003d24:	08005a5a 	.word	0x08005a5a
 8003d28:	08005a2e 	.word	0x08005a2e
 8003d2c:	08005a2d 	.word	0x08005a2d
 8003d30:	3ff80000 	.word	0x3ff80000
 8003d34:	08005b70 	.word	0x08005b70
 8003d38:	08005acd 	.word	0x08005acd
 8003d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d40:	6018      	str	r0, [r3, #0]
 8003d42:	9b07      	ldr	r3, [sp, #28]
 8003d44:	2b0e      	cmp	r3, #14
 8003d46:	f200 80a4 	bhi.w	8003e92 <_dtoa_r+0x442>
 8003d4a:	2c00      	cmp	r4, #0
 8003d4c:	f000 80a1 	beq.w	8003e92 <_dtoa_r+0x442>
 8003d50:	2f00      	cmp	r7, #0
 8003d52:	dd33      	ble.n	8003dbc <_dtoa_r+0x36c>
 8003d54:	4b86      	ldr	r3, [pc, #536]	@ (8003f70 <_dtoa_r+0x520>)
 8003d56:	f007 020f 	and.w	r2, r7, #15
 8003d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d5e:	05f8      	lsls	r0, r7, #23
 8003d60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003d6c:	d516      	bpl.n	8003d9c <_dtoa_r+0x34c>
 8003d6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d72:	4b80      	ldr	r3, [pc, #512]	@ (8003f74 <_dtoa_r+0x524>)
 8003d74:	2603      	movs	r6, #3
 8003d76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d7a:	f7fc fd9b 	bl	80008b4 <__aeabi_ddiv>
 8003d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d82:	f004 040f 	and.w	r4, r4, #15
 8003d86:	4d7b      	ldr	r5, [pc, #492]	@ (8003f74 <_dtoa_r+0x524>)
 8003d88:	b954      	cbnz	r4, 8003da0 <_dtoa_r+0x350>
 8003d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d92:	f7fc fd8f 	bl	80008b4 <__aeabi_ddiv>
 8003d96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d9a:	e028      	b.n	8003dee <_dtoa_r+0x39e>
 8003d9c:	2602      	movs	r6, #2
 8003d9e:	e7f2      	b.n	8003d86 <_dtoa_r+0x336>
 8003da0:	07e1      	lsls	r1, r4, #31
 8003da2:	d508      	bpl.n	8003db6 <_dtoa_r+0x366>
 8003da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003da8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003dac:	f7fc fc58 	bl	8000660 <__aeabi_dmul>
 8003db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003db4:	3601      	adds	r6, #1
 8003db6:	1064      	asrs	r4, r4, #1
 8003db8:	3508      	adds	r5, #8
 8003dba:	e7e5      	b.n	8003d88 <_dtoa_r+0x338>
 8003dbc:	f000 80d2 	beq.w	8003f64 <_dtoa_r+0x514>
 8003dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003dc4:	427c      	negs	r4, r7
 8003dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f70 <_dtoa_r+0x520>)
 8003dc8:	f004 020f 	and.w	r2, r4, #15
 8003dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f7fc fc44 	bl	8000660 <__aeabi_dmul>
 8003dd8:	2602      	movs	r6, #2
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003de0:	4d64      	ldr	r5, [pc, #400]	@ (8003f74 <_dtoa_r+0x524>)
 8003de2:	1124      	asrs	r4, r4, #4
 8003de4:	2c00      	cmp	r4, #0
 8003de6:	f040 80b2 	bne.w	8003f4e <_dtoa_r+0x4fe>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1d3      	bne.n	8003d96 <_dtoa_r+0x346>
 8003dee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003df2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80b7 	beq.w	8003f68 <_dtoa_r+0x518>
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	4b5d      	ldr	r3, [pc, #372]	@ (8003f78 <_dtoa_r+0x528>)
 8003e02:	f7fc fe9f 	bl	8000b44 <__aeabi_dcmplt>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	f000 80ae 	beq.w	8003f68 <_dtoa_r+0x518>
 8003e0c:	9b07      	ldr	r3, [sp, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80aa 	beq.w	8003f68 <_dtoa_r+0x518>
 8003e14:	9b08      	ldr	r3, [sp, #32]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	dd37      	ble.n	8003e8a <_dtoa_r+0x43a>
 8003e1a:	1e7b      	subs	r3, r7, #1
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	9304      	str	r3, [sp, #16]
 8003e20:	2200      	movs	r2, #0
 8003e22:	4629      	mov	r1, r5
 8003e24:	4b55      	ldr	r3, [pc, #340]	@ (8003f7c <_dtoa_r+0x52c>)
 8003e26:	f7fc fc1b 	bl	8000660 <__aeabi_dmul>
 8003e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e2e:	9c08      	ldr	r4, [sp, #32]
 8003e30:	3601      	adds	r6, #1
 8003e32:	4630      	mov	r0, r6
 8003e34:	f7fc fbaa 	bl	800058c <__aeabi_i2d>
 8003e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e3c:	f7fc fc10 	bl	8000660 <__aeabi_dmul>
 8003e40:	2200      	movs	r2, #0
 8003e42:	4b4f      	ldr	r3, [pc, #316]	@ (8003f80 <_dtoa_r+0x530>)
 8003e44:	f7fc fa56 	bl	80002f4 <__adddf3>
 8003e48:	4605      	mov	r5, r0
 8003e4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003e4e:	2c00      	cmp	r4, #0
 8003e50:	f040 809a 	bne.w	8003f88 <_dtoa_r+0x538>
 8003e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f84 <_dtoa_r+0x534>)
 8003e5c:	f7fc fa48 	bl	80002f0 <__aeabi_dsub>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e68:	462a      	mov	r2, r5
 8003e6a:	4633      	mov	r3, r6
 8003e6c:	f7fc fe88 	bl	8000b80 <__aeabi_dcmpgt>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	f040 828e 	bne.w	8004392 <_dtoa_r+0x942>
 8003e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e7a:	462a      	mov	r2, r5
 8003e7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003e80:	f7fc fe60 	bl	8000b44 <__aeabi_dcmplt>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	f040 8127 	bne.w	80040d8 <_dtoa_r+0x688>
 8003e8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003e8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003e92:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f2c0 8163 	blt.w	8004160 <_dtoa_r+0x710>
 8003e9a:	2f0e      	cmp	r7, #14
 8003e9c:	f300 8160 	bgt.w	8004160 <_dtoa_r+0x710>
 8003ea0:	4b33      	ldr	r3, [pc, #204]	@ (8003f70 <_dtoa_r+0x520>)
 8003ea2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ea6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003eaa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003eae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	da03      	bge.n	8003ebc <_dtoa_r+0x46c>
 8003eb4:	9b07      	ldr	r3, [sp, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f340 8100 	ble.w	80040bc <_dtoa_r+0x66c>
 8003ebc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003ec0:	4656      	mov	r6, sl
 8003ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f7fc fcf3 	bl	80008b4 <__aeabi_ddiv>
 8003ece:	f7fc fe77 	bl	8000bc0 <__aeabi_d2iz>
 8003ed2:	4680      	mov	r8, r0
 8003ed4:	f7fc fb5a 	bl	800058c <__aeabi_i2d>
 8003ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003edc:	f7fc fbc0 	bl	8000660 <__aeabi_dmul>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	f7fc fa02 	bl	80002f0 <__aeabi_dsub>
 8003eec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003ef0:	9d07      	ldr	r5, [sp, #28]
 8003ef2:	f806 4b01 	strb.w	r4, [r6], #1
 8003ef6:	eba6 040a 	sub.w	r4, r6, sl
 8003efa:	42a5      	cmp	r5, r4
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	f040 8116 	bne.w	8004130 <_dtoa_r+0x6e0>
 8003f04:	f7fc f9f6 	bl	80002f4 <__adddf3>
 8003f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	460d      	mov	r5, r1
 8003f10:	f7fc fe36 	bl	8000b80 <__aeabi_dcmpgt>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	f040 80f8 	bne.w	800410a <_dtoa_r+0x6ba>
 8003f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f1e:	4620      	mov	r0, r4
 8003f20:	4629      	mov	r1, r5
 8003f22:	f7fc fe05 	bl	8000b30 <__aeabi_dcmpeq>
 8003f26:	b118      	cbz	r0, 8003f30 <_dtoa_r+0x4e0>
 8003f28:	f018 0f01 	tst.w	r8, #1
 8003f2c:	f040 80ed 	bne.w	800410a <_dtoa_r+0x6ba>
 8003f30:	4649      	mov	r1, r9
 8003f32:	4658      	mov	r0, fp
 8003f34:	f000 fc92 	bl	800485c <_Bfree>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	7033      	strb	r3, [r6, #0]
 8003f3c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003f3e:	3701      	adds	r7, #1
 8003f40:	601f      	str	r7, [r3, #0]
 8003f42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8320 	beq.w	800458a <_dtoa_r+0xb3a>
 8003f4a:	601e      	str	r6, [r3, #0]
 8003f4c:	e31d      	b.n	800458a <_dtoa_r+0xb3a>
 8003f4e:	07e2      	lsls	r2, r4, #31
 8003f50:	d505      	bpl.n	8003f5e <_dtoa_r+0x50e>
 8003f52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f56:	f7fc fb83 	bl	8000660 <__aeabi_dmul>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	3601      	adds	r6, #1
 8003f5e:	1064      	asrs	r4, r4, #1
 8003f60:	3508      	adds	r5, #8
 8003f62:	e73f      	b.n	8003de4 <_dtoa_r+0x394>
 8003f64:	2602      	movs	r6, #2
 8003f66:	e742      	b.n	8003dee <_dtoa_r+0x39e>
 8003f68:	9c07      	ldr	r4, [sp, #28]
 8003f6a:	9704      	str	r7, [sp, #16]
 8003f6c:	e761      	b.n	8003e32 <_dtoa_r+0x3e2>
 8003f6e:	bf00      	nop
 8003f70:	08005b70 	.word	0x08005b70
 8003f74:	08005b48 	.word	0x08005b48
 8003f78:	3ff00000 	.word	0x3ff00000
 8003f7c:	40240000 	.word	0x40240000
 8003f80:	401c0000 	.word	0x401c0000
 8003f84:	40140000 	.word	0x40140000
 8003f88:	4b70      	ldr	r3, [pc, #448]	@ (800414c <_dtoa_r+0x6fc>)
 8003f8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003f8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f94:	4454      	add	r4, sl
 8003f96:	2900      	cmp	r1, #0
 8003f98:	d045      	beq.n	8004026 <_dtoa_r+0x5d6>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	496c      	ldr	r1, [pc, #432]	@ (8004150 <_dtoa_r+0x700>)
 8003f9e:	f7fc fc89 	bl	80008b4 <__aeabi_ddiv>
 8003fa2:	4633      	mov	r3, r6
 8003fa4:	462a      	mov	r2, r5
 8003fa6:	f7fc f9a3 	bl	80002f0 <__aeabi_dsub>
 8003faa:	4656      	mov	r6, sl
 8003fac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fb4:	f7fc fe04 	bl	8000bc0 <__aeabi_d2iz>
 8003fb8:	4605      	mov	r5, r0
 8003fba:	f7fc fae7 	bl	800058c <__aeabi_i2d>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fc6:	f7fc f993 	bl	80002f0 <__aeabi_dsub>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	3530      	adds	r5, #48	@ 0x30
 8003fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003fd8:	f806 5b01 	strb.w	r5, [r6], #1
 8003fdc:	f7fc fdb2 	bl	8000b44 <__aeabi_dcmplt>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d163      	bne.n	80040ac <_dtoa_r+0x65c>
 8003fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fe8:	2000      	movs	r0, #0
 8003fea:	495a      	ldr	r1, [pc, #360]	@ (8004154 <_dtoa_r+0x704>)
 8003fec:	f7fc f980 	bl	80002f0 <__aeabi_dsub>
 8003ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003ff4:	f7fc fda6 	bl	8000b44 <__aeabi_dcmplt>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	f040 8087 	bne.w	800410c <_dtoa_r+0x6bc>
 8003ffe:	42a6      	cmp	r6, r4
 8004000:	f43f af43 	beq.w	8003e8a <_dtoa_r+0x43a>
 8004004:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004008:	2200      	movs	r2, #0
 800400a:	4b53      	ldr	r3, [pc, #332]	@ (8004158 <_dtoa_r+0x708>)
 800400c:	f7fc fb28 	bl	8000660 <__aeabi_dmul>
 8004010:	2200      	movs	r2, #0
 8004012:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800401a:	4b4f      	ldr	r3, [pc, #316]	@ (8004158 <_dtoa_r+0x708>)
 800401c:	f7fc fb20 	bl	8000660 <__aeabi_dmul>
 8004020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004024:	e7c4      	b.n	8003fb0 <_dtoa_r+0x560>
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	f7fc fb19 	bl	8000660 <__aeabi_dmul>
 800402e:	4656      	mov	r6, sl
 8004030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004034:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800403a:	f7fc fdc1 	bl	8000bc0 <__aeabi_d2iz>
 800403e:	4605      	mov	r5, r0
 8004040:	f7fc faa4 	bl	800058c <__aeabi_i2d>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800404c:	f7fc f950 	bl	80002f0 <__aeabi_dsub>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	3530      	adds	r5, #48	@ 0x30
 8004056:	f806 5b01 	strb.w	r5, [r6], #1
 800405a:	42a6      	cmp	r6, r4
 800405c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	d124      	bne.n	80040b0 <_dtoa_r+0x660>
 8004066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800406a:	4b39      	ldr	r3, [pc, #228]	@ (8004150 <_dtoa_r+0x700>)
 800406c:	f7fc f942 	bl	80002f4 <__adddf3>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004078:	f7fc fd82 	bl	8000b80 <__aeabi_dcmpgt>
 800407c:	2800      	cmp	r0, #0
 800407e:	d145      	bne.n	800410c <_dtoa_r+0x6bc>
 8004080:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004084:	2000      	movs	r0, #0
 8004086:	4932      	ldr	r1, [pc, #200]	@ (8004150 <_dtoa_r+0x700>)
 8004088:	f7fc f932 	bl	80002f0 <__aeabi_dsub>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004094:	f7fc fd56 	bl	8000b44 <__aeabi_dcmplt>
 8004098:	2800      	cmp	r0, #0
 800409a:	f43f aef6 	beq.w	8003e8a <_dtoa_r+0x43a>
 800409e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80040a0:	1e73      	subs	r3, r6, #1
 80040a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80040a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80040a8:	2b30      	cmp	r3, #48	@ 0x30
 80040aa:	d0f8      	beq.n	800409e <_dtoa_r+0x64e>
 80040ac:	9f04      	ldr	r7, [sp, #16]
 80040ae:	e73f      	b.n	8003f30 <_dtoa_r+0x4e0>
 80040b0:	4b29      	ldr	r3, [pc, #164]	@ (8004158 <_dtoa_r+0x708>)
 80040b2:	f7fc fad5 	bl	8000660 <__aeabi_dmul>
 80040b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040ba:	e7bc      	b.n	8004036 <_dtoa_r+0x5e6>
 80040bc:	d10c      	bne.n	80040d8 <_dtoa_r+0x688>
 80040be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040c2:	2200      	movs	r2, #0
 80040c4:	4b25      	ldr	r3, [pc, #148]	@ (800415c <_dtoa_r+0x70c>)
 80040c6:	f7fc facb 	bl	8000660 <__aeabi_dmul>
 80040ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040ce:	f7fc fd4d 	bl	8000b6c <__aeabi_dcmpge>
 80040d2:	2800      	cmp	r0, #0
 80040d4:	f000 815b 	beq.w	800438e <_dtoa_r+0x93e>
 80040d8:	2400      	movs	r4, #0
 80040da:	4625      	mov	r5, r4
 80040dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80040de:	4656      	mov	r6, sl
 80040e0:	43db      	mvns	r3, r3
 80040e2:	9304      	str	r3, [sp, #16]
 80040e4:	2700      	movs	r7, #0
 80040e6:	4621      	mov	r1, r4
 80040e8:	4658      	mov	r0, fp
 80040ea:	f000 fbb7 	bl	800485c <_Bfree>
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	d0dc      	beq.n	80040ac <_dtoa_r+0x65c>
 80040f2:	b12f      	cbz	r7, 8004100 <_dtoa_r+0x6b0>
 80040f4:	42af      	cmp	r7, r5
 80040f6:	d003      	beq.n	8004100 <_dtoa_r+0x6b0>
 80040f8:	4639      	mov	r1, r7
 80040fa:	4658      	mov	r0, fp
 80040fc:	f000 fbae 	bl	800485c <_Bfree>
 8004100:	4629      	mov	r1, r5
 8004102:	4658      	mov	r0, fp
 8004104:	f000 fbaa 	bl	800485c <_Bfree>
 8004108:	e7d0      	b.n	80040ac <_dtoa_r+0x65c>
 800410a:	9704      	str	r7, [sp, #16]
 800410c:	4633      	mov	r3, r6
 800410e:	461e      	mov	r6, r3
 8004110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004114:	2a39      	cmp	r2, #57	@ 0x39
 8004116:	d107      	bne.n	8004128 <_dtoa_r+0x6d8>
 8004118:	459a      	cmp	sl, r3
 800411a:	d1f8      	bne.n	800410e <_dtoa_r+0x6be>
 800411c:	9a04      	ldr	r2, [sp, #16]
 800411e:	3201      	adds	r2, #1
 8004120:	9204      	str	r2, [sp, #16]
 8004122:	2230      	movs	r2, #48	@ 0x30
 8004124:	f88a 2000 	strb.w	r2, [sl]
 8004128:	781a      	ldrb	r2, [r3, #0]
 800412a:	3201      	adds	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e7bd      	b.n	80040ac <_dtoa_r+0x65c>
 8004130:	2200      	movs	r2, #0
 8004132:	4b09      	ldr	r3, [pc, #36]	@ (8004158 <_dtoa_r+0x708>)
 8004134:	f7fc fa94 	bl	8000660 <__aeabi_dmul>
 8004138:	2200      	movs	r2, #0
 800413a:	2300      	movs	r3, #0
 800413c:	4604      	mov	r4, r0
 800413e:	460d      	mov	r5, r1
 8004140:	f7fc fcf6 	bl	8000b30 <__aeabi_dcmpeq>
 8004144:	2800      	cmp	r0, #0
 8004146:	f43f aebc 	beq.w	8003ec2 <_dtoa_r+0x472>
 800414a:	e6f1      	b.n	8003f30 <_dtoa_r+0x4e0>
 800414c:	08005b70 	.word	0x08005b70
 8004150:	3fe00000 	.word	0x3fe00000
 8004154:	3ff00000 	.word	0x3ff00000
 8004158:	40240000 	.word	0x40240000
 800415c:	40140000 	.word	0x40140000
 8004160:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004162:	2a00      	cmp	r2, #0
 8004164:	f000 80db 	beq.w	800431e <_dtoa_r+0x8ce>
 8004168:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800416a:	2a01      	cmp	r2, #1
 800416c:	f300 80bf 	bgt.w	80042ee <_dtoa_r+0x89e>
 8004170:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004172:	2a00      	cmp	r2, #0
 8004174:	f000 80b7 	beq.w	80042e6 <_dtoa_r+0x896>
 8004178:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800417c:	4646      	mov	r6, r8
 800417e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004182:	2101      	movs	r1, #1
 8004184:	441a      	add	r2, r3
 8004186:	4658      	mov	r0, fp
 8004188:	4498      	add	r8, r3
 800418a:	9209      	str	r2, [sp, #36]	@ 0x24
 800418c:	f000 fc1a 	bl	80049c4 <__i2b>
 8004190:	4605      	mov	r5, r0
 8004192:	b15e      	cbz	r6, 80041ac <_dtoa_r+0x75c>
 8004194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	dd08      	ble.n	80041ac <_dtoa_r+0x75c>
 800419a:	42b3      	cmp	r3, r6
 800419c:	bfa8      	it	ge
 800419e:	4633      	movge	r3, r6
 80041a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041a2:	eba8 0803 	sub.w	r8, r8, r3
 80041a6:	1af6      	subs	r6, r6, r3
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041ae:	b1f3      	cbz	r3, 80041ee <_dtoa_r+0x79e>
 80041b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80b7 	beq.w	8004326 <_dtoa_r+0x8d6>
 80041b8:	b18c      	cbz	r4, 80041de <_dtoa_r+0x78e>
 80041ba:	4629      	mov	r1, r5
 80041bc:	4622      	mov	r2, r4
 80041be:	4658      	mov	r0, fp
 80041c0:	f000 fcbe 	bl	8004b40 <__pow5mult>
 80041c4:	464a      	mov	r2, r9
 80041c6:	4601      	mov	r1, r0
 80041c8:	4605      	mov	r5, r0
 80041ca:	4658      	mov	r0, fp
 80041cc:	f000 fc10 	bl	80049f0 <__multiply>
 80041d0:	4649      	mov	r1, r9
 80041d2:	9004      	str	r0, [sp, #16]
 80041d4:	4658      	mov	r0, fp
 80041d6:	f000 fb41 	bl	800485c <_Bfree>
 80041da:	9b04      	ldr	r3, [sp, #16]
 80041dc:	4699      	mov	r9, r3
 80041de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041e0:	1b1a      	subs	r2, r3, r4
 80041e2:	d004      	beq.n	80041ee <_dtoa_r+0x79e>
 80041e4:	4649      	mov	r1, r9
 80041e6:	4658      	mov	r0, fp
 80041e8:	f000 fcaa 	bl	8004b40 <__pow5mult>
 80041ec:	4681      	mov	r9, r0
 80041ee:	2101      	movs	r1, #1
 80041f0:	4658      	mov	r0, fp
 80041f2:	f000 fbe7 	bl	80049c4 <__i2b>
 80041f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041f8:	4604      	mov	r4, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 81c9 	beq.w	8004592 <_dtoa_r+0xb42>
 8004200:	461a      	mov	r2, r3
 8004202:	4601      	mov	r1, r0
 8004204:	4658      	mov	r0, fp
 8004206:	f000 fc9b 	bl	8004b40 <__pow5mult>
 800420a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800420c:	4604      	mov	r4, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	f300 808f 	bgt.w	8004332 <_dtoa_r+0x8e2>
 8004214:	9b02      	ldr	r3, [sp, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f040 8087 	bne.w	800432a <_dtoa_r+0x8da>
 800421c:	9b03      	ldr	r3, [sp, #12]
 800421e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 8083 	bne.w	800432e <_dtoa_r+0x8de>
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800422e:	0d1b      	lsrs	r3, r3, #20
 8004230:	051b      	lsls	r3, r3, #20
 8004232:	b12b      	cbz	r3, 8004240 <_dtoa_r+0x7f0>
 8004234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004236:	f108 0801 	add.w	r8, r8, #1
 800423a:	3301      	adds	r3, #1
 800423c:	9309      	str	r3, [sp, #36]	@ 0x24
 800423e:	2301      	movs	r3, #1
 8004240:	930a      	str	r3, [sp, #40]	@ 0x28
 8004242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 81aa 	beq.w	800459e <_dtoa_r+0xb4e>
 800424a:	6923      	ldr	r3, [r4, #16]
 800424c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004250:	6918      	ldr	r0, [r3, #16]
 8004252:	f000 fb6b 	bl	800492c <__hi0bits>
 8004256:	f1c0 0020 	rsb	r0, r0, #32
 800425a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800425c:	4418      	add	r0, r3
 800425e:	f010 001f 	ands.w	r0, r0, #31
 8004262:	d071      	beq.n	8004348 <_dtoa_r+0x8f8>
 8004264:	f1c0 0320 	rsb	r3, r0, #32
 8004268:	2b04      	cmp	r3, #4
 800426a:	dd65      	ble.n	8004338 <_dtoa_r+0x8e8>
 800426c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800426e:	f1c0 001c 	rsb	r0, r0, #28
 8004272:	4403      	add	r3, r0
 8004274:	4480      	add	r8, r0
 8004276:	4406      	add	r6, r0
 8004278:	9309      	str	r3, [sp, #36]	@ 0x24
 800427a:	f1b8 0f00 	cmp.w	r8, #0
 800427e:	dd05      	ble.n	800428c <_dtoa_r+0x83c>
 8004280:	4649      	mov	r1, r9
 8004282:	4642      	mov	r2, r8
 8004284:	4658      	mov	r0, fp
 8004286:	f000 fcb5 	bl	8004bf4 <__lshift>
 800428a:	4681      	mov	r9, r0
 800428c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	dd05      	ble.n	800429e <_dtoa_r+0x84e>
 8004292:	4621      	mov	r1, r4
 8004294:	461a      	mov	r2, r3
 8004296:	4658      	mov	r0, fp
 8004298:	f000 fcac 	bl	8004bf4 <__lshift>
 800429c:	4604      	mov	r4, r0
 800429e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d053      	beq.n	800434c <_dtoa_r+0x8fc>
 80042a4:	4621      	mov	r1, r4
 80042a6:	4648      	mov	r0, r9
 80042a8:	f000 fd10 	bl	8004ccc <__mcmp>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	da4d      	bge.n	800434c <_dtoa_r+0x8fc>
 80042b0:	1e7b      	subs	r3, r7, #1
 80042b2:	4649      	mov	r1, r9
 80042b4:	9304      	str	r3, [sp, #16]
 80042b6:	220a      	movs	r2, #10
 80042b8:	2300      	movs	r3, #0
 80042ba:	4658      	mov	r0, fp
 80042bc:	f000 faf0 	bl	80048a0 <__multadd>
 80042c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042c2:	4681      	mov	r9, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 816c 	beq.w	80045a2 <_dtoa_r+0xb52>
 80042ca:	2300      	movs	r3, #0
 80042cc:	4629      	mov	r1, r5
 80042ce:	220a      	movs	r2, #10
 80042d0:	4658      	mov	r0, fp
 80042d2:	f000 fae5 	bl	80048a0 <__multadd>
 80042d6:	9b08      	ldr	r3, [sp, #32]
 80042d8:	4605      	mov	r5, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	dc61      	bgt.n	80043a2 <_dtoa_r+0x952>
 80042de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	dc3b      	bgt.n	800435c <_dtoa_r+0x90c>
 80042e4:	e05d      	b.n	80043a2 <_dtoa_r+0x952>
 80042e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80042e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80042ec:	e746      	b.n	800417c <_dtoa_r+0x72c>
 80042ee:	9b07      	ldr	r3, [sp, #28]
 80042f0:	1e5c      	subs	r4, r3, #1
 80042f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	bfbf      	itttt	lt
 80042f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80042fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80042fc:	1ae3      	sublt	r3, r4, r3
 80042fe:	18d2      	addlt	r2, r2, r3
 8004300:	bfa8      	it	ge
 8004302:	1b1c      	subge	r4, r3, r4
 8004304:	9b07      	ldr	r3, [sp, #28]
 8004306:	bfbe      	ittt	lt
 8004308:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800430a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800430c:	2400      	movlt	r4, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	bfb5      	itete	lt
 8004312:	eba8 0603 	sublt.w	r6, r8, r3
 8004316:	4646      	movge	r6, r8
 8004318:	2300      	movlt	r3, #0
 800431a:	9b07      	ldrge	r3, [sp, #28]
 800431c:	e730      	b.n	8004180 <_dtoa_r+0x730>
 800431e:	4646      	mov	r6, r8
 8004320:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004322:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004324:	e735      	b.n	8004192 <_dtoa_r+0x742>
 8004326:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004328:	e75c      	b.n	80041e4 <_dtoa_r+0x794>
 800432a:	2300      	movs	r3, #0
 800432c:	e788      	b.n	8004240 <_dtoa_r+0x7f0>
 800432e:	9b02      	ldr	r3, [sp, #8]
 8004330:	e786      	b.n	8004240 <_dtoa_r+0x7f0>
 8004332:	2300      	movs	r3, #0
 8004334:	930a      	str	r3, [sp, #40]	@ 0x28
 8004336:	e788      	b.n	800424a <_dtoa_r+0x7fa>
 8004338:	d09f      	beq.n	800427a <_dtoa_r+0x82a>
 800433a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800433c:	331c      	adds	r3, #28
 800433e:	441a      	add	r2, r3
 8004340:	4498      	add	r8, r3
 8004342:	441e      	add	r6, r3
 8004344:	9209      	str	r2, [sp, #36]	@ 0x24
 8004346:	e798      	b.n	800427a <_dtoa_r+0x82a>
 8004348:	4603      	mov	r3, r0
 800434a:	e7f6      	b.n	800433a <_dtoa_r+0x8ea>
 800434c:	9b07      	ldr	r3, [sp, #28]
 800434e:	9704      	str	r7, [sp, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	dc20      	bgt.n	8004396 <_dtoa_r+0x946>
 8004354:	9308      	str	r3, [sp, #32]
 8004356:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004358:	2b02      	cmp	r3, #2
 800435a:	dd1e      	ble.n	800439a <_dtoa_r+0x94a>
 800435c:	9b08      	ldr	r3, [sp, #32]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f47f aebc 	bne.w	80040dc <_dtoa_r+0x68c>
 8004364:	4621      	mov	r1, r4
 8004366:	2205      	movs	r2, #5
 8004368:	4658      	mov	r0, fp
 800436a:	f000 fa99 	bl	80048a0 <__multadd>
 800436e:	4601      	mov	r1, r0
 8004370:	4604      	mov	r4, r0
 8004372:	4648      	mov	r0, r9
 8004374:	f000 fcaa 	bl	8004ccc <__mcmp>
 8004378:	2800      	cmp	r0, #0
 800437a:	f77f aeaf 	ble.w	80040dc <_dtoa_r+0x68c>
 800437e:	2331      	movs	r3, #49	@ 0x31
 8004380:	4656      	mov	r6, sl
 8004382:	f806 3b01 	strb.w	r3, [r6], #1
 8004386:	9b04      	ldr	r3, [sp, #16]
 8004388:	3301      	adds	r3, #1
 800438a:	9304      	str	r3, [sp, #16]
 800438c:	e6aa      	b.n	80040e4 <_dtoa_r+0x694>
 800438e:	9c07      	ldr	r4, [sp, #28]
 8004390:	9704      	str	r7, [sp, #16]
 8004392:	4625      	mov	r5, r4
 8004394:	e7f3      	b.n	800437e <_dtoa_r+0x92e>
 8004396:	9b07      	ldr	r3, [sp, #28]
 8004398:	9308      	str	r3, [sp, #32]
 800439a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8104 	beq.w	80045aa <_dtoa_r+0xb5a>
 80043a2:	2e00      	cmp	r6, #0
 80043a4:	dd05      	ble.n	80043b2 <_dtoa_r+0x962>
 80043a6:	4629      	mov	r1, r5
 80043a8:	4632      	mov	r2, r6
 80043aa:	4658      	mov	r0, fp
 80043ac:	f000 fc22 	bl	8004bf4 <__lshift>
 80043b0:	4605      	mov	r5, r0
 80043b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d05a      	beq.n	800446e <_dtoa_r+0xa1e>
 80043b8:	4658      	mov	r0, fp
 80043ba:	6869      	ldr	r1, [r5, #4]
 80043bc:	f000 fa0e 	bl	80047dc <_Balloc>
 80043c0:	4606      	mov	r6, r0
 80043c2:	b928      	cbnz	r0, 80043d0 <_dtoa_r+0x980>
 80043c4:	4602      	mov	r2, r0
 80043c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80043ca:	4b83      	ldr	r3, [pc, #524]	@ (80045d8 <_dtoa_r+0xb88>)
 80043cc:	f7ff bb54 	b.w	8003a78 <_dtoa_r+0x28>
 80043d0:	692a      	ldr	r2, [r5, #16]
 80043d2:	f105 010c 	add.w	r1, r5, #12
 80043d6:	3202      	adds	r2, #2
 80043d8:	0092      	lsls	r2, r2, #2
 80043da:	300c      	adds	r0, #12
 80043dc:	f000 ffa8 	bl	8005330 <memcpy>
 80043e0:	2201      	movs	r2, #1
 80043e2:	4631      	mov	r1, r6
 80043e4:	4658      	mov	r0, fp
 80043e6:	f000 fc05 	bl	8004bf4 <__lshift>
 80043ea:	462f      	mov	r7, r5
 80043ec:	4605      	mov	r5, r0
 80043ee:	f10a 0301 	add.w	r3, sl, #1
 80043f2:	9307      	str	r3, [sp, #28]
 80043f4:	9b08      	ldr	r3, [sp, #32]
 80043f6:	4453      	add	r3, sl
 80043f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043fa:	9b02      	ldr	r3, [sp, #8]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	930a      	str	r3, [sp, #40]	@ 0x28
 8004402:	9b07      	ldr	r3, [sp, #28]
 8004404:	4621      	mov	r1, r4
 8004406:	3b01      	subs	r3, #1
 8004408:	4648      	mov	r0, r9
 800440a:	9302      	str	r3, [sp, #8]
 800440c:	f7ff fa95 	bl	800393a <quorem>
 8004410:	4639      	mov	r1, r7
 8004412:	9008      	str	r0, [sp, #32]
 8004414:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004418:	4648      	mov	r0, r9
 800441a:	f000 fc57 	bl	8004ccc <__mcmp>
 800441e:	462a      	mov	r2, r5
 8004420:	9009      	str	r0, [sp, #36]	@ 0x24
 8004422:	4621      	mov	r1, r4
 8004424:	4658      	mov	r0, fp
 8004426:	f000 fc6d 	bl	8004d04 <__mdiff>
 800442a:	68c2      	ldr	r2, [r0, #12]
 800442c:	4606      	mov	r6, r0
 800442e:	bb02      	cbnz	r2, 8004472 <_dtoa_r+0xa22>
 8004430:	4601      	mov	r1, r0
 8004432:	4648      	mov	r0, r9
 8004434:	f000 fc4a 	bl	8004ccc <__mcmp>
 8004438:	4602      	mov	r2, r0
 800443a:	4631      	mov	r1, r6
 800443c:	4658      	mov	r0, fp
 800443e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004440:	f000 fa0c 	bl	800485c <_Bfree>
 8004444:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004446:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004448:	9e07      	ldr	r6, [sp, #28]
 800444a:	ea43 0102 	orr.w	r1, r3, r2
 800444e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004450:	4319      	orrs	r1, r3
 8004452:	d110      	bne.n	8004476 <_dtoa_r+0xa26>
 8004454:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004458:	d029      	beq.n	80044ae <_dtoa_r+0xa5e>
 800445a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800445c:	2b00      	cmp	r3, #0
 800445e:	dd02      	ble.n	8004466 <_dtoa_r+0xa16>
 8004460:	9b08      	ldr	r3, [sp, #32]
 8004462:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004466:	9b02      	ldr	r3, [sp, #8]
 8004468:	f883 8000 	strb.w	r8, [r3]
 800446c:	e63b      	b.n	80040e6 <_dtoa_r+0x696>
 800446e:	4628      	mov	r0, r5
 8004470:	e7bb      	b.n	80043ea <_dtoa_r+0x99a>
 8004472:	2201      	movs	r2, #1
 8004474:	e7e1      	b.n	800443a <_dtoa_r+0x9ea>
 8004476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004478:	2b00      	cmp	r3, #0
 800447a:	db04      	blt.n	8004486 <_dtoa_r+0xa36>
 800447c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800447e:	430b      	orrs	r3, r1
 8004480:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004482:	430b      	orrs	r3, r1
 8004484:	d120      	bne.n	80044c8 <_dtoa_r+0xa78>
 8004486:	2a00      	cmp	r2, #0
 8004488:	dded      	ble.n	8004466 <_dtoa_r+0xa16>
 800448a:	4649      	mov	r1, r9
 800448c:	2201      	movs	r2, #1
 800448e:	4658      	mov	r0, fp
 8004490:	f000 fbb0 	bl	8004bf4 <__lshift>
 8004494:	4621      	mov	r1, r4
 8004496:	4681      	mov	r9, r0
 8004498:	f000 fc18 	bl	8004ccc <__mcmp>
 800449c:	2800      	cmp	r0, #0
 800449e:	dc03      	bgt.n	80044a8 <_dtoa_r+0xa58>
 80044a0:	d1e1      	bne.n	8004466 <_dtoa_r+0xa16>
 80044a2:	f018 0f01 	tst.w	r8, #1
 80044a6:	d0de      	beq.n	8004466 <_dtoa_r+0xa16>
 80044a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80044ac:	d1d8      	bne.n	8004460 <_dtoa_r+0xa10>
 80044ae:	2339      	movs	r3, #57	@ 0x39
 80044b0:	9a02      	ldr	r2, [sp, #8]
 80044b2:	7013      	strb	r3, [r2, #0]
 80044b4:	4633      	mov	r3, r6
 80044b6:	461e      	mov	r6, r3
 80044b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80044bc:	3b01      	subs	r3, #1
 80044be:	2a39      	cmp	r2, #57	@ 0x39
 80044c0:	d052      	beq.n	8004568 <_dtoa_r+0xb18>
 80044c2:	3201      	adds	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e60e      	b.n	80040e6 <_dtoa_r+0x696>
 80044c8:	2a00      	cmp	r2, #0
 80044ca:	dd07      	ble.n	80044dc <_dtoa_r+0xa8c>
 80044cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80044d0:	d0ed      	beq.n	80044ae <_dtoa_r+0xa5e>
 80044d2:	9a02      	ldr	r2, [sp, #8]
 80044d4:	f108 0301 	add.w	r3, r8, #1
 80044d8:	7013      	strb	r3, [r2, #0]
 80044da:	e604      	b.n	80040e6 <_dtoa_r+0x696>
 80044dc:	9b07      	ldr	r3, [sp, #28]
 80044de:	9a07      	ldr	r2, [sp, #28]
 80044e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80044e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d028      	beq.n	800453c <_dtoa_r+0xaec>
 80044ea:	4649      	mov	r1, r9
 80044ec:	2300      	movs	r3, #0
 80044ee:	220a      	movs	r2, #10
 80044f0:	4658      	mov	r0, fp
 80044f2:	f000 f9d5 	bl	80048a0 <__multadd>
 80044f6:	42af      	cmp	r7, r5
 80044f8:	4681      	mov	r9, r0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	f04f 020a 	mov.w	r2, #10
 8004502:	4639      	mov	r1, r7
 8004504:	4658      	mov	r0, fp
 8004506:	d107      	bne.n	8004518 <_dtoa_r+0xac8>
 8004508:	f000 f9ca 	bl	80048a0 <__multadd>
 800450c:	4607      	mov	r7, r0
 800450e:	4605      	mov	r5, r0
 8004510:	9b07      	ldr	r3, [sp, #28]
 8004512:	3301      	adds	r3, #1
 8004514:	9307      	str	r3, [sp, #28]
 8004516:	e774      	b.n	8004402 <_dtoa_r+0x9b2>
 8004518:	f000 f9c2 	bl	80048a0 <__multadd>
 800451c:	4629      	mov	r1, r5
 800451e:	4607      	mov	r7, r0
 8004520:	2300      	movs	r3, #0
 8004522:	220a      	movs	r2, #10
 8004524:	4658      	mov	r0, fp
 8004526:	f000 f9bb 	bl	80048a0 <__multadd>
 800452a:	4605      	mov	r5, r0
 800452c:	e7f0      	b.n	8004510 <_dtoa_r+0xac0>
 800452e:	9b08      	ldr	r3, [sp, #32]
 8004530:	2700      	movs	r7, #0
 8004532:	2b00      	cmp	r3, #0
 8004534:	bfcc      	ite	gt
 8004536:	461e      	movgt	r6, r3
 8004538:	2601      	movle	r6, #1
 800453a:	4456      	add	r6, sl
 800453c:	4649      	mov	r1, r9
 800453e:	2201      	movs	r2, #1
 8004540:	4658      	mov	r0, fp
 8004542:	f000 fb57 	bl	8004bf4 <__lshift>
 8004546:	4621      	mov	r1, r4
 8004548:	4681      	mov	r9, r0
 800454a:	f000 fbbf 	bl	8004ccc <__mcmp>
 800454e:	2800      	cmp	r0, #0
 8004550:	dcb0      	bgt.n	80044b4 <_dtoa_r+0xa64>
 8004552:	d102      	bne.n	800455a <_dtoa_r+0xb0a>
 8004554:	f018 0f01 	tst.w	r8, #1
 8004558:	d1ac      	bne.n	80044b4 <_dtoa_r+0xa64>
 800455a:	4633      	mov	r3, r6
 800455c:	461e      	mov	r6, r3
 800455e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004562:	2a30      	cmp	r2, #48	@ 0x30
 8004564:	d0fa      	beq.n	800455c <_dtoa_r+0xb0c>
 8004566:	e5be      	b.n	80040e6 <_dtoa_r+0x696>
 8004568:	459a      	cmp	sl, r3
 800456a:	d1a4      	bne.n	80044b6 <_dtoa_r+0xa66>
 800456c:	9b04      	ldr	r3, [sp, #16]
 800456e:	3301      	adds	r3, #1
 8004570:	9304      	str	r3, [sp, #16]
 8004572:	2331      	movs	r3, #49	@ 0x31
 8004574:	f88a 3000 	strb.w	r3, [sl]
 8004578:	e5b5      	b.n	80040e6 <_dtoa_r+0x696>
 800457a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800457c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80045dc <_dtoa_r+0xb8c>
 8004580:	b11b      	cbz	r3, 800458a <_dtoa_r+0xb3a>
 8004582:	f10a 0308 	add.w	r3, sl, #8
 8004586:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4650      	mov	r0, sl
 800458c:	b017      	add	sp, #92	@ 0x5c
 800458e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004592:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004594:	2b01      	cmp	r3, #1
 8004596:	f77f ae3d 	ble.w	8004214 <_dtoa_r+0x7c4>
 800459a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800459c:	930a      	str	r3, [sp, #40]	@ 0x28
 800459e:	2001      	movs	r0, #1
 80045a0:	e65b      	b.n	800425a <_dtoa_r+0x80a>
 80045a2:	9b08      	ldr	r3, [sp, #32]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f77f aed6 	ble.w	8004356 <_dtoa_r+0x906>
 80045aa:	4656      	mov	r6, sl
 80045ac:	4621      	mov	r1, r4
 80045ae:	4648      	mov	r0, r9
 80045b0:	f7ff f9c3 	bl	800393a <quorem>
 80045b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80045b8:	9b08      	ldr	r3, [sp, #32]
 80045ba:	f806 8b01 	strb.w	r8, [r6], #1
 80045be:	eba6 020a 	sub.w	r2, r6, sl
 80045c2:	4293      	cmp	r3, r2
 80045c4:	ddb3      	ble.n	800452e <_dtoa_r+0xade>
 80045c6:	4649      	mov	r1, r9
 80045c8:	2300      	movs	r3, #0
 80045ca:	220a      	movs	r2, #10
 80045cc:	4658      	mov	r0, fp
 80045ce:	f000 f967 	bl	80048a0 <__multadd>
 80045d2:	4681      	mov	r9, r0
 80045d4:	e7ea      	b.n	80045ac <_dtoa_r+0xb5c>
 80045d6:	bf00      	nop
 80045d8:	08005acd 	.word	0x08005acd
 80045dc:	08005a51 	.word	0x08005a51

080045e0 <_free_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4605      	mov	r5, r0
 80045e4:	2900      	cmp	r1, #0
 80045e6:	d040      	beq.n	800466a <_free_r+0x8a>
 80045e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ec:	1f0c      	subs	r4, r1, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfb8      	it	lt
 80045f2:	18e4      	addlt	r4, r4, r3
 80045f4:	f000 f8e6 	bl	80047c4 <__malloc_lock>
 80045f8:	4a1c      	ldr	r2, [pc, #112]	@ (800466c <_free_r+0x8c>)
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	b933      	cbnz	r3, 800460c <_free_r+0x2c>
 80045fe:	6063      	str	r3, [r4, #4]
 8004600:	6014      	str	r4, [r2, #0]
 8004602:	4628      	mov	r0, r5
 8004604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004608:	f000 b8e2 	b.w	80047d0 <__malloc_unlock>
 800460c:	42a3      	cmp	r3, r4
 800460e:	d908      	bls.n	8004622 <_free_r+0x42>
 8004610:	6820      	ldr	r0, [r4, #0]
 8004612:	1821      	adds	r1, r4, r0
 8004614:	428b      	cmp	r3, r1
 8004616:	bf01      	itttt	eq
 8004618:	6819      	ldreq	r1, [r3, #0]
 800461a:	685b      	ldreq	r3, [r3, #4]
 800461c:	1809      	addeq	r1, r1, r0
 800461e:	6021      	streq	r1, [r4, #0]
 8004620:	e7ed      	b.n	80045fe <_free_r+0x1e>
 8004622:	461a      	mov	r2, r3
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	b10b      	cbz	r3, 800462c <_free_r+0x4c>
 8004628:	42a3      	cmp	r3, r4
 800462a:	d9fa      	bls.n	8004622 <_free_r+0x42>
 800462c:	6811      	ldr	r1, [r2, #0]
 800462e:	1850      	adds	r0, r2, r1
 8004630:	42a0      	cmp	r0, r4
 8004632:	d10b      	bne.n	800464c <_free_r+0x6c>
 8004634:	6820      	ldr	r0, [r4, #0]
 8004636:	4401      	add	r1, r0
 8004638:	1850      	adds	r0, r2, r1
 800463a:	4283      	cmp	r3, r0
 800463c:	6011      	str	r1, [r2, #0]
 800463e:	d1e0      	bne.n	8004602 <_free_r+0x22>
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4408      	add	r0, r1
 8004646:	6010      	str	r0, [r2, #0]
 8004648:	6053      	str	r3, [r2, #4]
 800464a:	e7da      	b.n	8004602 <_free_r+0x22>
 800464c:	d902      	bls.n	8004654 <_free_r+0x74>
 800464e:	230c      	movs	r3, #12
 8004650:	602b      	str	r3, [r5, #0]
 8004652:	e7d6      	b.n	8004602 <_free_r+0x22>
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	1821      	adds	r1, r4, r0
 8004658:	428b      	cmp	r3, r1
 800465a:	bf01      	itttt	eq
 800465c:	6819      	ldreq	r1, [r3, #0]
 800465e:	685b      	ldreq	r3, [r3, #4]
 8004660:	1809      	addeq	r1, r1, r0
 8004662:	6021      	streq	r1, [r4, #0]
 8004664:	6063      	str	r3, [r4, #4]
 8004666:	6054      	str	r4, [r2, #4]
 8004668:	e7cb      	b.n	8004602 <_free_r+0x22>
 800466a:	bd38      	pop	{r3, r4, r5, pc}
 800466c:	200006fc 	.word	0x200006fc

08004670 <malloc>:
 8004670:	4b02      	ldr	r3, [pc, #8]	@ (800467c <malloc+0xc>)
 8004672:	4601      	mov	r1, r0
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	f000 b825 	b.w	80046c4 <_malloc_r>
 800467a:	bf00      	nop
 800467c:	200000d0 	.word	0x200000d0

08004680 <sbrk_aligned>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	4e0f      	ldr	r6, [pc, #60]	@ (80046c0 <sbrk_aligned+0x40>)
 8004684:	460c      	mov	r4, r1
 8004686:	6831      	ldr	r1, [r6, #0]
 8004688:	4605      	mov	r5, r0
 800468a:	b911      	cbnz	r1, 8004692 <sbrk_aligned+0x12>
 800468c:	f000 fe40 	bl	8005310 <_sbrk_r>
 8004690:	6030      	str	r0, [r6, #0]
 8004692:	4621      	mov	r1, r4
 8004694:	4628      	mov	r0, r5
 8004696:	f000 fe3b 	bl	8005310 <_sbrk_r>
 800469a:	1c43      	adds	r3, r0, #1
 800469c:	d103      	bne.n	80046a6 <sbrk_aligned+0x26>
 800469e:	f04f 34ff 	mov.w	r4, #4294967295
 80046a2:	4620      	mov	r0, r4
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
 80046a6:	1cc4      	adds	r4, r0, #3
 80046a8:	f024 0403 	bic.w	r4, r4, #3
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d0f8      	beq.n	80046a2 <sbrk_aligned+0x22>
 80046b0:	1a21      	subs	r1, r4, r0
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fe2c 	bl	8005310 <_sbrk_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d1f2      	bne.n	80046a2 <sbrk_aligned+0x22>
 80046bc:	e7ef      	b.n	800469e <sbrk_aligned+0x1e>
 80046be:	bf00      	nop
 80046c0:	200006f8 	.word	0x200006f8

080046c4 <_malloc_r>:
 80046c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046c8:	1ccd      	adds	r5, r1, #3
 80046ca:	f025 0503 	bic.w	r5, r5, #3
 80046ce:	3508      	adds	r5, #8
 80046d0:	2d0c      	cmp	r5, #12
 80046d2:	bf38      	it	cc
 80046d4:	250c      	movcc	r5, #12
 80046d6:	2d00      	cmp	r5, #0
 80046d8:	4606      	mov	r6, r0
 80046da:	db01      	blt.n	80046e0 <_malloc_r+0x1c>
 80046dc:	42a9      	cmp	r1, r5
 80046de:	d904      	bls.n	80046ea <_malloc_r+0x26>
 80046e0:	230c      	movs	r3, #12
 80046e2:	6033      	str	r3, [r6, #0]
 80046e4:	2000      	movs	r0, #0
 80046e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047c0 <_malloc_r+0xfc>
 80046ee:	f000 f869 	bl	80047c4 <__malloc_lock>
 80046f2:	f8d8 3000 	ldr.w	r3, [r8]
 80046f6:	461c      	mov	r4, r3
 80046f8:	bb44      	cbnz	r4, 800474c <_malloc_r+0x88>
 80046fa:	4629      	mov	r1, r5
 80046fc:	4630      	mov	r0, r6
 80046fe:	f7ff ffbf 	bl	8004680 <sbrk_aligned>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	4604      	mov	r4, r0
 8004706:	d158      	bne.n	80047ba <_malloc_r+0xf6>
 8004708:	f8d8 4000 	ldr.w	r4, [r8]
 800470c:	4627      	mov	r7, r4
 800470e:	2f00      	cmp	r7, #0
 8004710:	d143      	bne.n	800479a <_malloc_r+0xd6>
 8004712:	2c00      	cmp	r4, #0
 8004714:	d04b      	beq.n	80047ae <_malloc_r+0xea>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	4639      	mov	r1, r7
 800471a:	4630      	mov	r0, r6
 800471c:	eb04 0903 	add.w	r9, r4, r3
 8004720:	f000 fdf6 	bl	8005310 <_sbrk_r>
 8004724:	4581      	cmp	r9, r0
 8004726:	d142      	bne.n	80047ae <_malloc_r+0xea>
 8004728:	6821      	ldr	r1, [r4, #0]
 800472a:	4630      	mov	r0, r6
 800472c:	1a6d      	subs	r5, r5, r1
 800472e:	4629      	mov	r1, r5
 8004730:	f7ff ffa6 	bl	8004680 <sbrk_aligned>
 8004734:	3001      	adds	r0, #1
 8004736:	d03a      	beq.n	80047ae <_malloc_r+0xea>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	442b      	add	r3, r5
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	f8d8 3000 	ldr.w	r3, [r8]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	bb62      	cbnz	r2, 80047a0 <_malloc_r+0xdc>
 8004746:	f8c8 7000 	str.w	r7, [r8]
 800474a:	e00f      	b.n	800476c <_malloc_r+0xa8>
 800474c:	6822      	ldr	r2, [r4, #0]
 800474e:	1b52      	subs	r2, r2, r5
 8004750:	d420      	bmi.n	8004794 <_malloc_r+0xd0>
 8004752:	2a0b      	cmp	r2, #11
 8004754:	d917      	bls.n	8004786 <_malloc_r+0xc2>
 8004756:	1961      	adds	r1, r4, r5
 8004758:	42a3      	cmp	r3, r4
 800475a:	6025      	str	r5, [r4, #0]
 800475c:	bf18      	it	ne
 800475e:	6059      	strne	r1, [r3, #4]
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	bf08      	it	eq
 8004764:	f8c8 1000 	streq.w	r1, [r8]
 8004768:	5162      	str	r2, [r4, r5]
 800476a:	604b      	str	r3, [r1, #4]
 800476c:	4630      	mov	r0, r6
 800476e:	f000 f82f 	bl	80047d0 <__malloc_unlock>
 8004772:	f104 000b 	add.w	r0, r4, #11
 8004776:	1d23      	adds	r3, r4, #4
 8004778:	f020 0007 	bic.w	r0, r0, #7
 800477c:	1ac2      	subs	r2, r0, r3
 800477e:	bf1c      	itt	ne
 8004780:	1a1b      	subne	r3, r3, r0
 8004782:	50a3      	strne	r3, [r4, r2]
 8004784:	e7af      	b.n	80046e6 <_malloc_r+0x22>
 8004786:	6862      	ldr	r2, [r4, #4]
 8004788:	42a3      	cmp	r3, r4
 800478a:	bf0c      	ite	eq
 800478c:	f8c8 2000 	streq.w	r2, [r8]
 8004790:	605a      	strne	r2, [r3, #4]
 8004792:	e7eb      	b.n	800476c <_malloc_r+0xa8>
 8004794:	4623      	mov	r3, r4
 8004796:	6864      	ldr	r4, [r4, #4]
 8004798:	e7ae      	b.n	80046f8 <_malloc_r+0x34>
 800479a:	463c      	mov	r4, r7
 800479c:	687f      	ldr	r7, [r7, #4]
 800479e:	e7b6      	b.n	800470e <_malloc_r+0x4a>
 80047a0:	461a      	mov	r2, r3
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	42a3      	cmp	r3, r4
 80047a6:	d1fb      	bne.n	80047a0 <_malloc_r+0xdc>
 80047a8:	2300      	movs	r3, #0
 80047aa:	6053      	str	r3, [r2, #4]
 80047ac:	e7de      	b.n	800476c <_malloc_r+0xa8>
 80047ae:	230c      	movs	r3, #12
 80047b0:	4630      	mov	r0, r6
 80047b2:	6033      	str	r3, [r6, #0]
 80047b4:	f000 f80c 	bl	80047d0 <__malloc_unlock>
 80047b8:	e794      	b.n	80046e4 <_malloc_r+0x20>
 80047ba:	6005      	str	r5, [r0, #0]
 80047bc:	e7d6      	b.n	800476c <_malloc_r+0xa8>
 80047be:	bf00      	nop
 80047c0:	200006fc 	.word	0x200006fc

080047c4 <__malloc_lock>:
 80047c4:	4801      	ldr	r0, [pc, #4]	@ (80047cc <__malloc_lock+0x8>)
 80047c6:	f7ff b8a8 	b.w	800391a <__retarget_lock_acquire_recursive>
 80047ca:	bf00      	nop
 80047cc:	200006f4 	.word	0x200006f4

080047d0 <__malloc_unlock>:
 80047d0:	4801      	ldr	r0, [pc, #4]	@ (80047d8 <__malloc_unlock+0x8>)
 80047d2:	f7ff b8a3 	b.w	800391c <__retarget_lock_release_recursive>
 80047d6:	bf00      	nop
 80047d8:	200006f4 	.word	0x200006f4

080047dc <_Balloc>:
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	69c6      	ldr	r6, [r0, #28]
 80047e0:	4604      	mov	r4, r0
 80047e2:	460d      	mov	r5, r1
 80047e4:	b976      	cbnz	r6, 8004804 <_Balloc+0x28>
 80047e6:	2010      	movs	r0, #16
 80047e8:	f7ff ff42 	bl	8004670 <malloc>
 80047ec:	4602      	mov	r2, r0
 80047ee:	61e0      	str	r0, [r4, #28]
 80047f0:	b920      	cbnz	r0, 80047fc <_Balloc+0x20>
 80047f2:	216b      	movs	r1, #107	@ 0x6b
 80047f4:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <_Balloc+0x78>)
 80047f6:	4818      	ldr	r0, [pc, #96]	@ (8004858 <_Balloc+0x7c>)
 80047f8:	f000 fda8 	bl	800534c <__assert_func>
 80047fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004800:	6006      	str	r6, [r0, #0]
 8004802:	60c6      	str	r6, [r0, #12]
 8004804:	69e6      	ldr	r6, [r4, #28]
 8004806:	68f3      	ldr	r3, [r6, #12]
 8004808:	b183      	cbz	r3, 800482c <_Balloc+0x50>
 800480a:	69e3      	ldr	r3, [r4, #28]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004812:	b9b8      	cbnz	r0, 8004844 <_Balloc+0x68>
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f605 	lsl.w	r6, r1, r5
 800481a:	1d72      	adds	r2, r6, #5
 800481c:	4620      	mov	r0, r4
 800481e:	0092      	lsls	r2, r2, #2
 8004820:	f000 fdb2 	bl	8005388 <_calloc_r>
 8004824:	b160      	cbz	r0, 8004840 <_Balloc+0x64>
 8004826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800482a:	e00e      	b.n	800484a <_Balloc+0x6e>
 800482c:	2221      	movs	r2, #33	@ 0x21
 800482e:	2104      	movs	r1, #4
 8004830:	4620      	mov	r0, r4
 8004832:	f000 fda9 	bl	8005388 <_calloc_r>
 8004836:	69e3      	ldr	r3, [r4, #28]
 8004838:	60f0      	str	r0, [r6, #12]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e4      	bne.n	800480a <_Balloc+0x2e>
 8004840:	2000      	movs	r0, #0
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	6802      	ldr	r2, [r0, #0]
 8004846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800484a:	2300      	movs	r3, #0
 800484c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004850:	e7f7      	b.n	8004842 <_Balloc+0x66>
 8004852:	bf00      	nop
 8004854:	08005a5e 	.word	0x08005a5e
 8004858:	08005ade 	.word	0x08005ade

0800485c <_Bfree>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	69c6      	ldr	r6, [r0, #28]
 8004860:	4605      	mov	r5, r0
 8004862:	460c      	mov	r4, r1
 8004864:	b976      	cbnz	r6, 8004884 <_Bfree+0x28>
 8004866:	2010      	movs	r0, #16
 8004868:	f7ff ff02 	bl	8004670 <malloc>
 800486c:	4602      	mov	r2, r0
 800486e:	61e8      	str	r0, [r5, #28]
 8004870:	b920      	cbnz	r0, 800487c <_Bfree+0x20>
 8004872:	218f      	movs	r1, #143	@ 0x8f
 8004874:	4b08      	ldr	r3, [pc, #32]	@ (8004898 <_Bfree+0x3c>)
 8004876:	4809      	ldr	r0, [pc, #36]	@ (800489c <_Bfree+0x40>)
 8004878:	f000 fd68 	bl	800534c <__assert_func>
 800487c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004880:	6006      	str	r6, [r0, #0]
 8004882:	60c6      	str	r6, [r0, #12]
 8004884:	b13c      	cbz	r4, 8004896 <_Bfree+0x3a>
 8004886:	69eb      	ldr	r3, [r5, #28]
 8004888:	6862      	ldr	r2, [r4, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004890:	6021      	str	r1, [r4, #0]
 8004892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	08005a5e 	.word	0x08005a5e
 800489c:	08005ade 	.word	0x08005ade

080048a0 <__multadd>:
 80048a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a4:	4607      	mov	r7, r0
 80048a6:	460c      	mov	r4, r1
 80048a8:	461e      	mov	r6, r3
 80048aa:	2000      	movs	r0, #0
 80048ac:	690d      	ldr	r5, [r1, #16]
 80048ae:	f101 0c14 	add.w	ip, r1, #20
 80048b2:	f8dc 3000 	ldr.w	r3, [ip]
 80048b6:	3001      	adds	r0, #1
 80048b8:	b299      	uxth	r1, r3
 80048ba:	fb02 6101 	mla	r1, r2, r1, r6
 80048be:	0c1e      	lsrs	r6, r3, #16
 80048c0:	0c0b      	lsrs	r3, r1, #16
 80048c2:	fb02 3306 	mla	r3, r2, r6, r3
 80048c6:	b289      	uxth	r1, r1
 80048c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80048cc:	4285      	cmp	r5, r0
 80048ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80048d2:	f84c 1b04 	str.w	r1, [ip], #4
 80048d6:	dcec      	bgt.n	80048b2 <__multadd+0x12>
 80048d8:	b30e      	cbz	r6, 800491e <__multadd+0x7e>
 80048da:	68a3      	ldr	r3, [r4, #8]
 80048dc:	42ab      	cmp	r3, r5
 80048de:	dc19      	bgt.n	8004914 <__multadd+0x74>
 80048e0:	6861      	ldr	r1, [r4, #4]
 80048e2:	4638      	mov	r0, r7
 80048e4:	3101      	adds	r1, #1
 80048e6:	f7ff ff79 	bl	80047dc <_Balloc>
 80048ea:	4680      	mov	r8, r0
 80048ec:	b928      	cbnz	r0, 80048fa <__multadd+0x5a>
 80048ee:	4602      	mov	r2, r0
 80048f0:	21ba      	movs	r1, #186	@ 0xba
 80048f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004924 <__multadd+0x84>)
 80048f4:	480c      	ldr	r0, [pc, #48]	@ (8004928 <__multadd+0x88>)
 80048f6:	f000 fd29 	bl	800534c <__assert_func>
 80048fa:	6922      	ldr	r2, [r4, #16]
 80048fc:	f104 010c 	add.w	r1, r4, #12
 8004900:	3202      	adds	r2, #2
 8004902:	0092      	lsls	r2, r2, #2
 8004904:	300c      	adds	r0, #12
 8004906:	f000 fd13 	bl	8005330 <memcpy>
 800490a:	4621      	mov	r1, r4
 800490c:	4638      	mov	r0, r7
 800490e:	f7ff ffa5 	bl	800485c <_Bfree>
 8004912:	4644      	mov	r4, r8
 8004914:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004918:	3501      	adds	r5, #1
 800491a:	615e      	str	r6, [r3, #20]
 800491c:	6125      	str	r5, [r4, #16]
 800491e:	4620      	mov	r0, r4
 8004920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004924:	08005acd 	.word	0x08005acd
 8004928:	08005ade 	.word	0x08005ade

0800492c <__hi0bits>:
 800492c:	4603      	mov	r3, r0
 800492e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004932:	bf3a      	itte	cc
 8004934:	0403      	lslcc	r3, r0, #16
 8004936:	2010      	movcc	r0, #16
 8004938:	2000      	movcs	r0, #0
 800493a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800493e:	bf3c      	itt	cc
 8004940:	021b      	lslcc	r3, r3, #8
 8004942:	3008      	addcc	r0, #8
 8004944:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004948:	bf3c      	itt	cc
 800494a:	011b      	lslcc	r3, r3, #4
 800494c:	3004      	addcc	r0, #4
 800494e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004952:	bf3c      	itt	cc
 8004954:	009b      	lslcc	r3, r3, #2
 8004956:	3002      	addcc	r0, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	db05      	blt.n	8004968 <__hi0bits+0x3c>
 800495c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004960:	f100 0001 	add.w	r0, r0, #1
 8004964:	bf08      	it	eq
 8004966:	2020      	moveq	r0, #32
 8004968:	4770      	bx	lr

0800496a <__lo0bits>:
 800496a:	6803      	ldr	r3, [r0, #0]
 800496c:	4602      	mov	r2, r0
 800496e:	f013 0007 	ands.w	r0, r3, #7
 8004972:	d00b      	beq.n	800498c <__lo0bits+0x22>
 8004974:	07d9      	lsls	r1, r3, #31
 8004976:	d421      	bmi.n	80049bc <__lo0bits+0x52>
 8004978:	0798      	lsls	r0, r3, #30
 800497a:	bf49      	itett	mi
 800497c:	085b      	lsrmi	r3, r3, #1
 800497e:	089b      	lsrpl	r3, r3, #2
 8004980:	2001      	movmi	r0, #1
 8004982:	6013      	strmi	r3, [r2, #0]
 8004984:	bf5c      	itt	pl
 8004986:	2002      	movpl	r0, #2
 8004988:	6013      	strpl	r3, [r2, #0]
 800498a:	4770      	bx	lr
 800498c:	b299      	uxth	r1, r3
 800498e:	b909      	cbnz	r1, 8004994 <__lo0bits+0x2a>
 8004990:	2010      	movs	r0, #16
 8004992:	0c1b      	lsrs	r3, r3, #16
 8004994:	b2d9      	uxtb	r1, r3
 8004996:	b909      	cbnz	r1, 800499c <__lo0bits+0x32>
 8004998:	3008      	adds	r0, #8
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	0719      	lsls	r1, r3, #28
 800499e:	bf04      	itt	eq
 80049a0:	091b      	lsreq	r3, r3, #4
 80049a2:	3004      	addeq	r0, #4
 80049a4:	0799      	lsls	r1, r3, #30
 80049a6:	bf04      	itt	eq
 80049a8:	089b      	lsreq	r3, r3, #2
 80049aa:	3002      	addeq	r0, #2
 80049ac:	07d9      	lsls	r1, r3, #31
 80049ae:	d403      	bmi.n	80049b8 <__lo0bits+0x4e>
 80049b0:	085b      	lsrs	r3, r3, #1
 80049b2:	f100 0001 	add.w	r0, r0, #1
 80049b6:	d003      	beq.n	80049c0 <__lo0bits+0x56>
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4770      	bx	lr
 80049bc:	2000      	movs	r0, #0
 80049be:	4770      	bx	lr
 80049c0:	2020      	movs	r0, #32
 80049c2:	4770      	bx	lr

080049c4 <__i2b>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	460c      	mov	r4, r1
 80049c8:	2101      	movs	r1, #1
 80049ca:	f7ff ff07 	bl	80047dc <_Balloc>
 80049ce:	4602      	mov	r2, r0
 80049d0:	b928      	cbnz	r0, 80049de <__i2b+0x1a>
 80049d2:	f240 1145 	movw	r1, #325	@ 0x145
 80049d6:	4b04      	ldr	r3, [pc, #16]	@ (80049e8 <__i2b+0x24>)
 80049d8:	4804      	ldr	r0, [pc, #16]	@ (80049ec <__i2b+0x28>)
 80049da:	f000 fcb7 	bl	800534c <__assert_func>
 80049de:	2301      	movs	r3, #1
 80049e0:	6144      	str	r4, [r0, #20]
 80049e2:	6103      	str	r3, [r0, #16]
 80049e4:	bd10      	pop	{r4, pc}
 80049e6:	bf00      	nop
 80049e8:	08005acd 	.word	0x08005acd
 80049ec:	08005ade 	.word	0x08005ade

080049f0 <__multiply>:
 80049f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f4:	4614      	mov	r4, r2
 80049f6:	690a      	ldr	r2, [r1, #16]
 80049f8:	6923      	ldr	r3, [r4, #16]
 80049fa:	460f      	mov	r7, r1
 80049fc:	429a      	cmp	r2, r3
 80049fe:	bfa2      	ittt	ge
 8004a00:	4623      	movge	r3, r4
 8004a02:	460c      	movge	r4, r1
 8004a04:	461f      	movge	r7, r3
 8004a06:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004a0a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	6861      	ldr	r1, [r4, #4]
 8004a12:	eb0a 0609 	add.w	r6, sl, r9
 8004a16:	42b3      	cmp	r3, r6
 8004a18:	b085      	sub	sp, #20
 8004a1a:	bfb8      	it	lt
 8004a1c:	3101      	addlt	r1, #1
 8004a1e:	f7ff fedd 	bl	80047dc <_Balloc>
 8004a22:	b930      	cbnz	r0, 8004a32 <__multiply+0x42>
 8004a24:	4602      	mov	r2, r0
 8004a26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004a2a:	4b43      	ldr	r3, [pc, #268]	@ (8004b38 <__multiply+0x148>)
 8004a2c:	4843      	ldr	r0, [pc, #268]	@ (8004b3c <__multiply+0x14c>)
 8004a2e:	f000 fc8d 	bl	800534c <__assert_func>
 8004a32:	f100 0514 	add.w	r5, r0, #20
 8004a36:	462b      	mov	r3, r5
 8004a38:	2200      	movs	r2, #0
 8004a3a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004a3e:	4543      	cmp	r3, r8
 8004a40:	d321      	bcc.n	8004a86 <__multiply+0x96>
 8004a42:	f107 0114 	add.w	r1, r7, #20
 8004a46:	f104 0214 	add.w	r2, r4, #20
 8004a4a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004a4e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004a52:	9302      	str	r3, [sp, #8]
 8004a54:	1b13      	subs	r3, r2, r4
 8004a56:	3b15      	subs	r3, #21
 8004a58:	f023 0303 	bic.w	r3, r3, #3
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	f104 0715 	add.w	r7, r4, #21
 8004a62:	42ba      	cmp	r2, r7
 8004a64:	bf38      	it	cc
 8004a66:	2304      	movcc	r3, #4
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	9b02      	ldr	r3, [sp, #8]
 8004a6c:	9103      	str	r1, [sp, #12]
 8004a6e:	428b      	cmp	r3, r1
 8004a70:	d80c      	bhi.n	8004a8c <__multiply+0x9c>
 8004a72:	2e00      	cmp	r6, #0
 8004a74:	dd03      	ble.n	8004a7e <__multiply+0x8e>
 8004a76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d05a      	beq.n	8004b34 <__multiply+0x144>
 8004a7e:	6106      	str	r6, [r0, #16]
 8004a80:	b005      	add	sp, #20
 8004a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a86:	f843 2b04 	str.w	r2, [r3], #4
 8004a8a:	e7d8      	b.n	8004a3e <__multiply+0x4e>
 8004a8c:	f8b1 a000 	ldrh.w	sl, [r1]
 8004a90:	f1ba 0f00 	cmp.w	sl, #0
 8004a94:	d023      	beq.n	8004ade <__multiply+0xee>
 8004a96:	46a9      	mov	r9, r5
 8004a98:	f04f 0c00 	mov.w	ip, #0
 8004a9c:	f104 0e14 	add.w	lr, r4, #20
 8004aa0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004aa4:	f8d9 3000 	ldr.w	r3, [r9]
 8004aa8:	fa1f fb87 	uxth.w	fp, r7
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	fb0a 330b 	mla	r3, sl, fp, r3
 8004ab2:	4463      	add	r3, ip
 8004ab4:	f8d9 c000 	ldr.w	ip, [r9]
 8004ab8:	0c3f      	lsrs	r7, r7, #16
 8004aba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004abe:	fb0a c707 	mla	r7, sl, r7, ip
 8004ac2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004acc:	4572      	cmp	r2, lr
 8004ace:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004ad2:	f849 3b04 	str.w	r3, [r9], #4
 8004ad6:	d8e3      	bhi.n	8004aa0 <__multiply+0xb0>
 8004ad8:	9b01      	ldr	r3, [sp, #4]
 8004ada:	f845 c003 	str.w	ip, [r5, r3]
 8004ade:	9b03      	ldr	r3, [sp, #12]
 8004ae0:	3104      	adds	r1, #4
 8004ae2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004ae6:	f1b9 0f00 	cmp.w	r9, #0
 8004aea:	d021      	beq.n	8004b30 <__multiply+0x140>
 8004aec:	46ae      	mov	lr, r5
 8004aee:	f04f 0a00 	mov.w	sl, #0
 8004af2:	682b      	ldr	r3, [r5, #0]
 8004af4:	f104 0c14 	add.w	ip, r4, #20
 8004af8:	f8bc b000 	ldrh.w	fp, [ip]
 8004afc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	fb09 770b 	mla	r7, r9, fp, r7
 8004b06:	4457      	add	r7, sl
 8004b08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004b0c:	f84e 3b04 	str.w	r3, [lr], #4
 8004b10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b18:	f8be 3000 	ldrh.w	r3, [lr]
 8004b1c:	4562      	cmp	r2, ip
 8004b1e:	fb09 330a 	mla	r3, r9, sl, r3
 8004b22:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004b26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b2a:	d8e5      	bhi.n	8004af8 <__multiply+0x108>
 8004b2c:	9f01      	ldr	r7, [sp, #4]
 8004b2e:	51eb      	str	r3, [r5, r7]
 8004b30:	3504      	adds	r5, #4
 8004b32:	e79a      	b.n	8004a6a <__multiply+0x7a>
 8004b34:	3e01      	subs	r6, #1
 8004b36:	e79c      	b.n	8004a72 <__multiply+0x82>
 8004b38:	08005acd 	.word	0x08005acd
 8004b3c:	08005ade 	.word	0x08005ade

08004b40 <__pow5mult>:
 8004b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b44:	4615      	mov	r5, r2
 8004b46:	f012 0203 	ands.w	r2, r2, #3
 8004b4a:	4607      	mov	r7, r0
 8004b4c:	460e      	mov	r6, r1
 8004b4e:	d007      	beq.n	8004b60 <__pow5mult+0x20>
 8004b50:	4c25      	ldr	r4, [pc, #148]	@ (8004be8 <__pow5mult+0xa8>)
 8004b52:	3a01      	subs	r2, #1
 8004b54:	2300      	movs	r3, #0
 8004b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b5a:	f7ff fea1 	bl	80048a0 <__multadd>
 8004b5e:	4606      	mov	r6, r0
 8004b60:	10ad      	asrs	r5, r5, #2
 8004b62:	d03d      	beq.n	8004be0 <__pow5mult+0xa0>
 8004b64:	69fc      	ldr	r4, [r7, #28]
 8004b66:	b97c      	cbnz	r4, 8004b88 <__pow5mult+0x48>
 8004b68:	2010      	movs	r0, #16
 8004b6a:	f7ff fd81 	bl	8004670 <malloc>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	61f8      	str	r0, [r7, #28]
 8004b72:	b928      	cbnz	r0, 8004b80 <__pow5mult+0x40>
 8004b74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004b78:	4b1c      	ldr	r3, [pc, #112]	@ (8004bec <__pow5mult+0xac>)
 8004b7a:	481d      	ldr	r0, [pc, #116]	@ (8004bf0 <__pow5mult+0xb0>)
 8004b7c:	f000 fbe6 	bl	800534c <__assert_func>
 8004b80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b84:	6004      	str	r4, [r0, #0]
 8004b86:	60c4      	str	r4, [r0, #12]
 8004b88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004b8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b90:	b94c      	cbnz	r4, 8004ba6 <__pow5mult+0x66>
 8004b92:	f240 2171 	movw	r1, #625	@ 0x271
 8004b96:	4638      	mov	r0, r7
 8004b98:	f7ff ff14 	bl	80049c4 <__i2b>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ba4:	6003      	str	r3, [r0, #0]
 8004ba6:	f04f 0900 	mov.w	r9, #0
 8004baa:	07eb      	lsls	r3, r5, #31
 8004bac:	d50a      	bpl.n	8004bc4 <__pow5mult+0x84>
 8004bae:	4631      	mov	r1, r6
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	f7ff ff1c 	bl	80049f0 <__multiply>
 8004bb8:	4680      	mov	r8, r0
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	f7ff fe4d 	bl	800485c <_Bfree>
 8004bc2:	4646      	mov	r6, r8
 8004bc4:	106d      	asrs	r5, r5, #1
 8004bc6:	d00b      	beq.n	8004be0 <__pow5mult+0xa0>
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	b938      	cbnz	r0, 8004bdc <__pow5mult+0x9c>
 8004bcc:	4622      	mov	r2, r4
 8004bce:	4621      	mov	r1, r4
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	f7ff ff0d 	bl	80049f0 <__multiply>
 8004bd6:	6020      	str	r0, [r4, #0]
 8004bd8:	f8c0 9000 	str.w	r9, [r0]
 8004bdc:	4604      	mov	r4, r0
 8004bde:	e7e4      	b.n	8004baa <__pow5mult+0x6a>
 8004be0:	4630      	mov	r0, r6
 8004be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004be6:	bf00      	nop
 8004be8:	08005b38 	.word	0x08005b38
 8004bec:	08005a5e 	.word	0x08005a5e
 8004bf0:	08005ade 	.word	0x08005ade

08004bf4 <__lshift>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	4607      	mov	r7, r0
 8004bfc:	4691      	mov	r9, r2
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	6849      	ldr	r1, [r1, #4]
 8004c02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004c06:	68a3      	ldr	r3, [r4, #8]
 8004c08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c0c:	f108 0601 	add.w	r6, r8, #1
 8004c10:	42b3      	cmp	r3, r6
 8004c12:	db0b      	blt.n	8004c2c <__lshift+0x38>
 8004c14:	4638      	mov	r0, r7
 8004c16:	f7ff fde1 	bl	80047dc <_Balloc>
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	b948      	cbnz	r0, 8004c32 <__lshift+0x3e>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004c24:	4b27      	ldr	r3, [pc, #156]	@ (8004cc4 <__lshift+0xd0>)
 8004c26:	4828      	ldr	r0, [pc, #160]	@ (8004cc8 <__lshift+0xd4>)
 8004c28:	f000 fb90 	bl	800534c <__assert_func>
 8004c2c:	3101      	adds	r1, #1
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	e7ee      	b.n	8004c10 <__lshift+0x1c>
 8004c32:	2300      	movs	r3, #0
 8004c34:	f100 0114 	add.w	r1, r0, #20
 8004c38:	f100 0210 	add.w	r2, r0, #16
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	4553      	cmp	r3, sl
 8004c40:	db33      	blt.n	8004caa <__lshift+0xb6>
 8004c42:	6920      	ldr	r0, [r4, #16]
 8004c44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c48:	f104 0314 	add.w	r3, r4, #20
 8004c4c:	f019 091f 	ands.w	r9, r9, #31
 8004c50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004c58:	d02b      	beq.n	8004cb2 <__lshift+0xbe>
 8004c5a:	468a      	mov	sl, r1
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f1c9 0e20 	rsb	lr, r9, #32
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	fa00 f009 	lsl.w	r0, r0, r9
 8004c68:	4310      	orrs	r0, r2
 8004c6a:	f84a 0b04 	str.w	r0, [sl], #4
 8004c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c72:	459c      	cmp	ip, r3
 8004c74:	fa22 f20e 	lsr.w	r2, r2, lr
 8004c78:	d8f3      	bhi.n	8004c62 <__lshift+0x6e>
 8004c7a:	ebac 0304 	sub.w	r3, ip, r4
 8004c7e:	3b15      	subs	r3, #21
 8004c80:	f023 0303 	bic.w	r3, r3, #3
 8004c84:	3304      	adds	r3, #4
 8004c86:	f104 0015 	add.w	r0, r4, #21
 8004c8a:	4584      	cmp	ip, r0
 8004c8c:	bf38      	it	cc
 8004c8e:	2304      	movcc	r3, #4
 8004c90:	50ca      	str	r2, [r1, r3]
 8004c92:	b10a      	cbz	r2, 8004c98 <__lshift+0xa4>
 8004c94:	f108 0602 	add.w	r6, r8, #2
 8004c98:	3e01      	subs	r6, #1
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	612e      	str	r6, [r5, #16]
 8004ca0:	f7ff fddc 	bl	800485c <_Bfree>
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004caa:	f842 0f04 	str.w	r0, [r2, #4]!
 8004cae:	3301      	adds	r3, #1
 8004cb0:	e7c5      	b.n	8004c3e <__lshift+0x4a>
 8004cb2:	3904      	subs	r1, #4
 8004cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cb8:	459c      	cmp	ip, r3
 8004cba:	f841 2f04 	str.w	r2, [r1, #4]!
 8004cbe:	d8f9      	bhi.n	8004cb4 <__lshift+0xc0>
 8004cc0:	e7ea      	b.n	8004c98 <__lshift+0xa4>
 8004cc2:	bf00      	nop
 8004cc4:	08005acd 	.word	0x08005acd
 8004cc8:	08005ade 	.word	0x08005ade

08004ccc <__mcmp>:
 8004ccc:	4603      	mov	r3, r0
 8004cce:	690a      	ldr	r2, [r1, #16]
 8004cd0:	6900      	ldr	r0, [r0, #16]
 8004cd2:	b530      	push	{r4, r5, lr}
 8004cd4:	1a80      	subs	r0, r0, r2
 8004cd6:	d10e      	bne.n	8004cf6 <__mcmp+0x2a>
 8004cd8:	3314      	adds	r3, #20
 8004cda:	3114      	adds	r1, #20
 8004cdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004ce0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004ce4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004ce8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004cec:	4295      	cmp	r5, r2
 8004cee:	d003      	beq.n	8004cf8 <__mcmp+0x2c>
 8004cf0:	d205      	bcs.n	8004cfe <__mcmp+0x32>
 8004cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf6:	bd30      	pop	{r4, r5, pc}
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d3f3      	bcc.n	8004ce4 <__mcmp+0x18>
 8004cfc:	e7fb      	b.n	8004cf6 <__mcmp+0x2a>
 8004cfe:	2001      	movs	r0, #1
 8004d00:	e7f9      	b.n	8004cf6 <__mcmp+0x2a>
	...

08004d04 <__mdiff>:
 8004d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d08:	4689      	mov	r9, r1
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4648      	mov	r0, r9
 8004d10:	4614      	mov	r4, r2
 8004d12:	f7ff ffdb 	bl	8004ccc <__mcmp>
 8004d16:	1e05      	subs	r5, r0, #0
 8004d18:	d112      	bne.n	8004d40 <__mdiff+0x3c>
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f7ff fd5d 	bl	80047dc <_Balloc>
 8004d22:	4602      	mov	r2, r0
 8004d24:	b928      	cbnz	r0, 8004d32 <__mdiff+0x2e>
 8004d26:	f240 2137 	movw	r1, #567	@ 0x237
 8004d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e24 <__mdiff+0x120>)
 8004d2c:	483e      	ldr	r0, [pc, #248]	@ (8004e28 <__mdiff+0x124>)
 8004d2e:	f000 fb0d 	bl	800534c <__assert_func>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004d38:	4610      	mov	r0, r2
 8004d3a:	b003      	add	sp, #12
 8004d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d40:	bfbc      	itt	lt
 8004d42:	464b      	movlt	r3, r9
 8004d44:	46a1      	movlt	r9, r4
 8004d46:	4630      	mov	r0, r6
 8004d48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004d4c:	bfba      	itte	lt
 8004d4e:	461c      	movlt	r4, r3
 8004d50:	2501      	movlt	r5, #1
 8004d52:	2500      	movge	r5, #0
 8004d54:	f7ff fd42 	bl	80047dc <_Balloc>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	b918      	cbnz	r0, 8004d64 <__mdiff+0x60>
 8004d5c:	f240 2145 	movw	r1, #581	@ 0x245
 8004d60:	4b30      	ldr	r3, [pc, #192]	@ (8004e24 <__mdiff+0x120>)
 8004d62:	e7e3      	b.n	8004d2c <__mdiff+0x28>
 8004d64:	f100 0b14 	add.w	fp, r0, #20
 8004d68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004d6c:	f109 0310 	add.w	r3, r9, #16
 8004d70:	60c5      	str	r5, [r0, #12]
 8004d72:	f04f 0c00 	mov.w	ip, #0
 8004d76:	f109 0514 	add.w	r5, r9, #20
 8004d7a:	46d9      	mov	r9, fp
 8004d7c:	6926      	ldr	r6, [r4, #16]
 8004d7e:	f104 0e14 	add.w	lr, r4, #20
 8004d82:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004d86:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	9b01      	ldr	r3, [sp, #4]
 8004d8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004d92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004d96:	b281      	uxth	r1, r0
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	fa1f f38a 	uxth.w	r3, sl
 8004d9e:	1a5b      	subs	r3, r3, r1
 8004da0:	0c00      	lsrs	r0, r0, #16
 8004da2:	4463      	add	r3, ip
 8004da4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004da8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004db2:	4576      	cmp	r6, lr
 8004db4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004db8:	f849 3b04 	str.w	r3, [r9], #4
 8004dbc:	d8e6      	bhi.n	8004d8c <__mdiff+0x88>
 8004dbe:	1b33      	subs	r3, r6, r4
 8004dc0:	3b15      	subs	r3, #21
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	3415      	adds	r4, #21
 8004dc8:	3304      	adds	r3, #4
 8004dca:	42a6      	cmp	r6, r4
 8004dcc:	bf38      	it	cc
 8004dce:	2304      	movcc	r3, #4
 8004dd0:	441d      	add	r5, r3
 8004dd2:	445b      	add	r3, fp
 8004dd4:	461e      	mov	r6, r3
 8004dd6:	462c      	mov	r4, r5
 8004dd8:	4544      	cmp	r4, r8
 8004dda:	d30e      	bcc.n	8004dfa <__mdiff+0xf6>
 8004ddc:	f108 0103 	add.w	r1, r8, #3
 8004de0:	1b49      	subs	r1, r1, r5
 8004de2:	f021 0103 	bic.w	r1, r1, #3
 8004de6:	3d03      	subs	r5, #3
 8004de8:	45a8      	cmp	r8, r5
 8004dea:	bf38      	it	cc
 8004dec:	2100      	movcc	r1, #0
 8004dee:	440b      	add	r3, r1
 8004df0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004df4:	b199      	cbz	r1, 8004e1e <__mdiff+0x11a>
 8004df6:	6117      	str	r7, [r2, #16]
 8004df8:	e79e      	b.n	8004d38 <__mdiff+0x34>
 8004dfa:	46e6      	mov	lr, ip
 8004dfc:	f854 1b04 	ldr.w	r1, [r4], #4
 8004e00:	fa1f fc81 	uxth.w	ip, r1
 8004e04:	44f4      	add	ip, lr
 8004e06:	0c08      	lsrs	r0, r1, #16
 8004e08:	4471      	add	r1, lr
 8004e0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004e0e:	b289      	uxth	r1, r1
 8004e10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004e14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004e18:	f846 1b04 	str.w	r1, [r6], #4
 8004e1c:	e7dc      	b.n	8004dd8 <__mdiff+0xd4>
 8004e1e:	3f01      	subs	r7, #1
 8004e20:	e7e6      	b.n	8004df0 <__mdiff+0xec>
 8004e22:	bf00      	nop
 8004e24:	08005acd 	.word	0x08005acd
 8004e28:	08005ade 	.word	0x08005ade

08004e2c <__d2b>:
 8004e2c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004e30:	2101      	movs	r1, #1
 8004e32:	4690      	mov	r8, r2
 8004e34:	4699      	mov	r9, r3
 8004e36:	9e08      	ldr	r6, [sp, #32]
 8004e38:	f7ff fcd0 	bl	80047dc <_Balloc>
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	b930      	cbnz	r0, 8004e4e <__d2b+0x22>
 8004e40:	4602      	mov	r2, r0
 8004e42:	f240 310f 	movw	r1, #783	@ 0x30f
 8004e46:	4b23      	ldr	r3, [pc, #140]	@ (8004ed4 <__d2b+0xa8>)
 8004e48:	4823      	ldr	r0, [pc, #140]	@ (8004ed8 <__d2b+0xac>)
 8004e4a:	f000 fa7f 	bl	800534c <__assert_func>
 8004e4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004e52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e56:	b10d      	cbz	r5, 8004e5c <__d2b+0x30>
 8004e58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	f1b8 0300 	subs.w	r3, r8, #0
 8004e62:	d024      	beq.n	8004eae <__d2b+0x82>
 8004e64:	4668      	mov	r0, sp
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	f7ff fd7f 	bl	800496a <__lo0bits>
 8004e6c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004e70:	b1d8      	cbz	r0, 8004eaa <__d2b+0x7e>
 8004e72:	f1c0 0320 	rsb	r3, r0, #32
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	40c2      	lsrs	r2, r0
 8004e7e:	6163      	str	r3, [r4, #20]
 8004e80:	9201      	str	r2, [sp, #4]
 8004e82:	9b01      	ldr	r3, [sp, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf0c      	ite	eq
 8004e88:	2201      	moveq	r2, #1
 8004e8a:	2202      	movne	r2, #2
 8004e8c:	61a3      	str	r3, [r4, #24]
 8004e8e:	6122      	str	r2, [r4, #16]
 8004e90:	b1ad      	cbz	r5, 8004ebe <__d2b+0x92>
 8004e92:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004e96:	4405      	add	r5, r0
 8004e98:	6035      	str	r5, [r6, #0]
 8004e9a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ea0:	6018      	str	r0, [r3, #0]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	b002      	add	sp, #8
 8004ea6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004eaa:	6161      	str	r1, [r4, #20]
 8004eac:	e7e9      	b.n	8004e82 <__d2b+0x56>
 8004eae:	a801      	add	r0, sp, #4
 8004eb0:	f7ff fd5b 	bl	800496a <__lo0bits>
 8004eb4:	9b01      	ldr	r3, [sp, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	6163      	str	r3, [r4, #20]
 8004eba:	3020      	adds	r0, #32
 8004ebc:	e7e7      	b.n	8004e8e <__d2b+0x62>
 8004ebe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004ec2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004ec6:	6030      	str	r0, [r6, #0]
 8004ec8:	6918      	ldr	r0, [r3, #16]
 8004eca:	f7ff fd2f 	bl	800492c <__hi0bits>
 8004ece:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004ed2:	e7e4      	b.n	8004e9e <__d2b+0x72>
 8004ed4:	08005acd 	.word	0x08005acd
 8004ed8:	08005ade 	.word	0x08005ade

08004edc <__ssputs_r>:
 8004edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	461f      	mov	r7, r3
 8004ee2:	688e      	ldr	r6, [r1, #8]
 8004ee4:	4682      	mov	sl, r0
 8004ee6:	42be      	cmp	r6, r7
 8004ee8:	460c      	mov	r4, r1
 8004eea:	4690      	mov	r8, r2
 8004eec:	680b      	ldr	r3, [r1, #0]
 8004eee:	d82d      	bhi.n	8004f4c <__ssputs_r+0x70>
 8004ef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ef4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ef8:	d026      	beq.n	8004f48 <__ssputs_r+0x6c>
 8004efa:	6965      	ldr	r5, [r4, #20]
 8004efc:	6909      	ldr	r1, [r1, #16]
 8004efe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f02:	eba3 0901 	sub.w	r9, r3, r1
 8004f06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f0a:	1c7b      	adds	r3, r7, #1
 8004f0c:	444b      	add	r3, r9
 8004f0e:	106d      	asrs	r5, r5, #1
 8004f10:	429d      	cmp	r5, r3
 8004f12:	bf38      	it	cc
 8004f14:	461d      	movcc	r5, r3
 8004f16:	0553      	lsls	r3, r2, #21
 8004f18:	d527      	bpl.n	8004f6a <__ssputs_r+0x8e>
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	f7ff fbd2 	bl	80046c4 <_malloc_r>
 8004f20:	4606      	mov	r6, r0
 8004f22:	b360      	cbz	r0, 8004f7e <__ssputs_r+0xa2>
 8004f24:	464a      	mov	r2, r9
 8004f26:	6921      	ldr	r1, [r4, #16]
 8004f28:	f000 fa02 	bl	8005330 <memcpy>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	6126      	str	r6, [r4, #16]
 8004f3a:	444e      	add	r6, r9
 8004f3c:	6026      	str	r6, [r4, #0]
 8004f3e:	463e      	mov	r6, r7
 8004f40:	6165      	str	r5, [r4, #20]
 8004f42:	eba5 0509 	sub.w	r5, r5, r9
 8004f46:	60a5      	str	r5, [r4, #8]
 8004f48:	42be      	cmp	r6, r7
 8004f4a:	d900      	bls.n	8004f4e <__ssputs_r+0x72>
 8004f4c:	463e      	mov	r6, r7
 8004f4e:	4632      	mov	r2, r6
 8004f50:	4641      	mov	r1, r8
 8004f52:	6820      	ldr	r0, [r4, #0]
 8004f54:	f000 f9c2 	bl	80052dc <memmove>
 8004f58:	2000      	movs	r0, #0
 8004f5a:	68a3      	ldr	r3, [r4, #8]
 8004f5c:	1b9b      	subs	r3, r3, r6
 8004f5e:	60a3      	str	r3, [r4, #8]
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	4433      	add	r3, r6
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6a:	462a      	mov	r2, r5
 8004f6c:	f000 fa32 	bl	80053d4 <_realloc_r>
 8004f70:	4606      	mov	r6, r0
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d1e0      	bne.n	8004f38 <__ssputs_r+0x5c>
 8004f76:	4650      	mov	r0, sl
 8004f78:	6921      	ldr	r1, [r4, #16]
 8004f7a:	f7ff fb31 	bl	80045e0 <_free_r>
 8004f7e:	230c      	movs	r3, #12
 8004f80:	f8ca 3000 	str.w	r3, [sl]
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	e7e9      	b.n	8004f66 <__ssputs_r+0x8a>
	...

08004f94 <_svfiprintf_r>:
 8004f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f98:	4698      	mov	r8, r3
 8004f9a:	898b      	ldrh	r3, [r1, #12]
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	061b      	lsls	r3, r3, #24
 8004fa0:	460d      	mov	r5, r1
 8004fa2:	4614      	mov	r4, r2
 8004fa4:	b09d      	sub	sp, #116	@ 0x74
 8004fa6:	d510      	bpl.n	8004fca <_svfiprintf_r+0x36>
 8004fa8:	690b      	ldr	r3, [r1, #16]
 8004faa:	b973      	cbnz	r3, 8004fca <_svfiprintf_r+0x36>
 8004fac:	2140      	movs	r1, #64	@ 0x40
 8004fae:	f7ff fb89 	bl	80046c4 <_malloc_r>
 8004fb2:	6028      	str	r0, [r5, #0]
 8004fb4:	6128      	str	r0, [r5, #16]
 8004fb6:	b930      	cbnz	r0, 8004fc6 <_svfiprintf_r+0x32>
 8004fb8:	230c      	movs	r3, #12
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	b01d      	add	sp, #116	@ 0x74
 8004fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc6:	2340      	movs	r3, #64	@ 0x40
 8004fc8:	616b      	str	r3, [r5, #20]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fce:	2320      	movs	r3, #32
 8004fd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fd4:	2330      	movs	r3, #48	@ 0x30
 8004fd6:	f04f 0901 	mov.w	r9, #1
 8004fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005178 <_svfiprintf_r+0x1e4>
 8004fe2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	469a      	mov	sl, r3
 8004fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fee:	b10a      	cbz	r2, 8004ff4 <_svfiprintf_r+0x60>
 8004ff0:	2a25      	cmp	r2, #37	@ 0x25
 8004ff2:	d1f9      	bne.n	8004fe8 <_svfiprintf_r+0x54>
 8004ff4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ff8:	d00b      	beq.n	8005012 <_svfiprintf_r+0x7e>
 8004ffa:	465b      	mov	r3, fp
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	4629      	mov	r1, r5
 8005000:	4638      	mov	r0, r7
 8005002:	f7ff ff6b 	bl	8004edc <__ssputs_r>
 8005006:	3001      	adds	r0, #1
 8005008:	f000 80a7 	beq.w	800515a <_svfiprintf_r+0x1c6>
 800500c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800500e:	445a      	add	r2, fp
 8005010:	9209      	str	r2, [sp, #36]	@ 0x24
 8005012:	f89a 3000 	ldrb.w	r3, [sl]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 809f 	beq.w	800515a <_svfiprintf_r+0x1c6>
 800501c:	2300      	movs	r3, #0
 800501e:	f04f 32ff 	mov.w	r2, #4294967295
 8005022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005026:	f10a 0a01 	add.w	sl, sl, #1
 800502a:	9304      	str	r3, [sp, #16]
 800502c:	9307      	str	r3, [sp, #28]
 800502e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005032:	931a      	str	r3, [sp, #104]	@ 0x68
 8005034:	4654      	mov	r4, sl
 8005036:	2205      	movs	r2, #5
 8005038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800503c:	484e      	ldr	r0, [pc, #312]	@ (8005178 <_svfiprintf_r+0x1e4>)
 800503e:	f7fe fc6e 	bl	800391e <memchr>
 8005042:	9a04      	ldr	r2, [sp, #16]
 8005044:	b9d8      	cbnz	r0, 800507e <_svfiprintf_r+0xea>
 8005046:	06d0      	lsls	r0, r2, #27
 8005048:	bf44      	itt	mi
 800504a:	2320      	movmi	r3, #32
 800504c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005050:	0711      	lsls	r1, r2, #28
 8005052:	bf44      	itt	mi
 8005054:	232b      	movmi	r3, #43	@ 0x2b
 8005056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800505a:	f89a 3000 	ldrb.w	r3, [sl]
 800505e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005060:	d015      	beq.n	800508e <_svfiprintf_r+0xfa>
 8005062:	4654      	mov	r4, sl
 8005064:	2000      	movs	r0, #0
 8005066:	f04f 0c0a 	mov.w	ip, #10
 800506a:	9a07      	ldr	r2, [sp, #28]
 800506c:	4621      	mov	r1, r4
 800506e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005072:	3b30      	subs	r3, #48	@ 0x30
 8005074:	2b09      	cmp	r3, #9
 8005076:	d94b      	bls.n	8005110 <_svfiprintf_r+0x17c>
 8005078:	b1b0      	cbz	r0, 80050a8 <_svfiprintf_r+0x114>
 800507a:	9207      	str	r2, [sp, #28]
 800507c:	e014      	b.n	80050a8 <_svfiprintf_r+0x114>
 800507e:	eba0 0308 	sub.w	r3, r0, r8
 8005082:	fa09 f303 	lsl.w	r3, r9, r3
 8005086:	4313      	orrs	r3, r2
 8005088:	46a2      	mov	sl, r4
 800508a:	9304      	str	r3, [sp, #16]
 800508c:	e7d2      	b.n	8005034 <_svfiprintf_r+0xa0>
 800508e:	9b03      	ldr	r3, [sp, #12]
 8005090:	1d19      	adds	r1, r3, #4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	9103      	str	r1, [sp, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	bfbb      	ittet	lt
 800509a:	425b      	neglt	r3, r3
 800509c:	f042 0202 	orrlt.w	r2, r2, #2
 80050a0:	9307      	strge	r3, [sp, #28]
 80050a2:	9307      	strlt	r3, [sp, #28]
 80050a4:	bfb8      	it	lt
 80050a6:	9204      	strlt	r2, [sp, #16]
 80050a8:	7823      	ldrb	r3, [r4, #0]
 80050aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80050ac:	d10a      	bne.n	80050c4 <_svfiprintf_r+0x130>
 80050ae:	7863      	ldrb	r3, [r4, #1]
 80050b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80050b2:	d132      	bne.n	800511a <_svfiprintf_r+0x186>
 80050b4:	9b03      	ldr	r3, [sp, #12]
 80050b6:	3402      	adds	r4, #2
 80050b8:	1d1a      	adds	r2, r3, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	9203      	str	r2, [sp, #12]
 80050be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050c2:	9305      	str	r3, [sp, #20]
 80050c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800517c <_svfiprintf_r+0x1e8>
 80050c8:	2203      	movs	r2, #3
 80050ca:	4650      	mov	r0, sl
 80050cc:	7821      	ldrb	r1, [r4, #0]
 80050ce:	f7fe fc26 	bl	800391e <memchr>
 80050d2:	b138      	cbz	r0, 80050e4 <_svfiprintf_r+0x150>
 80050d4:	2240      	movs	r2, #64	@ 0x40
 80050d6:	9b04      	ldr	r3, [sp, #16]
 80050d8:	eba0 000a 	sub.w	r0, r0, sl
 80050dc:	4082      	lsls	r2, r0
 80050de:	4313      	orrs	r3, r2
 80050e0:	3401      	adds	r4, #1
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e8:	2206      	movs	r2, #6
 80050ea:	4825      	ldr	r0, [pc, #148]	@ (8005180 <_svfiprintf_r+0x1ec>)
 80050ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050f0:	f7fe fc15 	bl	800391e <memchr>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d036      	beq.n	8005166 <_svfiprintf_r+0x1d2>
 80050f8:	4b22      	ldr	r3, [pc, #136]	@ (8005184 <_svfiprintf_r+0x1f0>)
 80050fa:	bb1b      	cbnz	r3, 8005144 <_svfiprintf_r+0x1b0>
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	3307      	adds	r3, #7
 8005100:	f023 0307 	bic.w	r3, r3, #7
 8005104:	3308      	adds	r3, #8
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800510a:	4433      	add	r3, r6
 800510c:	9309      	str	r3, [sp, #36]	@ 0x24
 800510e:	e76a      	b.n	8004fe6 <_svfiprintf_r+0x52>
 8005110:	460c      	mov	r4, r1
 8005112:	2001      	movs	r0, #1
 8005114:	fb0c 3202 	mla	r2, ip, r2, r3
 8005118:	e7a8      	b.n	800506c <_svfiprintf_r+0xd8>
 800511a:	2300      	movs	r3, #0
 800511c:	f04f 0c0a 	mov.w	ip, #10
 8005120:	4619      	mov	r1, r3
 8005122:	3401      	adds	r4, #1
 8005124:	9305      	str	r3, [sp, #20]
 8005126:	4620      	mov	r0, r4
 8005128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800512c:	3a30      	subs	r2, #48	@ 0x30
 800512e:	2a09      	cmp	r2, #9
 8005130:	d903      	bls.n	800513a <_svfiprintf_r+0x1a6>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0c6      	beq.n	80050c4 <_svfiprintf_r+0x130>
 8005136:	9105      	str	r1, [sp, #20]
 8005138:	e7c4      	b.n	80050c4 <_svfiprintf_r+0x130>
 800513a:	4604      	mov	r4, r0
 800513c:	2301      	movs	r3, #1
 800513e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005142:	e7f0      	b.n	8005126 <_svfiprintf_r+0x192>
 8005144:	ab03      	add	r3, sp, #12
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	462a      	mov	r2, r5
 800514a:	4638      	mov	r0, r7
 800514c:	4b0e      	ldr	r3, [pc, #56]	@ (8005188 <_svfiprintf_r+0x1f4>)
 800514e:	a904      	add	r1, sp, #16
 8005150:	f7fd fe82 	bl	8002e58 <_printf_float>
 8005154:	1c42      	adds	r2, r0, #1
 8005156:	4606      	mov	r6, r0
 8005158:	d1d6      	bne.n	8005108 <_svfiprintf_r+0x174>
 800515a:	89ab      	ldrh	r3, [r5, #12]
 800515c:	065b      	lsls	r3, r3, #25
 800515e:	f53f af2d 	bmi.w	8004fbc <_svfiprintf_r+0x28>
 8005162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005164:	e72c      	b.n	8004fc0 <_svfiprintf_r+0x2c>
 8005166:	ab03      	add	r3, sp, #12
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	462a      	mov	r2, r5
 800516c:	4638      	mov	r0, r7
 800516e:	4b06      	ldr	r3, [pc, #24]	@ (8005188 <_svfiprintf_r+0x1f4>)
 8005170:	a904      	add	r1, sp, #16
 8005172:	f7fe f90f 	bl	8003394 <_printf_i>
 8005176:	e7ed      	b.n	8005154 <_svfiprintf_r+0x1c0>
 8005178:	08005c38 	.word	0x08005c38
 800517c:	08005c3e 	.word	0x08005c3e
 8005180:	08005c42 	.word	0x08005c42
 8005184:	08002e59 	.word	0x08002e59
 8005188:	08004edd 	.word	0x08004edd

0800518c <__sflush_r>:
 800518c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	0716      	lsls	r6, r2, #28
 8005194:	4605      	mov	r5, r0
 8005196:	460c      	mov	r4, r1
 8005198:	d454      	bmi.n	8005244 <__sflush_r+0xb8>
 800519a:	684b      	ldr	r3, [r1, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	dc02      	bgt.n	80051a6 <__sflush_r+0x1a>
 80051a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	dd48      	ble.n	8005238 <__sflush_r+0xac>
 80051a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051a8:	2e00      	cmp	r6, #0
 80051aa:	d045      	beq.n	8005238 <__sflush_r+0xac>
 80051ac:	2300      	movs	r3, #0
 80051ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051b2:	682f      	ldr	r7, [r5, #0]
 80051b4:	6a21      	ldr	r1, [r4, #32]
 80051b6:	602b      	str	r3, [r5, #0]
 80051b8:	d030      	beq.n	800521c <__sflush_r+0x90>
 80051ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	0759      	lsls	r1, r3, #29
 80051c0:	d505      	bpl.n	80051ce <__sflush_r+0x42>
 80051c2:	6863      	ldr	r3, [r4, #4]
 80051c4:	1ad2      	subs	r2, r2, r3
 80051c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051c8:	b10b      	cbz	r3, 80051ce <__sflush_r+0x42>
 80051ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051cc:	1ad2      	subs	r2, r2, r3
 80051ce:	2300      	movs	r3, #0
 80051d0:	4628      	mov	r0, r5
 80051d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051d4:	6a21      	ldr	r1, [r4, #32]
 80051d6:	47b0      	blx	r6
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	d106      	bne.n	80051ec <__sflush_r+0x60>
 80051de:	6829      	ldr	r1, [r5, #0]
 80051e0:	291d      	cmp	r1, #29
 80051e2:	d82b      	bhi.n	800523c <__sflush_r+0xb0>
 80051e4:	4a28      	ldr	r2, [pc, #160]	@ (8005288 <__sflush_r+0xfc>)
 80051e6:	410a      	asrs	r2, r1
 80051e8:	07d6      	lsls	r6, r2, #31
 80051ea:	d427      	bmi.n	800523c <__sflush_r+0xb0>
 80051ec:	2200      	movs	r2, #0
 80051ee:	6062      	str	r2, [r4, #4]
 80051f0:	6922      	ldr	r2, [r4, #16]
 80051f2:	04d9      	lsls	r1, r3, #19
 80051f4:	6022      	str	r2, [r4, #0]
 80051f6:	d504      	bpl.n	8005202 <__sflush_r+0x76>
 80051f8:	1c42      	adds	r2, r0, #1
 80051fa:	d101      	bne.n	8005200 <__sflush_r+0x74>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b903      	cbnz	r3, 8005202 <__sflush_r+0x76>
 8005200:	6560      	str	r0, [r4, #84]	@ 0x54
 8005202:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005204:	602f      	str	r7, [r5, #0]
 8005206:	b1b9      	cbz	r1, 8005238 <__sflush_r+0xac>
 8005208:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800520c:	4299      	cmp	r1, r3
 800520e:	d002      	beq.n	8005216 <__sflush_r+0x8a>
 8005210:	4628      	mov	r0, r5
 8005212:	f7ff f9e5 	bl	80045e0 <_free_r>
 8005216:	2300      	movs	r3, #0
 8005218:	6363      	str	r3, [r4, #52]	@ 0x34
 800521a:	e00d      	b.n	8005238 <__sflush_r+0xac>
 800521c:	2301      	movs	r3, #1
 800521e:	4628      	mov	r0, r5
 8005220:	47b0      	blx	r6
 8005222:	4602      	mov	r2, r0
 8005224:	1c50      	adds	r0, r2, #1
 8005226:	d1c9      	bne.n	80051bc <__sflush_r+0x30>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0c6      	beq.n	80051bc <__sflush_r+0x30>
 800522e:	2b1d      	cmp	r3, #29
 8005230:	d001      	beq.n	8005236 <__sflush_r+0xaa>
 8005232:	2b16      	cmp	r3, #22
 8005234:	d11d      	bne.n	8005272 <__sflush_r+0xe6>
 8005236:	602f      	str	r7, [r5, #0]
 8005238:	2000      	movs	r0, #0
 800523a:	e021      	b.n	8005280 <__sflush_r+0xf4>
 800523c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005240:	b21b      	sxth	r3, r3
 8005242:	e01a      	b.n	800527a <__sflush_r+0xee>
 8005244:	690f      	ldr	r7, [r1, #16]
 8005246:	2f00      	cmp	r7, #0
 8005248:	d0f6      	beq.n	8005238 <__sflush_r+0xac>
 800524a:	0793      	lsls	r3, r2, #30
 800524c:	bf18      	it	ne
 800524e:	2300      	movne	r3, #0
 8005250:	680e      	ldr	r6, [r1, #0]
 8005252:	bf08      	it	eq
 8005254:	694b      	ldreq	r3, [r1, #20]
 8005256:	1bf6      	subs	r6, r6, r7
 8005258:	600f      	str	r7, [r1, #0]
 800525a:	608b      	str	r3, [r1, #8]
 800525c:	2e00      	cmp	r6, #0
 800525e:	ddeb      	ble.n	8005238 <__sflush_r+0xac>
 8005260:	4633      	mov	r3, r6
 8005262:	463a      	mov	r2, r7
 8005264:	4628      	mov	r0, r5
 8005266:	6a21      	ldr	r1, [r4, #32]
 8005268:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800526c:	47e0      	blx	ip
 800526e:	2800      	cmp	r0, #0
 8005270:	dc07      	bgt.n	8005282 <__sflush_r+0xf6>
 8005272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800527a:	f04f 30ff 	mov.w	r0, #4294967295
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005282:	4407      	add	r7, r0
 8005284:	1a36      	subs	r6, r6, r0
 8005286:	e7e9      	b.n	800525c <__sflush_r+0xd0>
 8005288:	dfbffffe 	.word	0xdfbffffe

0800528c <_fflush_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	690b      	ldr	r3, [r1, #16]
 8005290:	4605      	mov	r5, r0
 8005292:	460c      	mov	r4, r1
 8005294:	b913      	cbnz	r3, 800529c <_fflush_r+0x10>
 8005296:	2500      	movs	r5, #0
 8005298:	4628      	mov	r0, r5
 800529a:	bd38      	pop	{r3, r4, r5, pc}
 800529c:	b118      	cbz	r0, 80052a6 <_fflush_r+0x1a>
 800529e:	6a03      	ldr	r3, [r0, #32]
 80052a0:	b90b      	cbnz	r3, 80052a6 <_fflush_r+0x1a>
 80052a2:	f7fe fa23 	bl	80036ec <__sinit>
 80052a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f3      	beq.n	8005296 <_fflush_r+0xa>
 80052ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052b0:	07d0      	lsls	r0, r2, #31
 80052b2:	d404      	bmi.n	80052be <_fflush_r+0x32>
 80052b4:	0599      	lsls	r1, r3, #22
 80052b6:	d402      	bmi.n	80052be <_fflush_r+0x32>
 80052b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ba:	f7fe fb2e 	bl	800391a <__retarget_lock_acquire_recursive>
 80052be:	4628      	mov	r0, r5
 80052c0:	4621      	mov	r1, r4
 80052c2:	f7ff ff63 	bl	800518c <__sflush_r>
 80052c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052c8:	4605      	mov	r5, r0
 80052ca:	07da      	lsls	r2, r3, #31
 80052cc:	d4e4      	bmi.n	8005298 <_fflush_r+0xc>
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	059b      	lsls	r3, r3, #22
 80052d2:	d4e1      	bmi.n	8005298 <_fflush_r+0xc>
 80052d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052d6:	f7fe fb21 	bl	800391c <__retarget_lock_release_recursive>
 80052da:	e7dd      	b.n	8005298 <_fflush_r+0xc>

080052dc <memmove>:
 80052dc:	4288      	cmp	r0, r1
 80052de:	b510      	push	{r4, lr}
 80052e0:	eb01 0402 	add.w	r4, r1, r2
 80052e4:	d902      	bls.n	80052ec <memmove+0x10>
 80052e6:	4284      	cmp	r4, r0
 80052e8:	4623      	mov	r3, r4
 80052ea:	d807      	bhi.n	80052fc <memmove+0x20>
 80052ec:	1e43      	subs	r3, r0, #1
 80052ee:	42a1      	cmp	r1, r4
 80052f0:	d008      	beq.n	8005304 <memmove+0x28>
 80052f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052fa:	e7f8      	b.n	80052ee <memmove+0x12>
 80052fc:	4601      	mov	r1, r0
 80052fe:	4402      	add	r2, r0
 8005300:	428a      	cmp	r2, r1
 8005302:	d100      	bne.n	8005306 <memmove+0x2a>
 8005304:	bd10      	pop	{r4, pc}
 8005306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800530a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800530e:	e7f7      	b.n	8005300 <memmove+0x24>

08005310 <_sbrk_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	2300      	movs	r3, #0
 8005314:	4d05      	ldr	r5, [pc, #20]	@ (800532c <_sbrk_r+0x1c>)
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7fd fc9e 	bl	8002c5c <_sbrk>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_sbrk_r+0x1a>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_sbrk_r+0x1a>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	200006f0 	.word	0x200006f0

08005330 <memcpy>:
 8005330:	440a      	add	r2, r1
 8005332:	4291      	cmp	r1, r2
 8005334:	f100 33ff 	add.w	r3, r0, #4294967295
 8005338:	d100      	bne.n	800533c <memcpy+0xc>
 800533a:	4770      	bx	lr
 800533c:	b510      	push	{r4, lr}
 800533e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005342:	4291      	cmp	r1, r2
 8005344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005348:	d1f9      	bne.n	800533e <memcpy+0xe>
 800534a:	bd10      	pop	{r4, pc}

0800534c <__assert_func>:
 800534c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800534e:	4614      	mov	r4, r2
 8005350:	461a      	mov	r2, r3
 8005352:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <__assert_func+0x2c>)
 8005354:	4605      	mov	r5, r0
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68d8      	ldr	r0, [r3, #12]
 800535a:	b954      	cbnz	r4, 8005372 <__assert_func+0x26>
 800535c:	4b07      	ldr	r3, [pc, #28]	@ (800537c <__assert_func+0x30>)
 800535e:	461c      	mov	r4, r3
 8005360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005364:	9100      	str	r1, [sp, #0]
 8005366:	462b      	mov	r3, r5
 8005368:	4905      	ldr	r1, [pc, #20]	@ (8005380 <__assert_func+0x34>)
 800536a:	f000 f86f 	bl	800544c <fiprintf>
 800536e:	f000 f87f 	bl	8005470 <abort>
 8005372:	4b04      	ldr	r3, [pc, #16]	@ (8005384 <__assert_func+0x38>)
 8005374:	e7f4      	b.n	8005360 <__assert_func+0x14>
 8005376:	bf00      	nop
 8005378:	200000d0 	.word	0x200000d0
 800537c:	08005c8e 	.word	0x08005c8e
 8005380:	08005c60 	.word	0x08005c60
 8005384:	08005c53 	.word	0x08005c53

08005388 <_calloc_r>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	fba1 5402 	umull	r5, r4, r1, r2
 800538e:	b93c      	cbnz	r4, 80053a0 <_calloc_r+0x18>
 8005390:	4629      	mov	r1, r5
 8005392:	f7ff f997 	bl	80046c4 <_malloc_r>
 8005396:	4606      	mov	r6, r0
 8005398:	b928      	cbnz	r0, 80053a6 <_calloc_r+0x1e>
 800539a:	2600      	movs	r6, #0
 800539c:	4630      	mov	r0, r6
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	220c      	movs	r2, #12
 80053a2:	6002      	str	r2, [r0, #0]
 80053a4:	e7f9      	b.n	800539a <_calloc_r+0x12>
 80053a6:	462a      	mov	r2, r5
 80053a8:	4621      	mov	r1, r4
 80053aa:	f7fe fa39 	bl	8003820 <memset>
 80053ae:	e7f5      	b.n	800539c <_calloc_r+0x14>

080053b0 <__ascii_mbtowc>:
 80053b0:	b082      	sub	sp, #8
 80053b2:	b901      	cbnz	r1, 80053b6 <__ascii_mbtowc+0x6>
 80053b4:	a901      	add	r1, sp, #4
 80053b6:	b142      	cbz	r2, 80053ca <__ascii_mbtowc+0x1a>
 80053b8:	b14b      	cbz	r3, 80053ce <__ascii_mbtowc+0x1e>
 80053ba:	7813      	ldrb	r3, [r2, #0]
 80053bc:	600b      	str	r3, [r1, #0]
 80053be:	7812      	ldrb	r2, [r2, #0]
 80053c0:	1e10      	subs	r0, r2, #0
 80053c2:	bf18      	it	ne
 80053c4:	2001      	movne	r0, #1
 80053c6:	b002      	add	sp, #8
 80053c8:	4770      	bx	lr
 80053ca:	4610      	mov	r0, r2
 80053cc:	e7fb      	b.n	80053c6 <__ascii_mbtowc+0x16>
 80053ce:	f06f 0001 	mvn.w	r0, #1
 80053d2:	e7f8      	b.n	80053c6 <__ascii_mbtowc+0x16>

080053d4 <_realloc_r>:
 80053d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d8:	4680      	mov	r8, r0
 80053da:	4615      	mov	r5, r2
 80053dc:	460c      	mov	r4, r1
 80053de:	b921      	cbnz	r1, 80053ea <_realloc_r+0x16>
 80053e0:	4611      	mov	r1, r2
 80053e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053e6:	f7ff b96d 	b.w	80046c4 <_malloc_r>
 80053ea:	b92a      	cbnz	r2, 80053f8 <_realloc_r+0x24>
 80053ec:	f7ff f8f8 	bl	80045e0 <_free_r>
 80053f0:	2400      	movs	r4, #0
 80053f2:	4620      	mov	r0, r4
 80053f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f8:	f000 f841 	bl	800547e <_malloc_usable_size_r>
 80053fc:	4285      	cmp	r5, r0
 80053fe:	4606      	mov	r6, r0
 8005400:	d802      	bhi.n	8005408 <_realloc_r+0x34>
 8005402:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005406:	d8f4      	bhi.n	80053f2 <_realloc_r+0x1e>
 8005408:	4629      	mov	r1, r5
 800540a:	4640      	mov	r0, r8
 800540c:	f7ff f95a 	bl	80046c4 <_malloc_r>
 8005410:	4607      	mov	r7, r0
 8005412:	2800      	cmp	r0, #0
 8005414:	d0ec      	beq.n	80053f0 <_realloc_r+0x1c>
 8005416:	42b5      	cmp	r5, r6
 8005418:	462a      	mov	r2, r5
 800541a:	4621      	mov	r1, r4
 800541c:	bf28      	it	cs
 800541e:	4632      	movcs	r2, r6
 8005420:	f7ff ff86 	bl	8005330 <memcpy>
 8005424:	4621      	mov	r1, r4
 8005426:	4640      	mov	r0, r8
 8005428:	f7ff f8da 	bl	80045e0 <_free_r>
 800542c:	463c      	mov	r4, r7
 800542e:	e7e0      	b.n	80053f2 <_realloc_r+0x1e>

08005430 <__ascii_wctomb>:
 8005430:	4603      	mov	r3, r0
 8005432:	4608      	mov	r0, r1
 8005434:	b141      	cbz	r1, 8005448 <__ascii_wctomb+0x18>
 8005436:	2aff      	cmp	r2, #255	@ 0xff
 8005438:	d904      	bls.n	8005444 <__ascii_wctomb+0x14>
 800543a:	228a      	movs	r2, #138	@ 0x8a
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	4770      	bx	lr
 8005444:	2001      	movs	r0, #1
 8005446:	700a      	strb	r2, [r1, #0]
 8005448:	4770      	bx	lr
	...

0800544c <fiprintf>:
 800544c:	b40e      	push	{r1, r2, r3}
 800544e:	b503      	push	{r0, r1, lr}
 8005450:	4601      	mov	r1, r0
 8005452:	ab03      	add	r3, sp, #12
 8005454:	4805      	ldr	r0, [pc, #20]	@ (800546c <fiprintf+0x20>)
 8005456:	f853 2b04 	ldr.w	r2, [r3], #4
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	f000 f83d 	bl	80054dc <_vfiprintf_r>
 8005462:	b002      	add	sp, #8
 8005464:	f85d eb04 	ldr.w	lr, [sp], #4
 8005468:	b003      	add	sp, #12
 800546a:	4770      	bx	lr
 800546c:	200000d0 	.word	0x200000d0

08005470 <abort>:
 8005470:	2006      	movs	r0, #6
 8005472:	b508      	push	{r3, lr}
 8005474:	f000 fa06 	bl	8005884 <raise>
 8005478:	2001      	movs	r0, #1
 800547a:	f7fd fb7a 	bl	8002b72 <_exit>

0800547e <_malloc_usable_size_r>:
 800547e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005482:	1f18      	subs	r0, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	bfbc      	itt	lt
 8005488:	580b      	ldrlt	r3, [r1, r0]
 800548a:	18c0      	addlt	r0, r0, r3
 800548c:	4770      	bx	lr

0800548e <__sfputc_r>:
 800548e:	6893      	ldr	r3, [r2, #8]
 8005490:	b410      	push	{r4}
 8005492:	3b01      	subs	r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	6093      	str	r3, [r2, #8]
 8005498:	da07      	bge.n	80054aa <__sfputc_r+0x1c>
 800549a:	6994      	ldr	r4, [r2, #24]
 800549c:	42a3      	cmp	r3, r4
 800549e:	db01      	blt.n	80054a4 <__sfputc_r+0x16>
 80054a0:	290a      	cmp	r1, #10
 80054a2:	d102      	bne.n	80054aa <__sfputc_r+0x1c>
 80054a4:	bc10      	pop	{r4}
 80054a6:	f000 b931 	b.w	800570c <__swbuf_r>
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	1c58      	adds	r0, r3, #1
 80054ae:	6010      	str	r0, [r2, #0]
 80054b0:	7019      	strb	r1, [r3, #0]
 80054b2:	4608      	mov	r0, r1
 80054b4:	bc10      	pop	{r4}
 80054b6:	4770      	bx	lr

080054b8 <__sfputs_r>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	4606      	mov	r6, r0
 80054bc:	460f      	mov	r7, r1
 80054be:	4614      	mov	r4, r2
 80054c0:	18d5      	adds	r5, r2, r3
 80054c2:	42ac      	cmp	r4, r5
 80054c4:	d101      	bne.n	80054ca <__sfputs_r+0x12>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e007      	b.n	80054da <__sfputs_r+0x22>
 80054ca:	463a      	mov	r2, r7
 80054cc:	4630      	mov	r0, r6
 80054ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d2:	f7ff ffdc 	bl	800548e <__sfputc_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	d1f3      	bne.n	80054c2 <__sfputs_r+0xa>
 80054da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054dc <_vfiprintf_r>:
 80054dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	460d      	mov	r5, r1
 80054e2:	4614      	mov	r4, r2
 80054e4:	4698      	mov	r8, r3
 80054e6:	4606      	mov	r6, r0
 80054e8:	b09d      	sub	sp, #116	@ 0x74
 80054ea:	b118      	cbz	r0, 80054f4 <_vfiprintf_r+0x18>
 80054ec:	6a03      	ldr	r3, [r0, #32]
 80054ee:	b90b      	cbnz	r3, 80054f4 <_vfiprintf_r+0x18>
 80054f0:	f7fe f8fc 	bl	80036ec <__sinit>
 80054f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054f6:	07d9      	lsls	r1, r3, #31
 80054f8:	d405      	bmi.n	8005506 <_vfiprintf_r+0x2a>
 80054fa:	89ab      	ldrh	r3, [r5, #12]
 80054fc:	059a      	lsls	r2, r3, #22
 80054fe:	d402      	bmi.n	8005506 <_vfiprintf_r+0x2a>
 8005500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005502:	f7fe fa0a 	bl	800391a <__retarget_lock_acquire_recursive>
 8005506:	89ab      	ldrh	r3, [r5, #12]
 8005508:	071b      	lsls	r3, r3, #28
 800550a:	d501      	bpl.n	8005510 <_vfiprintf_r+0x34>
 800550c:	692b      	ldr	r3, [r5, #16]
 800550e:	b99b      	cbnz	r3, 8005538 <_vfiprintf_r+0x5c>
 8005510:	4629      	mov	r1, r5
 8005512:	4630      	mov	r0, r6
 8005514:	f000 f938 	bl	8005788 <__swsetup_r>
 8005518:	b170      	cbz	r0, 8005538 <_vfiprintf_r+0x5c>
 800551a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800551c:	07dc      	lsls	r4, r3, #31
 800551e:	d504      	bpl.n	800552a <_vfiprintf_r+0x4e>
 8005520:	f04f 30ff 	mov.w	r0, #4294967295
 8005524:	b01d      	add	sp, #116	@ 0x74
 8005526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552a:	89ab      	ldrh	r3, [r5, #12]
 800552c:	0598      	lsls	r0, r3, #22
 800552e:	d4f7      	bmi.n	8005520 <_vfiprintf_r+0x44>
 8005530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005532:	f7fe f9f3 	bl	800391c <__retarget_lock_release_recursive>
 8005536:	e7f3      	b.n	8005520 <_vfiprintf_r+0x44>
 8005538:	2300      	movs	r3, #0
 800553a:	9309      	str	r3, [sp, #36]	@ 0x24
 800553c:	2320      	movs	r3, #32
 800553e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005542:	2330      	movs	r3, #48	@ 0x30
 8005544:	f04f 0901 	mov.w	r9, #1
 8005548:	f8cd 800c 	str.w	r8, [sp, #12]
 800554c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80056f8 <_vfiprintf_r+0x21c>
 8005550:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005554:	4623      	mov	r3, r4
 8005556:	469a      	mov	sl, r3
 8005558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800555c:	b10a      	cbz	r2, 8005562 <_vfiprintf_r+0x86>
 800555e:	2a25      	cmp	r2, #37	@ 0x25
 8005560:	d1f9      	bne.n	8005556 <_vfiprintf_r+0x7a>
 8005562:	ebba 0b04 	subs.w	fp, sl, r4
 8005566:	d00b      	beq.n	8005580 <_vfiprintf_r+0xa4>
 8005568:	465b      	mov	r3, fp
 800556a:	4622      	mov	r2, r4
 800556c:	4629      	mov	r1, r5
 800556e:	4630      	mov	r0, r6
 8005570:	f7ff ffa2 	bl	80054b8 <__sfputs_r>
 8005574:	3001      	adds	r0, #1
 8005576:	f000 80a7 	beq.w	80056c8 <_vfiprintf_r+0x1ec>
 800557a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800557c:	445a      	add	r2, fp
 800557e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005580:	f89a 3000 	ldrb.w	r3, [sl]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 809f 	beq.w	80056c8 <_vfiprintf_r+0x1ec>
 800558a:	2300      	movs	r3, #0
 800558c:	f04f 32ff 	mov.w	r2, #4294967295
 8005590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005594:	f10a 0a01 	add.w	sl, sl, #1
 8005598:	9304      	str	r3, [sp, #16]
 800559a:	9307      	str	r3, [sp, #28]
 800559c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80055a2:	4654      	mov	r4, sl
 80055a4:	2205      	movs	r2, #5
 80055a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055aa:	4853      	ldr	r0, [pc, #332]	@ (80056f8 <_vfiprintf_r+0x21c>)
 80055ac:	f7fe f9b7 	bl	800391e <memchr>
 80055b0:	9a04      	ldr	r2, [sp, #16]
 80055b2:	b9d8      	cbnz	r0, 80055ec <_vfiprintf_r+0x110>
 80055b4:	06d1      	lsls	r1, r2, #27
 80055b6:	bf44      	itt	mi
 80055b8:	2320      	movmi	r3, #32
 80055ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055be:	0713      	lsls	r3, r2, #28
 80055c0:	bf44      	itt	mi
 80055c2:	232b      	movmi	r3, #43	@ 0x2b
 80055c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055c8:	f89a 3000 	ldrb.w	r3, [sl]
 80055cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80055ce:	d015      	beq.n	80055fc <_vfiprintf_r+0x120>
 80055d0:	4654      	mov	r4, sl
 80055d2:	2000      	movs	r0, #0
 80055d4:	f04f 0c0a 	mov.w	ip, #10
 80055d8:	9a07      	ldr	r2, [sp, #28]
 80055da:	4621      	mov	r1, r4
 80055dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055e0:	3b30      	subs	r3, #48	@ 0x30
 80055e2:	2b09      	cmp	r3, #9
 80055e4:	d94b      	bls.n	800567e <_vfiprintf_r+0x1a2>
 80055e6:	b1b0      	cbz	r0, 8005616 <_vfiprintf_r+0x13a>
 80055e8:	9207      	str	r2, [sp, #28]
 80055ea:	e014      	b.n	8005616 <_vfiprintf_r+0x13a>
 80055ec:	eba0 0308 	sub.w	r3, r0, r8
 80055f0:	fa09 f303 	lsl.w	r3, r9, r3
 80055f4:	4313      	orrs	r3, r2
 80055f6:	46a2      	mov	sl, r4
 80055f8:	9304      	str	r3, [sp, #16]
 80055fa:	e7d2      	b.n	80055a2 <_vfiprintf_r+0xc6>
 80055fc:	9b03      	ldr	r3, [sp, #12]
 80055fe:	1d19      	adds	r1, r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	9103      	str	r1, [sp, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	bfbb      	ittet	lt
 8005608:	425b      	neglt	r3, r3
 800560a:	f042 0202 	orrlt.w	r2, r2, #2
 800560e:	9307      	strge	r3, [sp, #28]
 8005610:	9307      	strlt	r3, [sp, #28]
 8005612:	bfb8      	it	lt
 8005614:	9204      	strlt	r2, [sp, #16]
 8005616:	7823      	ldrb	r3, [r4, #0]
 8005618:	2b2e      	cmp	r3, #46	@ 0x2e
 800561a:	d10a      	bne.n	8005632 <_vfiprintf_r+0x156>
 800561c:	7863      	ldrb	r3, [r4, #1]
 800561e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005620:	d132      	bne.n	8005688 <_vfiprintf_r+0x1ac>
 8005622:	9b03      	ldr	r3, [sp, #12]
 8005624:	3402      	adds	r4, #2
 8005626:	1d1a      	adds	r2, r3, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	9203      	str	r2, [sp, #12]
 800562c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005630:	9305      	str	r3, [sp, #20]
 8005632:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80056fc <_vfiprintf_r+0x220>
 8005636:	2203      	movs	r2, #3
 8005638:	4650      	mov	r0, sl
 800563a:	7821      	ldrb	r1, [r4, #0]
 800563c:	f7fe f96f 	bl	800391e <memchr>
 8005640:	b138      	cbz	r0, 8005652 <_vfiprintf_r+0x176>
 8005642:	2240      	movs	r2, #64	@ 0x40
 8005644:	9b04      	ldr	r3, [sp, #16]
 8005646:	eba0 000a 	sub.w	r0, r0, sl
 800564a:	4082      	lsls	r2, r0
 800564c:	4313      	orrs	r3, r2
 800564e:	3401      	adds	r4, #1
 8005650:	9304      	str	r3, [sp, #16]
 8005652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005656:	2206      	movs	r2, #6
 8005658:	4829      	ldr	r0, [pc, #164]	@ (8005700 <_vfiprintf_r+0x224>)
 800565a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800565e:	f7fe f95e 	bl	800391e <memchr>
 8005662:	2800      	cmp	r0, #0
 8005664:	d03f      	beq.n	80056e6 <_vfiprintf_r+0x20a>
 8005666:	4b27      	ldr	r3, [pc, #156]	@ (8005704 <_vfiprintf_r+0x228>)
 8005668:	bb1b      	cbnz	r3, 80056b2 <_vfiprintf_r+0x1d6>
 800566a:	9b03      	ldr	r3, [sp, #12]
 800566c:	3307      	adds	r3, #7
 800566e:	f023 0307 	bic.w	r3, r3, #7
 8005672:	3308      	adds	r3, #8
 8005674:	9303      	str	r3, [sp, #12]
 8005676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005678:	443b      	add	r3, r7
 800567a:	9309      	str	r3, [sp, #36]	@ 0x24
 800567c:	e76a      	b.n	8005554 <_vfiprintf_r+0x78>
 800567e:	460c      	mov	r4, r1
 8005680:	2001      	movs	r0, #1
 8005682:	fb0c 3202 	mla	r2, ip, r2, r3
 8005686:	e7a8      	b.n	80055da <_vfiprintf_r+0xfe>
 8005688:	2300      	movs	r3, #0
 800568a:	f04f 0c0a 	mov.w	ip, #10
 800568e:	4619      	mov	r1, r3
 8005690:	3401      	adds	r4, #1
 8005692:	9305      	str	r3, [sp, #20]
 8005694:	4620      	mov	r0, r4
 8005696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800569a:	3a30      	subs	r2, #48	@ 0x30
 800569c:	2a09      	cmp	r2, #9
 800569e:	d903      	bls.n	80056a8 <_vfiprintf_r+0x1cc>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0c6      	beq.n	8005632 <_vfiprintf_r+0x156>
 80056a4:	9105      	str	r1, [sp, #20]
 80056a6:	e7c4      	b.n	8005632 <_vfiprintf_r+0x156>
 80056a8:	4604      	mov	r4, r0
 80056aa:	2301      	movs	r3, #1
 80056ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80056b0:	e7f0      	b.n	8005694 <_vfiprintf_r+0x1b8>
 80056b2:	ab03      	add	r3, sp, #12
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	462a      	mov	r2, r5
 80056b8:	4630      	mov	r0, r6
 80056ba:	4b13      	ldr	r3, [pc, #76]	@ (8005708 <_vfiprintf_r+0x22c>)
 80056bc:	a904      	add	r1, sp, #16
 80056be:	f7fd fbcb 	bl	8002e58 <_printf_float>
 80056c2:	4607      	mov	r7, r0
 80056c4:	1c78      	adds	r0, r7, #1
 80056c6:	d1d6      	bne.n	8005676 <_vfiprintf_r+0x19a>
 80056c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056ca:	07d9      	lsls	r1, r3, #31
 80056cc:	d405      	bmi.n	80056da <_vfiprintf_r+0x1fe>
 80056ce:	89ab      	ldrh	r3, [r5, #12]
 80056d0:	059a      	lsls	r2, r3, #22
 80056d2:	d402      	bmi.n	80056da <_vfiprintf_r+0x1fe>
 80056d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056d6:	f7fe f921 	bl	800391c <__retarget_lock_release_recursive>
 80056da:	89ab      	ldrh	r3, [r5, #12]
 80056dc:	065b      	lsls	r3, r3, #25
 80056de:	f53f af1f 	bmi.w	8005520 <_vfiprintf_r+0x44>
 80056e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056e4:	e71e      	b.n	8005524 <_vfiprintf_r+0x48>
 80056e6:	ab03      	add	r3, sp, #12
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	462a      	mov	r2, r5
 80056ec:	4630      	mov	r0, r6
 80056ee:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <_vfiprintf_r+0x22c>)
 80056f0:	a904      	add	r1, sp, #16
 80056f2:	f7fd fe4f 	bl	8003394 <_printf_i>
 80056f6:	e7e4      	b.n	80056c2 <_vfiprintf_r+0x1e6>
 80056f8:	08005c38 	.word	0x08005c38
 80056fc:	08005c3e 	.word	0x08005c3e
 8005700:	08005c42 	.word	0x08005c42
 8005704:	08002e59 	.word	0x08002e59
 8005708:	080054b9 	.word	0x080054b9

0800570c <__swbuf_r>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	460e      	mov	r6, r1
 8005710:	4614      	mov	r4, r2
 8005712:	4605      	mov	r5, r0
 8005714:	b118      	cbz	r0, 800571e <__swbuf_r+0x12>
 8005716:	6a03      	ldr	r3, [r0, #32]
 8005718:	b90b      	cbnz	r3, 800571e <__swbuf_r+0x12>
 800571a:	f7fd ffe7 	bl	80036ec <__sinit>
 800571e:	69a3      	ldr	r3, [r4, #24]
 8005720:	60a3      	str	r3, [r4, #8]
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	071a      	lsls	r2, r3, #28
 8005726:	d501      	bpl.n	800572c <__swbuf_r+0x20>
 8005728:	6923      	ldr	r3, [r4, #16]
 800572a:	b943      	cbnz	r3, 800573e <__swbuf_r+0x32>
 800572c:	4621      	mov	r1, r4
 800572e:	4628      	mov	r0, r5
 8005730:	f000 f82a 	bl	8005788 <__swsetup_r>
 8005734:	b118      	cbz	r0, 800573e <__swbuf_r+0x32>
 8005736:	f04f 37ff 	mov.w	r7, #4294967295
 800573a:	4638      	mov	r0, r7
 800573c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	6922      	ldr	r2, [r4, #16]
 8005742:	b2f6      	uxtb	r6, r6
 8005744:	1a98      	subs	r0, r3, r2
 8005746:	6963      	ldr	r3, [r4, #20]
 8005748:	4637      	mov	r7, r6
 800574a:	4283      	cmp	r3, r0
 800574c:	dc05      	bgt.n	800575a <__swbuf_r+0x4e>
 800574e:	4621      	mov	r1, r4
 8005750:	4628      	mov	r0, r5
 8005752:	f7ff fd9b 	bl	800528c <_fflush_r>
 8005756:	2800      	cmp	r0, #0
 8005758:	d1ed      	bne.n	8005736 <__swbuf_r+0x2a>
 800575a:	68a3      	ldr	r3, [r4, #8]
 800575c:	3b01      	subs	r3, #1
 800575e:	60a3      	str	r3, [r4, #8]
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	6022      	str	r2, [r4, #0]
 8005766:	701e      	strb	r6, [r3, #0]
 8005768:	6962      	ldr	r2, [r4, #20]
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	429a      	cmp	r2, r3
 800576e:	d004      	beq.n	800577a <__swbuf_r+0x6e>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	07db      	lsls	r3, r3, #31
 8005774:	d5e1      	bpl.n	800573a <__swbuf_r+0x2e>
 8005776:	2e0a      	cmp	r6, #10
 8005778:	d1df      	bne.n	800573a <__swbuf_r+0x2e>
 800577a:	4621      	mov	r1, r4
 800577c:	4628      	mov	r0, r5
 800577e:	f7ff fd85 	bl	800528c <_fflush_r>
 8005782:	2800      	cmp	r0, #0
 8005784:	d0d9      	beq.n	800573a <__swbuf_r+0x2e>
 8005786:	e7d6      	b.n	8005736 <__swbuf_r+0x2a>

08005788 <__swsetup_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4b29      	ldr	r3, [pc, #164]	@ (8005830 <__swsetup_r+0xa8>)
 800578c:	4605      	mov	r5, r0
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	460c      	mov	r4, r1
 8005792:	b118      	cbz	r0, 800579c <__swsetup_r+0x14>
 8005794:	6a03      	ldr	r3, [r0, #32]
 8005796:	b90b      	cbnz	r3, 800579c <__swsetup_r+0x14>
 8005798:	f7fd ffa8 	bl	80036ec <__sinit>
 800579c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a0:	0719      	lsls	r1, r3, #28
 80057a2:	d422      	bmi.n	80057ea <__swsetup_r+0x62>
 80057a4:	06da      	lsls	r2, r3, #27
 80057a6:	d407      	bmi.n	80057b8 <__swsetup_r+0x30>
 80057a8:	2209      	movs	r2, #9
 80057aa:	602a      	str	r2, [r5, #0]
 80057ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	e033      	b.n	8005820 <__swsetup_r+0x98>
 80057b8:	0758      	lsls	r0, r3, #29
 80057ba:	d512      	bpl.n	80057e2 <__swsetup_r+0x5a>
 80057bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057be:	b141      	cbz	r1, 80057d2 <__swsetup_r+0x4a>
 80057c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057c4:	4299      	cmp	r1, r3
 80057c6:	d002      	beq.n	80057ce <__swsetup_r+0x46>
 80057c8:	4628      	mov	r0, r5
 80057ca:	f7fe ff09 	bl	80045e0 <_free_r>
 80057ce:	2300      	movs	r3, #0
 80057d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	2300      	movs	r3, #0
 80057dc:	6063      	str	r3, [r4, #4]
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f043 0308 	orr.w	r3, r3, #8
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	b94b      	cbnz	r3, 8005802 <__swsetup_r+0x7a>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057f8:	d003      	beq.n	8005802 <__swsetup_r+0x7a>
 80057fa:	4621      	mov	r1, r4
 80057fc:	4628      	mov	r0, r5
 80057fe:	f000 f882 	bl	8005906 <__smakebuf_r>
 8005802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005806:	f013 0201 	ands.w	r2, r3, #1
 800580a:	d00a      	beq.n	8005822 <__swsetup_r+0x9a>
 800580c:	2200      	movs	r2, #0
 800580e:	60a2      	str	r2, [r4, #8]
 8005810:	6962      	ldr	r2, [r4, #20]
 8005812:	4252      	negs	r2, r2
 8005814:	61a2      	str	r2, [r4, #24]
 8005816:	6922      	ldr	r2, [r4, #16]
 8005818:	b942      	cbnz	r2, 800582c <__swsetup_r+0xa4>
 800581a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800581e:	d1c5      	bne.n	80057ac <__swsetup_r+0x24>
 8005820:	bd38      	pop	{r3, r4, r5, pc}
 8005822:	0799      	lsls	r1, r3, #30
 8005824:	bf58      	it	pl
 8005826:	6962      	ldrpl	r2, [r4, #20]
 8005828:	60a2      	str	r2, [r4, #8]
 800582a:	e7f4      	b.n	8005816 <__swsetup_r+0x8e>
 800582c:	2000      	movs	r0, #0
 800582e:	e7f7      	b.n	8005820 <__swsetup_r+0x98>
 8005830:	200000d0 	.word	0x200000d0

08005834 <_raise_r>:
 8005834:	291f      	cmp	r1, #31
 8005836:	b538      	push	{r3, r4, r5, lr}
 8005838:	4605      	mov	r5, r0
 800583a:	460c      	mov	r4, r1
 800583c:	d904      	bls.n	8005848 <_raise_r+0x14>
 800583e:	2316      	movs	r3, #22
 8005840:	6003      	str	r3, [r0, #0]
 8005842:	f04f 30ff 	mov.w	r0, #4294967295
 8005846:	bd38      	pop	{r3, r4, r5, pc}
 8005848:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800584a:	b112      	cbz	r2, 8005852 <_raise_r+0x1e>
 800584c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005850:	b94b      	cbnz	r3, 8005866 <_raise_r+0x32>
 8005852:	4628      	mov	r0, r5
 8005854:	f000 f830 	bl	80058b8 <_getpid_r>
 8005858:	4622      	mov	r2, r4
 800585a:	4601      	mov	r1, r0
 800585c:	4628      	mov	r0, r5
 800585e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005862:	f000 b817 	b.w	8005894 <_kill_r>
 8005866:	2b01      	cmp	r3, #1
 8005868:	d00a      	beq.n	8005880 <_raise_r+0x4c>
 800586a:	1c59      	adds	r1, r3, #1
 800586c:	d103      	bne.n	8005876 <_raise_r+0x42>
 800586e:	2316      	movs	r3, #22
 8005870:	6003      	str	r3, [r0, #0]
 8005872:	2001      	movs	r0, #1
 8005874:	e7e7      	b.n	8005846 <_raise_r+0x12>
 8005876:	2100      	movs	r1, #0
 8005878:	4620      	mov	r0, r4
 800587a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800587e:	4798      	blx	r3
 8005880:	2000      	movs	r0, #0
 8005882:	e7e0      	b.n	8005846 <_raise_r+0x12>

08005884 <raise>:
 8005884:	4b02      	ldr	r3, [pc, #8]	@ (8005890 <raise+0xc>)
 8005886:	4601      	mov	r1, r0
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	f7ff bfd3 	b.w	8005834 <_raise_r>
 800588e:	bf00      	nop
 8005890:	200000d0 	.word	0x200000d0

08005894 <_kill_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	2300      	movs	r3, #0
 8005898:	4d06      	ldr	r5, [pc, #24]	@ (80058b4 <_kill_r+0x20>)
 800589a:	4604      	mov	r4, r0
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	f7fd f956 	bl	8002b52 <_kill>
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	d102      	bne.n	80058b0 <_kill_r+0x1c>
 80058aa:	682b      	ldr	r3, [r5, #0]
 80058ac:	b103      	cbz	r3, 80058b0 <_kill_r+0x1c>
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	bd38      	pop	{r3, r4, r5, pc}
 80058b2:	bf00      	nop
 80058b4:	200006f0 	.word	0x200006f0

080058b8 <_getpid_r>:
 80058b8:	f7fd b944 	b.w	8002b44 <_getpid>

080058bc <__swhatbuf_r>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	460c      	mov	r4, r1
 80058c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c4:	4615      	mov	r5, r2
 80058c6:	2900      	cmp	r1, #0
 80058c8:	461e      	mov	r6, r3
 80058ca:	b096      	sub	sp, #88	@ 0x58
 80058cc:	da0c      	bge.n	80058e8 <__swhatbuf_r+0x2c>
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	2100      	movs	r1, #0
 80058d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058d6:	bf14      	ite	ne
 80058d8:	2340      	movne	r3, #64	@ 0x40
 80058da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058de:	2000      	movs	r0, #0
 80058e0:	6031      	str	r1, [r6, #0]
 80058e2:	602b      	str	r3, [r5, #0]
 80058e4:	b016      	add	sp, #88	@ 0x58
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	466a      	mov	r2, sp
 80058ea:	f000 f849 	bl	8005980 <_fstat_r>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	dbed      	blt.n	80058ce <__swhatbuf_r+0x12>
 80058f2:	9901      	ldr	r1, [sp, #4]
 80058f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058fc:	4259      	negs	r1, r3
 80058fe:	4159      	adcs	r1, r3
 8005900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005904:	e7eb      	b.n	80058de <__swhatbuf_r+0x22>

08005906 <__smakebuf_r>:
 8005906:	898b      	ldrh	r3, [r1, #12]
 8005908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800590a:	079d      	lsls	r5, r3, #30
 800590c:	4606      	mov	r6, r0
 800590e:	460c      	mov	r4, r1
 8005910:	d507      	bpl.n	8005922 <__smakebuf_r+0x1c>
 8005912:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	2301      	movs	r3, #1
 800591c:	6163      	str	r3, [r4, #20]
 800591e:	b003      	add	sp, #12
 8005920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005922:	466a      	mov	r2, sp
 8005924:	ab01      	add	r3, sp, #4
 8005926:	f7ff ffc9 	bl	80058bc <__swhatbuf_r>
 800592a:	9f00      	ldr	r7, [sp, #0]
 800592c:	4605      	mov	r5, r0
 800592e:	4639      	mov	r1, r7
 8005930:	4630      	mov	r0, r6
 8005932:	f7fe fec7 	bl	80046c4 <_malloc_r>
 8005936:	b948      	cbnz	r0, 800594c <__smakebuf_r+0x46>
 8005938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800593c:	059a      	lsls	r2, r3, #22
 800593e:	d4ee      	bmi.n	800591e <__smakebuf_r+0x18>
 8005940:	f023 0303 	bic.w	r3, r3, #3
 8005944:	f043 0302 	orr.w	r3, r3, #2
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	e7e2      	b.n	8005912 <__smakebuf_r+0xc>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	9b01      	ldr	r3, [sp, #4]
 800595a:	6020      	str	r0, [r4, #0]
 800595c:	b15b      	cbz	r3, 8005976 <__smakebuf_r+0x70>
 800595e:	4630      	mov	r0, r6
 8005960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005964:	f000 f81e 	bl	80059a4 <_isatty_r>
 8005968:	b128      	cbz	r0, 8005976 <__smakebuf_r+0x70>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	f023 0303 	bic.w	r3, r3, #3
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	431d      	orrs	r5, r3
 800597a:	81a5      	strh	r5, [r4, #12]
 800597c:	e7cf      	b.n	800591e <__smakebuf_r+0x18>
	...

08005980 <_fstat_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	2300      	movs	r3, #0
 8005984:	4d06      	ldr	r5, [pc, #24]	@ (80059a0 <_fstat_r+0x20>)
 8005986:	4604      	mov	r4, r0
 8005988:	4608      	mov	r0, r1
 800598a:	4611      	mov	r1, r2
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	f7fd f93f 	bl	8002c10 <_fstat>
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	d102      	bne.n	800599c <_fstat_r+0x1c>
 8005996:	682b      	ldr	r3, [r5, #0]
 8005998:	b103      	cbz	r3, 800599c <_fstat_r+0x1c>
 800599a:	6023      	str	r3, [r4, #0]
 800599c:	bd38      	pop	{r3, r4, r5, pc}
 800599e:	bf00      	nop
 80059a0:	200006f0 	.word	0x200006f0

080059a4 <_isatty_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	2300      	movs	r3, #0
 80059a8:	4d05      	ldr	r5, [pc, #20]	@ (80059c0 <_isatty_r+0x1c>)
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fd f93d 	bl	8002c2e <_isatty>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_isatty_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_isatty_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	200006f0 	.word	0x200006f0

080059c4 <_init>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr

080059d0 <_fini>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	bf00      	nop
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr
